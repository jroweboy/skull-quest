;
; File generated by cc65 v 2.19 - Git 4f87c7c
;
	.fopt		compiler,"cc65 v 2.19 - Git 4f87c7c"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_get_pad_new
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_fill
	.import		_vram_unrle
	.import		_memcpy
	.export		_forest_col_01
	.export		_forest_level_01
	.export		_title_screen
	.export		_PaddleSpr
	.export		_SkullSpr
	.export		_pal_forest_bg
	.export		_pal_spr_01
	.export		_level_list
	.export		_speed_float
	.export		_dir
	.export		_xCollisionDir
	.export		_yCollisionDir
	.export		_exp_1
	.export		_exp_10
	.export		_exp_100
	.export		_exp_1000
	.export		_exp_10000
	.export		_exp_100000
	.export		_debug1
	.export		_debug2
	.export		_pad1
	.export		_pad1_new
	.export		_c_map
	.export		_collision_index
	.export		_nametable_index
	.export		_backup_col_index
	.export		_backup_nt_index
	.export		_collision_mask
	.export		_backup_col_mask
	.export		_stuck_times
	.export		_i
	.export		_j
	.export		_temp
	.export		_temp_x
	.export		_temp_y
	.export		_collision_type
	.export		_backup_col_type
	.export		_skull_launched
	.export		_p1_health
	.export		_p1_max_health
	.export		_game_state
	.export		_current_level
	.export		_is_soft_hit
	.export		_ptr_speed_float
	.export		_ptr_skull_dir
	.export		_ptr_skull_speed
	.export		_Paddle
	.export		_Skull
	.export		_update_health
	.export		_show_HUD
	.export		_show_title_screen
	.export		_show_game_over
	.export		_show_screen
	.export		_load_title_screen
	.export		_remove_brick
	.export		_hit_brick
	.export		_add_x_speed
	.export		_subtract_x_speed
	.export		_add_y_speed
	.export		_subtract_y_speed
	.export		_set_collision_data
	.export		_backup_collision_info
	.export		_do_tile_collision
	.export		_is_paddle_skull_collision
	.export		_check_paddle_input
	.export		_check_paddle_collision
	.export		_check_main_input
	.export		_get_x_speed
	.export		_get_y_speed
	.export		_update_skull
	.export		_draw_sprites
	.export		_main

.segment	"DATA"

_Paddle:
	.byte	$75
	.byte	$CF
	.byte	$20
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.res	2,$00
_Skull:
	.byte	$FF
	.byte	$FF
	.byte	$06
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$FF
	.byte	$64
	.byte	$64
	.res	2,$00

.segment	"RODATA"

_forest_col_01:
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$60
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$60
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$60
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$11
	.byte	$11
_forest_level_01:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$A0
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$08
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$18
	.byte	$18
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$10
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$10
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$10
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$10
	.byte	$01
	.byte	$09
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$10
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$01
	.byte	$11
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$09
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$10
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$19
	.byte	$09
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$19
	.byte	$09
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$18
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$19
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$18
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$19
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$19
	.byte	$09
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$19
	.byte	$09
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$10
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$07
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$06
	.byte	$07
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$16
	.byte	$17
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$10
	.byte	$16
	.byte	$17
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$11
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$0F
	.byte	$11
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$15
	.byte	$10
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$15
	.byte	$10
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$15
	.byte	$10
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$15
	.byte	$10
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$01
	.byte	$17
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$55
	.byte	$01
	.byte	$06
	.byte	$51
	.byte	$55
	.byte	$A5
	.byte	$A5
	.byte	$55
	.byte	$55
	.byte	$A5
	.byte	$A5
	.byte	$55
	.byte	$01
	.byte	$03
	.byte	$5A
	.byte	$5A
	.byte	$55
	.byte	$01
	.byte	$04
	.byte	$F5
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$65
	.byte	$5F
	.byte	$01
	.byte	$03
	.byte	$95
	.byte	$55
	.byte	$01
	.byte	$09
	.byte	$F5
	.byte	$01
	.byte	$05
	.byte	$55
	.byte	$05
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$01
	.byte	$00
_title_screen:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$29
	.byte	$53
	.byte	$6B
	.byte	$75
	.byte	$6C
	.byte	$6C
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$51
	.byte	$75
	.byte	$65
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$B3
	.byte	$50
	.byte	$72
	.byte	$65
	.byte	$73
	.byte	$73
	.byte	$00
	.byte	$53
	.byte	$74
	.byte	$61
	.byte	$72
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$32
	.byte	$54
	.byte	$68
	.byte	$65
	.byte	$00
	.byte	$6F
	.byte	$6C
	.byte	$64
	.byte	$00
	.byte	$67
	.byte	$61
	.byte	$6D
	.byte	$65
	.byte	$00
	.byte	$6D
	.byte	$61
	.byte	$6B
	.byte	$65
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$33
	.byte	$40
	.byte	$32
	.byte	$30
	.byte	$32
	.byte	$32
	.byte	$00
	.byte	$01
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$00
_PaddleSpr:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
_SkullSpr:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$80
_pal_forest_bg:
	.byte	$0F
	.byte	$15
	.byte	$20
	.byte	$09
	.byte	$0F
	.byte	$29
	.byte	$1A
	.byte	$09
	.byte	$0F
	.byte	$08
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$37
	.byte	$17
	.byte	$09
_pal_spr_01:
	.byte	$0F
	.byte	$20
	.byte	$15
	.byte	$12
	.byte	$0F
	.byte	$11
	.byte	$22
	.byte	$32
	.byte	$0F
	.byte	$13
	.byte	$23
	.byte	$33
	.byte	$0F
	.byte	$14
	.byte	$24
	.byte	$34
_level_list:
	.addr	_forest_level_01
	.addr	_forest_col_01
	.addr	_pal_forest_bg

.segment	"BSS"

_speed_float:
	.res	1,$00
_dir:
	.res	1,$00
_xCollisionDir:
	.res	1,$00
_yCollisionDir:
	.res	1,$00
_exp_1:
	.res	1,$00
_exp_10:
	.res	1,$00
_exp_100:
	.res	1,$00
_exp_1000:
	.res	1,$00
_exp_10000:
	.res	1,$00
_exp_100000:
	.res	1,$00
_debug1:
	.res	1,$00
_debug2:
	.res	1,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_c_map:
	.res	368,$00
_collision_index:
	.res	2,$00
_nametable_index:
	.res	2,$00
_backup_col_index:
	.res	2,$00
_backup_nt_index:
	.res	2,$00
_collision_mask:
	.res	1,$00
_backup_col_mask:
	.res	1,$00
_stuck_times:
	.res	1,$00
_i:
	.res	1,$00
_j:
	.res	1,$00
_temp:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_collision_type:
	.res	1,$00
_backup_col_type:
	.res	1,$00
_skull_launched:
	.res	1,$00
_p1_health:
	.res	1,$00
_p1_max_health:
	.res	1,$00
_game_state:
	.res	1,$00
_current_level:
	.res	1,$00
_is_soft_hit:
	.res	1,$00
_ptr_speed_float:
	.res	2,$00
_ptr_skull_dir:
	.res	2,$00
_ptr_skull_speed:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ update_health (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_health: near

.segment	"CODE"

;
; if (p1_health > 0) {
;
	lda     _p1_health
	beq     L000E
;
; for (i = 0; i < p1_max_health; ++i) {
;
	lda     #$00
	sta     _i
L000B:	lda     _i
	cmp     _p1_max_health
	bcs     L000A
;
; one_vram_buffer((i < p1_health) ? TILE_HEART_FULL : TILE_HEART_EMPTY, NTADR_A(i + 2, 2));
;
	cmp     _p1_health
	bcs     L000C
	lda     #$5B
	jmp     L000D
L000C:	lda     #$5C
L000D:	jsr     pusha
	ldx     #$00
	lda     _i
	clc
	adc     #$02
	bcc     L0009
	inx
L0009:	ora     #$40
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; for (i = 0; i < p1_max_health; ++i) {
;
	inc     _i
	jmp     L000B
;
; one_vram_buffer(TILE_HEART_EMPTY, NTADR_A(2, 2));
;
L000E:	lda     #$5C
	jsr     pusha
	ldx     #$20
	lda     #$42
	jmp     _one_vram_buffer
;
; }
;
L000A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ show_HUD (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_HUD: near

.segment	"CODE"

;
; vram_adr(0x23C0);
;
	ldx     #$23
	lda     #$C0
	jsr     _vram_adr
;
; vram_fill(0x00, 8);
;
	lda     #$00
	jsr     pusha
	tax
	lda     #$08
	jsr     _vram_fill
;
; update_health();
;
	jsr     _update_health
;
; one_vram_buffer(0x5d, NTADR_A(22, 2));
;
	lda     #$5D
	jsr     pusha
	ldx     #$20
	lda     #$56
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x5e, NTADR_A(23, 2));
;
	lda     #$5E
	jsr     pusha
	ldx     #$20
	lda     #$57
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x5f, NTADR_A(24, 2));
;
	lda     #$5F
	jsr     pusha
	ldx     #$20
	lda     #$58
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x7e, NTADR_A(23, 3));
;
	lda     #$7E
	jsr     pusha
	ldx     #$20
	lda     #$77
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x7f, NTADR_A(24, 3));
;
	lda     #$7F
	jsr     pusha
	ldx     #$20
	lda     #$78
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ show_title_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_title_screen: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ show_game_over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_game_over: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ show_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_screen: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(level_list[current_level]);
;
	ldx     #$00
	lda     _current_level
	asl     a
	bcc     L0005
	inx
	clc
L0005:	adc     #<(_level_list)
	sta     ptr1
	txa
	adc     #>(_level_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _vram_unrle
;
; memcpy(c_map, level_list[current_level + 1], 368);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _current_level
	clc
	adc     #$01
	bcc     L0002
	inx
L0002:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_level_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_level_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$01
	lda     #$70
	jsr     _memcpy
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; if (game_state == MAIN) {
;
	lda     _game_state
	cmp     #$01
	bne     L0003
;
; show_HUD();
;
	jsr     _show_HUD
;
; skull_launched = FALSE;
;
	lda     #$00
	sta     _skull_launched
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_title_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_title_screen: near

.segment	"CODE"

;
; pal_bg(pal_forest_bg);
;
	lda     #<(_pal_forest_bg)
	ldx     #>(_pal_forest_bg)
	jsr     _pal_bg
;
; pal_spr(pal_spr_01);
;
	lda     #<(_pal_spr_01)
	ldx     #>(_pal_spr_01)
	jsr     _pal_spr
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; game_state = TITLE;
;
	lda     #$00
	sta     _game_state
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ remove_brick (char tile_type)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_remove_brick: near

.segment	"CODE"

;
; void remove_brick(char tile_type) {
;
	jsr     pusha
;
; one_vram_buffer(tile_type, backup_nt_index);
;
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     _one_vram_buffer
;
; c_map[backup_col_index] &= backup_nt_index % 2 ? 0b11110000 : 0b00001111;
;
	lda     _backup_col_index
	clc
	adc     #<(_c_map)
	tay
	lda     _backup_col_index+1
	adc     #>(_c_map)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	stx     tmp1
	ora     tmp1
	beq     L0002
	lda     #$F0
	jmp     L0003
L0002:	lda     #$0F
L0003:	jsr     tosanda0
	ldy     #$00
	jsr     staspidx
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ hit_brick (char tile_type)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hit_brick: near

.segment	"CODE"

;
; void hit_brick(char tile_type) {
;
	jsr     pusha
;
; remove_brick(tile_type);
;
	ldy     #$00
	lda     (sp),y
	jsr     _remove_brick
;
; is_soft_hit = FALSE;
;
	lda     #$00
	sta     _is_soft_hit
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ add_x_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_x_speed: near

.segment	"CODE"

;
; void add_x_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = Skull.xSpeedFloat;
;
	lda     _Skull+10
	sta     _temp
;
; Skull.xSpeedFloat += val;
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     _Skull+10
	sta     _Skull+10
;
; if (Skull.xSpeedFloat > MAX_SPEED || Skull.xSpeedFloat < temp) {
;
	cmp     #$FB
	bcs     L0007
	lda     _Skull+10
	cmp     _temp
	bcs     L0009
;
; Skull.xSpeedFloat = MAX_SPEED;
;
L0007:	lda     #$FA
	sta     _Skull+10
;
; Skull.xSpeed = (Skull.xSpeedFloat >> 7) * Skull.xDir;
;
L0009:	lda     _Skull+10
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha0
	lda     _Skull+8
	bpl     L0005
	ldx     #$FF
L0005:	jsr     tosmulax
	cmp     #$80
	sta     _Skull+6
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ subtract_x_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_subtract_x_speed: near

.segment	"CODE"

;
; void subtract_x_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = Skull.xSpeedFloat;
;
	lda     _Skull+10
	sta     _temp
;
; Skull.xSpeedFloat -= val;
;
	ldy     #$00
	lda     (sp),y
	eor     #$FF
	sec
	adc     _Skull+10
	sta     _Skull+10
;
; if (Skull.xSpeedFloat < MIN_SPEED || Skull.xSpeedFloat > temp) {
;
	cmp     #$40
	bcc     L0009
	lda     _Skull+10
	cmp     _temp
	beq     L000A
	bcc     L000A
;
; Skull.xSpeedFloat = MIN_SPEED;
;
L0009:	lda     #$40
	sta     _Skull+10
;
; Skull.xSpeed = (Skull.xSpeedFloat >> 7) * Skull.xDir;
;
L000A:	lda     _Skull+10
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha0
	lda     _Skull+8
	bpl     L0005
	ldx     #$FF
L0005:	jsr     tosmulax
	cmp     #$80
	sta     _Skull+6
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ add_y_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_y_speed: near

.segment	"CODE"

;
; void add_y_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = Skull.ySpeedFloat;
;
	lda     _Skull+11
	sta     _temp
;
; Skull.ySpeedFloat += val;
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     _Skull+11
	sta     _Skull+11
;
; if (Skull.ySpeedFloat > MAX_SPEED || Skull.ySpeedFloat < temp) {
;
	cmp     #$FB
	bcs     L0007
	lda     _Skull+11
	cmp     _temp
	bcs     L0009
;
; Skull.ySpeedFloat = MAX_SPEED;
;
L0007:	lda     #$FA
	sta     _Skull+11
;
; Skull.ySpeed = (Skull.ySpeedFloat >> 7) * Skull.yDir;
;
L0009:	lda     _Skull+11
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha0
	lda     _Skull+9
	bpl     L0005
	ldx     #$FF
L0005:	jsr     tosmulax
	cmp     #$80
	sta     _Skull+7
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ subtract_y_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_subtract_y_speed: near

.segment	"CODE"

;
; void subtract_y_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = Skull.ySpeedFloat;
;
	lda     _Skull+11
	sta     _temp
;
; Skull.ySpeedFloat -= val;
;
	ldy     #$00
	lda     (sp),y
	eor     #$FF
	sec
	adc     _Skull+11
	sta     _Skull+11
;
; if (Skull.ySpeedFloat < MIN_SPEED || Skull.ySpeedFloat > temp) {
;
	cmp     #$40
	bcc     L0009
	lda     _Skull+11
	cmp     _temp
	beq     L000A
	bcc     L000A
;
; Skull.ySpeedFloat = MIN_SPEED;
;
L0009:	lda     #$40
	sta     _Skull+11
;
; Skull.ySpeed = (Skull.ySpeedFloat >> 7) * Skull.yDir;
;
L000A:	lda     _Skull+11
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha0
	lda     _Skull+9
	bpl     L0005
	ldx     #$FF
L0005:	jsr     tosmulax
	cmp     #$80
	sta     _Skull+7
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; char __near__ set_collision_data (char param_x, char param_y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_collision_data: near

.segment	"CODE"

;
; char set_collision_data(char param_x, char param_y) {
;
	jsr     pusha
;
; collision_index = (param_x >> 4) + (((param_y >> 3) - 5) * 16);
;
	ldy     #$01
	lda     (sp),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha0
	ldy     #$02
	lda     (sp),y
	lsr     a
	lsr     a
	lsr     a
	sec
	sbc     #$05
	bcs     L0002
	ldx     #$FF
L0002:	jsr     aslax4
	jsr     tosaddax
	sta     _collision_index
	stx     _collision_index+1
;
; nametable_index = NTADR_A((param_x >> 3), (param_y >> 3));
;
	ldx     #$00
	lda     (sp,x)
	lsr     a
	lsr     a
	lsr     a
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	lsr     a
	lsr     a
	lsr     a
	jsr     tosora0
	sta     _nametable_index
	txa
	ora     #$20
	sta     _nametable_index+1
;
; collision_type = (param_x >> 3) % 2 ? c_map[collision_index] & 0x0F : c_map[collision_index] >> 4;
;
	ldy     #$01
	lda     (sp),y
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha0
	lda     #$02
	jsr     tosmoda0
	stx     tmp1
	ora     tmp1
	beq     L0003
	lda     _collision_index
	sta     ptr1
	lda     _collision_index+1
	clc
	adc     #>(_c_map)
	sta     ptr1+1
	ldy     #<(_c_map)
	lda     (ptr1),y
	and     #$0F
	jmp     L0005
L0003:	lda     _collision_index
	sta     ptr1
	lda     _collision_index+1
	clc
	adc     #>(_c_map)
	sta     ptr1+1
	ldy     #<(_c_map)
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
L0005:	sta     _collision_type
;
; return collision_type;
;
	ldx     #$00
	lda     _collision_type
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ backup_collision_info (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_backup_collision_info: near

.segment	"CODE"

;
; backup_col_index = collision_index;
;
	lda     _collision_index+1
	sta     _backup_col_index+1
	lda     _collision_index
	sta     _backup_col_index
;
; backup_nt_index = nametable_index;
;
	lda     _nametable_index+1
	sta     _backup_nt_index+1
	lda     _nametable_index
	sta     _backup_nt_index
;
; backup_col_type = collision_type;
;
	lda     _collision_type
	sta     _backup_col_type
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ do_tile_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_tile_collision: near

.segment	"CODE"

;
; switch (backup_col_type) {
;
	lda     _backup_col_type
;
; }
;
	cmp     #$01
	bne     L001A
;
; }
;
	rts
;
; }
;
L001A:	cmp     #$02
	beq     L0005
	cmp     #$03
	beq     L0016
	cmp     #$04
	beq     L0017
	cmp     #$05
	beq     L0018
	cmp     #$06
	beq     L0019
	cmp     #$07
	beq     L0003
	cmp     #$08
	beq     L0003
	cmp     #$09
	beq     L0003
	cmp     #$0A
	beq     L0003
	cmp     #$0B
	beq     L0003
	cmp     #$0C
	beq     L0003
	cmp     #$0D
	beq     L0003
	cmp     #$0E
	beq     L0003
	cmp     #$0F
	beq     L0003
	rts
;
; if (p1_health) {
;
L0005:	lda     _p1_health
	beq     L0006
;
; --p1_health;
;
	dec     _p1_health
;
; update_health();
;
L0006:	jmp     _update_health
;
; remove_brick(TILE_BACK);
;
L0016:	lda     #$10
	jsr     _remove_brick
;
; ++backup_nt_index;
;
	inc     _backup_nt_index
	bne     L0008
	inc     _backup_nt_index+1
;
; hit_brick(TILE_BACK);
;
L0008:	lda     #$10
	jmp     _hit_brick
;
; remove_brick(TILE_BACK);
;
L0017:	lda     #$10
	jsr     _remove_brick
;
; --backup_nt_index;
;
	lda     _backup_nt_index
	sec
	sbc     #$01
	sta     _backup_nt_index
	bcs     L000A
	dec     _backup_nt_index+1
;
; hit_brick(TILE_BACK);
;
L000A:	lda     #$10
	jmp     _hit_brick
;
; hit_brick(0x11);
;
L0018:	lda     #$11
	jmp     _hit_brick
;
; hit_brick(TILE_BACK_GRASS);
;
L0019:	lda     #$23
	jsr     _hit_brick
;
; is_soft_hit = TRUE;
;
	lda     #$01
	sta     _is_soft_hit
;
; break;
;
	rts
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ is_paddle_skull_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_paddle_skull_collision: near

.segment	"CODE"

;
; return (temp_x < Paddle.x + Paddle.width &&
;
	lda     _temp_x
	jsr     pusha0
	lda     _Paddle
	clc
	adc     _Paddle+2
	bcc     L0005
	ldx     #$01
L0005:	jsr     tosicmp
	bpl     L0002
;
; temp_x + Skull.width > Paddle.x &&
;
	ldx     #$00
	lda     _temp_x
	clc
	adc     _Skull+2
	bcc     L0006
	inx
L0006:	jsr     pushax
	lda     _Paddle
	jsr     tosicmp0
	bmi     L0002
	beq     L0002
;
; temp_y < Paddle.y + Paddle.height + Paddle.bbox_y &&
;
	lda     _temp_y
	jsr     pusha0
	lda     _Paddle+1
	clc
	adc     _Paddle+3
	bcc     L000B
	ldx     #$01
	clc
L000B:	adc     _Paddle+5
	bcc     L0008
	inx
L0008:	jsr     tosicmp
	bpl     L0002
;
; temp_y + Skull.height > Paddle.y + Paddle.bbox_y);
;
	ldx     #$00
	lda     _temp_y
	clc
	adc     _Skull+3
	bcc     L0009
	inx
L0009:	jsr     pushax
	ldx     #$00
	lda     _Paddle+1
	clc
	adc     _Paddle+5
	bcc     L000A
	inx
L000A:	jsr     tosicmp
	beq     L0002
	bpl     L0003
L0002:	ldx     #$00
	txa
	rts
L0003:	lda     #$01
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_paddle_input (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_paddle_input: near

.segment	"CODE"

;
; if (!is_paddle_skull_collision()) {
;
	jsr     _is_paddle_skull_collision
	tax
	beq     L003E
;
; }
;
	rts
;
; Paddle.xSpeedFloat += 128;
;
L003E:	lda     #$80
	clc
	adc     _Paddle+10
	sta     _Paddle+10
;
; temp = Paddle.xSpeedFloat ? 1 : 2;
;
	lda     _Paddle+10
	beq     L002B
	lda     #$01
	jmp     L002C
L002B:	lda     #$02
L002C:	sta     _temp
;
; if ((pad1 & PAD_LEFT) && (Paddle.xSpeed > -PADDLE_MAX_SPEED)) {
;
	lda     _pad1
	and     #$02
	beq     L0031
	lda     _Paddle+6
	sec
	sbc     #$FA
	bvs     L0008
	eor     #$80
L0008:	bpl     L0031
;
; temp_x = Paddle.xSpeed -= temp;
;
	lda     _temp
	cmp     #$80
	eor     #$FF
	sec
	adc     _Paddle+6
	sta     _Paddle+6
	sta     _temp_x
;
; if ((pad1 & PAD_RIGHT) && (Paddle.xSpeed < PADDLE_MAX_SPEED)) {
;
L0031:	lda     _pad1
	and     #$01
	beq     L0037
	lda     _Paddle+6
	sec
	sbc     #$07
	bvc     L0010
	eor     #$80
L0010:	bpl     L0037
;
; Paddle.xSpeed += temp;
;
	lda     _temp
	cmp     #$80
	clc
	adc     _Paddle+6
	sta     _Paddle+6
;
; temp_x = Paddle.x + Paddle.xSpeed;  // Bounding box?
;
L0037:	lda     _Paddle+6
	clc
	adc     _Paddle
	sta     _temp_x
;
; temp_y = Paddle.y;                  // Bounding box?
;
	lda     _Paddle+1
	sta     _temp_y
;
; if (Paddle.xSpeed > 0) {
;
	lda     _Paddle+6
	sec
	sbc     #$01
	bvs     L0018
	eor     #$80
L0018:	bpl     L0039
;
; while (set_collision_data(temp_x + Paddle.width, temp_y)) {
;
	jmp     L0038
;
; --temp_x;
;
L0019:	dec     _temp_x
;
; while (set_collision_data(temp_x + Paddle.width, temp_y)) {
;
L0038:	lda     _temp_x
	clc
	adc     _Paddle+2
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	bne     L0019
;
; } else if (Paddle.xSpeed < 0) {
;
	jmp     L003B
L0039:	lda     _Paddle+6
	asl     a
	bcc     L003B
;
; while (set_collision_data(temp_x, temp_y)) {
;
	jmp     L003A
;
; ++temp_x;
;
L001F:	inc     _temp_x
;
; while (set_collision_data(temp_x, temp_y)) {
;
L003A:	lda     _temp_x
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	bne     L001F
;
; Paddle.x = temp_x;
;
L003B:	lda     _temp_x
	sta     _Paddle
;
; if (Paddle.xSpeed) {
;
	lda     _Paddle+6
	beq     L0028
;
; Paddle.xSpeed += Paddle.xSpeed > 0 ? -1 : 1;
;
	sec
	sbc     #$01
	bvs     L0024
	eor     #$80
L0024:	bpl     L003C
	lda     #$FF
	jmp     L0026
L003C:	lda     #$01
L0026:	cmp     #$80
	clc
	adc     _Paddle+6
	sta     _Paddle+6
;
; }
;
L0028:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_paddle_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_paddle_collision: near

.segment	"CODE"

;
; if (is_paddle_skull_collision()) {
;
	jsr     _is_paddle_skull_collision
	tax
	bne     L004A
;
; }
;
	rts
;
; if (Skull.y + Skull.bbox_y < Paddle.y + Paddle.height + Paddle.bbox_y && Skull.y + Skull.bbox_y + Skull.height > Paddle.y + Paddle.bbox_y) {
;
L004A:	ldx     #$00
	lda     _Skull+1
	clc
	adc     _Skull+5
	bcc     L002E
	inx
L002E:	jsr     pushax
	ldx     #$00
	lda     _Paddle+1
	clc
	adc     _Paddle+3
	bcc     L0041
	inx
	clc
L0041:	adc     _Paddle+5
	bcc     L0030
	inx
L0030:	jsr     tosicmp
	bpl     L0004
	ldx     #$00
	lda     _Skull+1
	clc
	adc     _Skull+5
	bcc     L0042
	inx
	clc
L0042:	adc     _Skull+3
	bcc     L0032
	inx
L0032:	jsr     pushax
	ldx     #$00
	lda     _Paddle+1
	clc
	adc     _Paddle+5
	bcc     L0033
	inx
L0033:	jsr     tosicmp
	beq     L0004
	bpl     L0005
L0004:	jmp     L0044
;
; add_x_speed(100);
;
L0005:	lda     #$64
	jsr     _add_x_speed
;
; subtract_y_speed(100);
;
	lda     #$64
	jsr     _subtract_y_speed
;
; if (temp_x < Paddle.x + (Paddle.width >> 1)) {
;
	lda     _temp_x
	jsr     pusha0
	lda     _Paddle+2
	lsr     a
	clc
	adc     _Paddle
	bcc     L0039
	inx
L0039:	jsr     tosicmp
	bpl     L0007
;
; xCollisionDir = RIGHT;
;
	lda     #$01
	sta     _xCollisionDir
;
; temp_x = Paddle.x - Skull.width;
;
	lda     _Paddle
	sec
	sbc     _Skull+2
	sta     _temp_x
;
; while (set_collision_data(temp_x, temp_y)) {
;
	jmp     L0043
;
; ++temp_x;
;
L0008:	inc     _temp_x
;
; ++Paddle.x;
;
	inc     _Paddle
;
; while (set_collision_data(temp_x, temp_y)) {
;
L0043:	lda     _temp_x
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	bne     L0008
;
; } else {
;
	rts
;
; xCollisionDir = LEFT;
;
L0007:	lda     #$FF
	sta     _xCollisionDir
;
; while (set_collision_data(temp_x + Skull.width, temp_y)) {
;
	jmp     L000E
;
; temp_x = Paddle.x + Paddle.width;
;
L000C:	lda     _Paddle
	clc
	adc     _Paddle+2
	sta     _temp_x
;
; --temp_x;
;
	dec     _temp_x
;
; --Paddle.x;
;
	dec     _Paddle
;
; while (set_collision_data(temp_x + Skull.width, temp_y)) {
;
L000E:	lda     _temp_x
	clc
	adc     _Skull+2
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	bne     L000C
;
; } else {
;
	rts
;
; if (temp_x < Paddle.x + (Paddle.width >> 1)) {
;
L0044:	lda     _temp_x
	jsr     pusha0
	lda     _Paddle+2
	lsr     a
	clc
	adc     _Paddle
	bcc     L003A
	inx
L003A:	jsr     tosicmp
	bpl     L0010
;
; if (Skull.xDir == RIGHT) {
;
	lda     _Skull+8
	cmp     #$01
	bne     L0011
;
; xCollisionDir = RIGHT;
;
	sta     _xCollisionDir
;
; if (temp_x < Paddle.x + 2) {
;
L0011:	lda     _temp_x
	jsr     pusha0
	lda     _Paddle
	clc
	adc     #$02
	bcc     L0014
	ldx     #$01
L0014:	jsr     tosicmp
	bpl     L0013
;
; add_x_speed(96);
;
	lda     #$60
	jsr     _add_x_speed
;
; subtract_y_speed(96);
;
	lda     #$60
	jsr     _subtract_y_speed
;
; } else if (!(temp_x < Paddle.x + 8)) {
;
	jmp     L001E
L0013:	lda     _temp_x
	jsr     pusha0
	lda     _Paddle
	clc
	adc     #$08
	bcc     L0017
	ldx     #$01
L0017:	jsr     tosltax
;
; } else {
;
	jmp     L0049
;
; if (Skull.xDir == LEFT) {
;
L0010:	lda     _Skull+8
	cmp     #$FF
	bne     L0019
;
; xCollisionDir = LEFT;
;
	sta     _xCollisionDir
;
; if (temp_x > Paddle.x + Paddle.width - 2) {
;
L0019:	lda     _temp_x
	jsr     pusha0
	lda     _Paddle
	clc
	adc     _Paddle+2
	bcc     L0036
	ldx     #$01
L0036:	sec
	sbc     #$02
	bcs     L001C
	dex
L001C:	jsr     tosicmp
	bmi     L001B
	beq     L001B
;
; add_x_speed(96);
;
	lda     #$60
	jsr     _add_x_speed
;
; subtract_y_speed(96);
;
	lda     #$60
	jsr     _subtract_y_speed
;
; } else if (!(temp_x > Paddle.x + Paddle.width - 8)) {
;
	jmp     L001E
L001B:	lda     _temp_x
	jsr     pusha0
	lda     _Paddle
	clc
	adc     _Paddle+2
	bcc     L0037
	ldx     #$01
L0037:	sec
	sbc     #$08
	bcs     L001F
	dex
L001F:	jsr     tosgtax
L0049:	tax
	bne     L001E
;
; subtract_x_speed(64);
;
	lda     #$40
	jsr     _subtract_x_speed
;
; add_y_speed(64);
;
	lda     #$40
	jsr     _add_y_speed
;
; if (temp_y < Paddle.y + Paddle.bbox_y + (Paddle.height >> 1)) {
;
L001E:	lda     _temp_y
	jsr     pusha0
	lda     _Paddle+1
	clc
	adc     _Paddle+5
	bcc     L0038
	ldx     #$01
L0038:	sta     ptr1
	stx     ptr1+1
	lda     _Paddle+3
	lsr     a
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L003B
	inx
L003B:	jsr     tosicmp
	bpl     L0020
;
; yCollisionDir = DOWN;
;
	lda     #$01
	sta     _yCollisionDir
;
; while (is_paddle_skull_collision()) {
;
	jmp     L0026
;
; --temp_y;
;
L0021:	dec     _temp_y
;
; if (set_collision_data(temp_x, temp_y)) {
;
	lda     _temp_x
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	beq     L0026
;
; ++temp_y;
;
	inc     _temp_y
;
; temp_x < Paddle.x + (Paddle.width >> 1) ? --temp_x : ++temp_x;
;
	lda     _temp_x
	jsr     pusha0
	lda     _Paddle+2
	lsr     a
	clc
	adc     _Paddle
	bcc     L003C
	inx
L003C:	jsr     tosicmp
	bpl     L0025
	dec     _temp_x
	jmp     L0026
L0025:	inc     _temp_x
;
; while (is_paddle_skull_collision()) {
;
L0026:	jsr     _is_paddle_skull_collision
	tax
	bne     L0021
;
; } else {
;
	rts
;
; yCollisionDir = UP;
;
L0020:	lda     #$FF
	sta     _yCollisionDir
;
; while (is_paddle_skull_collision()) {
;
	jmp     L002D
;
; ++temp_y;
;
L0028:	inc     _temp_y
;
; if (set_collision_data(temp_x, temp_y)) {
;
	lda     _temp_x
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	beq     L002D
;
; --temp_y;
;
	dec     _temp_y
;
; temp_x < Paddle.x + (Paddle.width >> 1) ? --temp_x : ++temp_x;
;
	lda     _temp_x
	jsr     pusha0
	lda     _Paddle+2
	lsr     a
	clc
	adc     _Paddle
	bcc     L003D
	inx
L003D:	jsr     tosicmp
	bpl     L002C
	dec     _temp_x
	jmp     L002D
L002C:	inc     _temp_x
;
; while (is_paddle_skull_collision()) {
;
L002D:	jsr     _is_paddle_skull_collision
	tax
	bne     L0028
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_main_input (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_main_input: near

.segment	"CODE"

;
; check_paddle_input();
;
	jsr     _check_paddle_input
;
; if (pad1 & PAD_A) {
;
	lda     _pad1
	and     #$80
	beq     L000B
;
; if (skull_launched) {
;
	lda     _skull_launched
	beq     L000A
;
; add_x_speed(SPEED_STEP);
;
	lda     #$01
	jsr     _add_x_speed
;
; } else {
;
	jmp     L000B
;
; skull_launched = TRUE;
;
L000A:	lda     #$01
	sta     _skull_launched
;
; stuck_times = 0;
;
	lda     #$00
	sta     _stuck_times
;
; if (pad1 & PAD_B) {
;
L000B:	lda     _pad1
	and     #$40
	beq     L000C
;
; subtract_x_speed(SPEED_STEP);
;
	lda     #$01
	jsr     _subtract_x_speed
;
; if (pad1 & PAD_START) {
;
L000C:	lda     _pad1
	ldx     #$00
	and     #$10
	stx     tmp1
	ora     tmp1
;
; if (pad1 & PAD_SELECT) {
;
	lda     _pad1
	and     #$20
	ora     tmp1
;
; if (pad1 & PAD_UP) {
;
	lda     _pad1
	and     #$08
	beq     L000D
;
; add_y_speed(SPEED_STEP);
;
	lda     #$01
	jsr     _add_y_speed
;
; if (pad1 & PAD_DOWN) {
;
L000D:	lda     _pad1
	and     #$04
	beq     L0009
;
; subtract_y_speed(SPEED_STEP);
;
	lda     #$01
	jmp     _subtract_y_speed
;
; }
;
L0009:	rts

.endproc

; ---------------------------------------------------------------
; signed char __near__ get_x_speed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_x_speed: near

.segment	"CODE"

;
; Skull.xRemain += Skull.xSpeedFloat & 0b01111111;  // MODULO 128
;
	lda     _Skull+10
	and     #$7F
	clc
	adc     _Skull+12
	sta     _Skull+12
;
; if (Skull.xRemain > 127) {
;
	cmp     #$80
	lda     #$00
	tax
	rol     a
	beq     L0002
;
; Skull.xRemain &= 0b01111111;
;
	lda     _Skull+12
	and     #$7F
	sta     _Skull+12
;
; return Skull.xDir;
;
	lda     _Skull+8
	bpl     L0002
	dex
;
; }
;
L0002:	rts

.endproc

; ---------------------------------------------------------------
; signed char __near__ get_y_speed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_y_speed: near

.segment	"CODE"

;
; Skull.yRemain += Skull.ySpeedFloat & 0b01111111;  // MODULO 128
;
	lda     _Skull+11
	and     #$7F
	clc
	adc     _Skull+13
	sta     _Skull+13
;
; if (Skull.yRemain > 127) {
;
	cmp     #$80
	lda     #$00
	tax
	rol     a
	beq     L0002
;
; Skull.yRemain &= 0b01111111;
;
	lda     _Skull+13
	and     #$7F
	sta     _Skull+13
;
; return Skull.yDir;
;
	lda     _Skull+9
	bpl     L0002
	dex
;
; }
;
L0002:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_skull (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_skull: near

.segment	"CODE"

;
; xCollisionDir = NONE;
;
	lda     #$00
	sta     _xCollisionDir
;
; yCollisionDir = NONE;
;
	sta     _yCollisionDir
;
; backup_col_type = NONE;
;
	sta     _backup_col_type
;
; is_soft_hit = FALSE;
;
	tax
	sta     _is_soft_hit
;
; if (skull_launched) {
;
	lda     _skull_launched
	jeq     L0098
;
; temp_x = Skull.x + Skull.xSpeed + get_x_speed();
;
	lda     _Skull+6
	bpl     L0003
	dex
L0003:	clc
	adc     _Skull
	bcc     L006B
	inx
L006B:	jsr     pushax
	jsr     _get_x_speed
	jsr     tosaddax
	sta     _temp_x
;
; temp_y = Skull.y + Skull.ySpeed + get_y_speed();
;
	ldx     #$00
	lda     _Skull+7
	bpl     L0004
	dex
L0004:	clc
	adc     _Skull+1
	bcc     L006C
	inx
L006C:	jsr     pushax
	jsr     _get_y_speed
	jsr     tosaddax
	sta     _temp_y
;
; ++temp_x;
;
	inc     _temp_x
;
; ++temp_y;
;
	inc     _temp_y
;
; if (Skull.xDir == RIGHT) {
;
	lda     _Skull+8
	cmp     #$01
	jne     L0005
;
; if (Skull.yDir == DOWN) {
;
	lda     _Skull+9
	cmp     #$01
	jne     L0007
;
; if (set_collision_data(temp_x, temp_y + Skull.height)) {
;
	lda     _temp_x
	jsr     pusha
	lda     _temp_y
	clc
	adc     _Skull+3
	jsr     _set_collision_data
	tax
	beq     L0073
;
; yCollisionDir = DOWN;
;
	lda     #$01
	sta     _yCollisionDir
;
; backup_collision_info();
;
	jsr     _backup_collision_info
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L000C
;
; while (set_collision_data(temp_x, temp_y + Skull.height)) {
;
	jmp     L0072
;
; --temp_y;
;
L000B:	dec     _temp_y
;
; while (set_collision_data(temp_x, temp_y + Skull.height)) {
;
L0072:	lda     _temp_x
	jsr     pusha
	lda     _temp_y
	clc
	adc     _Skull+3
	jsr     _set_collision_data
	tax
	bne     L000B
;
; do_tile_collision();
;
L000C:	jsr     _do_tile_collision
;
; if (set_collision_data(temp_x + Skull.width, temp_y) || (backup_col_type == 0 && set_collision_data(temp_x + Skull.width, temp_y + Skull.height))) {
;
L0073:	lda     _temp_x
	clc
	adc     _Skull+2
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	bne     L000F
	lda     _backup_col_type
	jne     L0040
	lda     _temp_x
	clc
	adc     _Skull+2
	jsr     pusha
	lda     _temp_y
	clc
	adc     _Skull+3
	jsr     _set_collision_data
	tax
	jeq     L0040
;
; xCollisionDir = RIGHT;
;
L000F:	lda     #$01
	sta     _xCollisionDir
;
; backup_collision_info();
;
	jsr     _backup_collision_info
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0048
;
; while (set_collision_data(temp_x + Skull.width, temp_y)) {
;
	jmp     L007B
;
; --temp_x;
;
L0015:	dec     _temp_x
;
; while (set_collision_data(temp_x + Skull.width, temp_y)) {
;
L007B:	lda     _temp_x
	clc
	adc     _Skull+2
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	bne     L0015
;
; } else {
;
	jmp     L0048
;
; if (set_collision_data(temp_x, temp_y)) {
;
L0007:	lda     _temp_x
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	beq     L007D
;
; yCollisionDir = UP;
;
	lda     #$FF
	sta     _yCollisionDir
;
; backup_collision_info();
;
	jsr     _backup_collision_info
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L001C
;
; while (set_collision_data(temp_x, temp_y)) {
;
	jmp     L007C
;
; ++temp_y;
;
L001B:	inc     _temp_y
;
; while (set_collision_data(temp_x, temp_y)) {
;
L007C:	lda     _temp_x
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	bne     L001B
;
; do_tile_collision();
;
L001C:	jsr     _do_tile_collision
;
; if (set_collision_data(temp_x + Skull.width, temp_y + Skull.height) || (backup_col_type == 0 && set_collision_data(temp_x + Skull.width, temp_y))) {
;
L007D:	lda     _temp_x
	clc
	adc     _Skull+2
	jsr     pusha
	lda     _temp_y
	clc
	adc     _Skull+3
	jsr     _set_collision_data
	tax
	bne     L001F
	lda     _backup_col_type
	jne     L0040
	lda     _temp_x
	clc
	adc     _Skull+2
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	jeq     L0040
;
; xCollisionDir = RIGHT;
;
L001F:	lda     #$01
	sta     _xCollisionDir
;
; backup_collision_info();
;
	jsr     _backup_collision_info
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0048
;
; while (set_collision_data(temp_x + Skull.width, temp_y + Skull.height)) {
;
	jmp     L0085
;
; --temp_x;
;
L0025:	dec     _temp_x
;
; while (set_collision_data(temp_x + Skull.width, temp_y + Skull.height)) {
;
L0085:	lda     _temp_x
	clc
	adc     _Skull+2
	jsr     pusha
	lda     _temp_y
	clc
	adc     _Skull+3
	jsr     _set_collision_data
	tax
	bne     L0025
;
; } else {
;
	jmp     L0048
;
; if (Skull.yDir == DOWN) {
;
L0005:	lda     _Skull+9
	cmp     #$01
	jne     L0029
;
; if (set_collision_data(temp_x + Skull.width, temp_y + Skull.height)) {
;
	lda     _temp_x
	clc
	adc     _Skull+2
	jsr     pusha
	lda     _temp_y
	clc
	adc     _Skull+3
	jsr     _set_collision_data
	tax
	beq     L0087
;
; yCollisionDir = DOWN;
;
	lda     #$01
	sta     _yCollisionDir
;
; backup_collision_info();
;
	jsr     _backup_collision_info
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L002E
;
; while (set_collision_data(temp_x + Skull.width, temp_y + Skull.height)) {
;
	jmp     L0086
;
; --temp_y;
;
L002D:	dec     _temp_y
;
; while (set_collision_data(temp_x + Skull.width, temp_y + Skull.height)) {
;
L0086:	lda     _temp_x
	clc
	adc     _Skull+2
	jsr     pusha
	lda     _temp_y
	clc
	adc     _Skull+3
	jsr     _set_collision_data
	tax
	bne     L002D
;
; do_tile_collision();
;
L002E:	jsr     _do_tile_collision
;
; if (set_collision_data(temp_x, temp_y) || (backup_col_type == 0 && set_collision_data(temp_x, temp_y + Skull.height))) {
;
L0087:	lda     _temp_x
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	bne     L008C
	lda     _backup_col_type
	jne     L0040
	lda     _temp_x
	jsr     pusha
	lda     _temp_y
	clc
	adc     _Skull+3
	jsr     _set_collision_data
	tax
	jeq     L0040
;
; xCollisionDir = LEFT;
;
L008C:	lda     #$FF
	sta     _xCollisionDir
;
; backup_collision_info();
;
	jsr     _backup_collision_info
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0048
;
; while (set_collision_data(temp_x, temp_y)) {
;
	jmp     L008D
;
; ++temp_x;
;
L0037:	inc     _temp_x
;
; while (set_collision_data(temp_x, temp_y)) {
;
L008D:	lda     _temp_x
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	bne     L0037
;
; } else {
;
	jmp     L0048
;
; if (set_collision_data(temp_x + Skull.width, temp_y)) {
;
L0029:	lda     _temp_x
	clc
	adc     _Skull+2
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	beq     L008F
;
; yCollisionDir = UP;
;
	lda     #$FF
	sta     _yCollisionDir
;
; backup_collision_info();
;
	jsr     _backup_collision_info
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L003E
;
; while (set_collision_data(temp_x + Skull.width, temp_y)) {
;
	jmp     L008E
;
; ++temp_y;
;
L003D:	inc     _temp_y
;
; while (set_collision_data(temp_x + Skull.width, temp_y)) {
;
L008E:	lda     _temp_x
	clc
	adc     _Skull+2
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	bne     L003D
;
; do_tile_collision();
;
L003E:	jsr     _do_tile_collision
;
; if (set_collision_data(temp_x, temp_y + Skull.height) || (backup_col_type == 0 && set_collision_data(temp_x, temp_y))) {
;
L008F:	lda     _temp_x
	jsr     pusha
	lda     _temp_y
	clc
	adc     _Skull+3
	jsr     _set_collision_data
	tax
	bne     L0094
	lda     _backup_col_type
	bne     L0040
	lda     _temp_x
	jsr     pusha
	lda     _temp_y
	jsr     _set_collision_data
	tax
	beq     L0040
;
; xCollisionDir = LEFT;
;
L0094:	lda     #$FF
	sta     _xCollisionDir
;
; backup_collision_info();
;
	jsr     _backup_collision_info
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0048
;
; while (set_collision_data(temp_x, temp_y + Skull.height)) {
;
	jmp     L0095
;
; ++temp_x;
;
L0047:	inc     _temp_x
;
; while (set_collision_data(temp_x, temp_y + Skull.height)) {
;
L0095:	lda     _temp_x
	jsr     pusha
	lda     _temp_y
	clc
	adc     _Skull+3
	jsr     _set_collision_data
	tax
	bne     L0047
;
; do_tile_collision();
;
L0048:	jsr     _do_tile_collision
;
; check_paddle_collision();
;
L0040:	jsr     _check_paddle_collision
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0096
;
; if (xCollisionDir) {
;
	lda     _xCollisionDir
	beq     L004B
;
; Skull.xSpeed = -Skull.xSpeed;
;
	lda     _Skull+6
	eor     #$FF
	clc
	adc     #$01
	cmp     #$80
	sta     _Skull+6
;
; Skull.xDir = -Skull.xDir;
;
	lda     _Skull+8
	eor     #$FF
	clc
	adc     #$01
	cmp     #$80
	sta     _Skull+8
;
; if (yCollisionDir) {
;
L004B:	lda     _yCollisionDir
	beq     L0096
;
; Skull.ySpeed = -Skull.ySpeed;
;
	lda     _Skull+7
	eor     #$FF
	clc
	adc     #$01
	cmp     #$80
	sta     _Skull+7
;
; Skull.yDir = -Skull.yDir;
;
	lda     _Skull+9
	eor     #$FF
	clc
	adc     #$01
	cmp     #$80
	sta     _Skull+9
;
; --temp_x;
;
L0096:	dec     _temp_x
;
; --temp_y;
;
	dec     _temp_y
;
; } else {
;
	jmp     L0099
;
; temp_x = Paddle.x + (Paddle.width >> 1) - (Skull.width >> 1);
;
L0098:	lda     _Paddle+2
	lsr     a
	clc
	adc     _Paddle
	bcc     L006D
	inx
L006D:	jsr     pushax
	lda     _Skull+2
	lsr     a
	jsr     tossuba0
	sta     _temp_x
;
; temp_y = Paddle.y + Paddle.bbox_y - Skull.height - Skull.bbox_x;
;
	lda     _Paddle+1
	clc
	adc     _Paddle+5
	sec
	sbc     _Skull+3
	sec
	sbc     _Skull+4
	sta     _temp_y
;
; Skull.x = temp_x;
;
L0099:	lda     _temp_x
	sta     _Skull
;
; Skull.y = temp_y;
;
	lda     _temp_y
	sta     _Skull+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_meta_spr(Paddle.x, Paddle.y, PaddleSpr);
;
	jsr     decsp2
	lda     _Paddle
	ldy     #$01
	sta     (sp),y
	lda     _Paddle+1
	dey
	sta     (sp),y
	lda     #<(_PaddleSpr)
	ldx     #>(_PaddleSpr)
	jsr     _oam_meta_spr
;
; oam_meta_spr(Skull.x, Skull.y, SkullSpr);
;
	jsr     decsp2
	lda     _Skull
	ldy     #$01
	sta     (sp),y
	lda     _Skull+1
	dey
	sta     (sp),y
	lda     #<(_SkullSpr)
	ldx     #>(_SkullSpr)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; load_title_screen();
;
	jsr     _load_title_screen
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; while (game_state == TITLE) {
;
	jmp     L000C
;
; ppu_wait_nmi();
;
L0005:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START) {
;
	and     #$10
	beq     L000C
;
; game_state = MAIN;
;
	lda     #$01
	sta     _game_state
;
; current_level = 0;
;
	lda     #$00
	sta     _current_level
;
; p1_health = 3;
;
	lda     #$03
	sta     _p1_health
;
; p1_max_health = 3;
;
	sta     _p1_max_health
;
; show_screen();
;
	jsr     _show_screen
;
; while (game_state == TITLE) {
;
L000C:	lda     _game_state
	beq     L0005
;
; while (game_state == MAIN) {
;
	jmp     L000D
;
; ppu_wait_nmi();
;
L0009:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; check_main_input();
;
	jsr     _check_main_input
;
; update_skull();
;
	jsr     _update_skull
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; while (game_state == MAIN) {
;
L000D:	lda     _game_state
	cmp     #$01
	beq     L0009
;
; while (1) {
;
	jmp     L000C

.endproc

