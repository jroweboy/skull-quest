;
; File generated by cc65 v 2.19 - Git 4f87c7c
;
	.fopt		compiler,"cc65 v 2.19 - Git 4f87c7c"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_get_pad_new
	.import		_gray_line
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_fill
	.import		_vram_unrle
	.import		_memcpy
	.export		_forest_col_01
	.export		_forest_level_01
	.export		_title_screen
	.export		_HorizontalPaddleSpr
	.export		_VerticalPaddleSpr
	.export		_SkullSpr
	.export		_pal_forest_bg
	.export		_pal_spr_01
	.export		_level_list
	.export		_actor
	.export		_paddles
	.export		_Skull
	.export		_update_health
	.export		_update_xp
	.export		_add_xp
	.export		_show_HUD
	.export		_show_title_screen
	.export		_show_game_over
	.export		_load_paddles
	.export		_load_level
	.export		_load_title_screen
	.export		_remove_brick
	.export		_hit_brick
	.export		_get_x_speed
	.export		_get_y_speed
	.export		_add_x_speed
	.export		_subtract_x_speed
	.export		_add_y_speed
	.export		_subtract_y_speed
	.export		_get_collision_type
	.export		_set_collision_data
	.export		_do_skull_tile_collision
	.export		_is_skull_beside
	.export		_is_skull_collision_paddle
	.export		_is_paddle_collision_skull
	.export		_move_horizontal_paddle
	.export		_move_vertical_paddle
	.export		_check_paddle_collision
	.export		_check_main_input
	.export		_update_skull
	.export		_draw_sprites
	.export		_main

.segment	"DATA"

_level_list:
	.addr	_forest_level_01
	.addr	_forest_col_01
	.addr	_pal_forest_bg
_exp:
	.byte	$30,$30,$30,$30,$30,$30,$30,$30,$00
_Skull:
	.byte	$FF
	.byte	$FF
	.byte	$06
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$FF
	.byte	$64
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$FA

.segment	"RODATA"

_forest_col_01:
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$60
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$60
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$60
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$11
	.byte	$11
_forest_level_01:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$A0
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$08
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$18
	.byte	$18
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$10
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$10
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$10
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$10
	.byte	$01
	.byte	$09
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$10
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$01
	.byte	$11
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$09
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$10
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$19
	.byte	$09
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$19
	.byte	$09
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$18
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$19
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$18
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$19
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$19
	.byte	$09
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$19
	.byte	$09
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$10
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$07
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$06
	.byte	$07
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$16
	.byte	$17
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$10
	.byte	$16
	.byte	$17
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$11
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$0F
	.byte	$11
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$15
	.byte	$10
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$15
	.byte	$10
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$15
	.byte	$10
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$15
	.byte	$10
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$01
	.byte	$17
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$55
	.byte	$01
	.byte	$06
	.byte	$51
	.byte	$55
	.byte	$A5
	.byte	$A5
	.byte	$55
	.byte	$55
	.byte	$A5
	.byte	$A5
	.byte	$55
	.byte	$01
	.byte	$03
	.byte	$5A
	.byte	$5A
	.byte	$55
	.byte	$01
	.byte	$04
	.byte	$F5
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$65
	.byte	$5F
	.byte	$01
	.byte	$03
	.byte	$95
	.byte	$55
	.byte	$01
	.byte	$09
	.byte	$F5
	.byte	$01
	.byte	$05
	.byte	$55
	.byte	$05
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$01
	.byte	$00
_title_screen:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$29
	.byte	$53
	.byte	$6B
	.byte	$75
	.byte	$6C
	.byte	$6C
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$51
	.byte	$75
	.byte	$65
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$B3
	.byte	$50
	.byte	$72
	.byte	$65
	.byte	$73
	.byte	$73
	.byte	$00
	.byte	$53
	.byte	$74
	.byte	$61
	.byte	$72
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$32
	.byte	$54
	.byte	$68
	.byte	$65
	.byte	$00
	.byte	$6F
	.byte	$6C
	.byte	$64
	.byte	$00
	.byte	$67
	.byte	$61
	.byte	$6D
	.byte	$65
	.byte	$00
	.byte	$6D
	.byte	$61
	.byte	$6B
	.byte	$65
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$33
	.byte	$40
	.byte	$32
	.byte	$30
	.byte	$32
	.byte	$32
	.byte	$00
	.byte	$01
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$00
_HorizontalPaddleSpr:
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$80
_VerticalPaddleSpr:
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$06
	.byte	$00
	.byte	$80
_SkullSpr:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
_pal_forest_bg:
	.byte	$0F
	.byte	$15
	.byte	$20
	.byte	$09
	.byte	$0F
	.byte	$29
	.byte	$1A
	.byte	$09
	.byte	$0F
	.byte	$08
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$37
	.byte	$17
	.byte	$09
_pal_spr_01:
	.byte	$0F
	.byte	$20
	.byte	$15
	.byte	$12
	.byte	$0F
	.byte	$11
	.byte	$22
	.byte	$32
	.byte	$0F
	.byte	$13
	.byte	$23
	.byte	$33
	.byte	$0F
	.byte	$14
	.byte	$24
	.byte	$34

.segment	"BSS"

_debug1:
	.res	1,$00
_debug2:
	.res	1,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_c_map:
	.res	368,$00
_collision_index:
	.res	2,$00
_backup_col_index:
	.res	2,$00
_backup_nt_index:
	.res	2,$00
_pad_index:
	.res	1,$00
_temp_y_col:
	.res	1,$00
_temp_x_col:
	.res	1,$00
_i:
	.res	1,$00
_temp:
	.res	1,$00
_temp2:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_backup_col_type:
	.res	1,$00
_skull_launched:
	.res	1,$00
_p1_health:
	.res	1,$00
_p1_max_health:
	.res	1,$00
_game_state:
	.res	1,$00
_current_level:
	.res	1,$00
_is_soft_hit:
	.res	1,$00
_paddle_count:
	.res	1,$00
_actor:
	.res	2,$00
_paddles:
	.res	72,$00

; ---------------------------------------------------------------
; void __near__ update_health (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_health: near

.segment	"CODE"

;
; if (p1_health > 0) {
;
	lda     _p1_health
	beq     L000E
;
; for (i = 0; i < p1_max_health; ++i) {
;
	lda     #$00
	sta     _i
L000B:	lda     _i
	cmp     _p1_max_health
	bcs     L000A
;
; one_vram_buffer((i < p1_health) ? TILE_HEART_FULL : TILE_HEART_EMPTY, NTADR_A(i + 2, 2));
;
	cmp     _p1_health
	bcs     L000C
	lda     #$5B
	jmp     L000D
L000C:	lda     #$5C
L000D:	jsr     pusha
	ldx     #$00
	lda     _i
	clc
	adc     #$02
	bcc     L0009
	inx
L0009:	ora     #$40
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; for (i = 0; i < p1_max_health; ++i) {
;
	inc     _i
	jmp     L000B
;
; one_vram_buffer(TILE_HEART_EMPTY, NTADR_A(2, 2));
;
L000E:	lda     #$5C
	jsr     pusha
	ldx     #$20
	lda     #$42
	jmp     _one_vram_buffer
;
; }
;
L000A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_xp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_xp: near

.segment	"CODE"

;
; multi_vram_buffer_horz(exp, sizeof(exp), NTADR_A(12, 2));
;
	jsr     decsp3
	lda     #<(_exp)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_exp)
	sta     (sp),y
	lda     #$09
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$4C
	jmp     _multi_vram_buffer_horz

.endproc

; ---------------------------------------------------------------
; void __near__ add_xp (unsigned char value, unsigned char pos)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_xp: near

.segment	"CODE"

;
; void add_xp(unsigned char value, unsigned char pos) {
;
	jsr     pusha
;
; unsigned char result = exp[pos] + value - 0x30;
;
	ldy     #$00
	lda     (sp),y
	tay
	lda     _exp,y
	sta     ptr1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	sec
	sbc     #$30
	jsr     pusha
;
; if (result > 9) {
;
	ldy     #$00
	lda     (sp),y
	cmp     #$0A
	bcc     L0004
;
; if (pos == TEN_MILLIONS) {
;
	iny
	lda     (sp),y
	bne     L000C
;
; result = 9;
;
	lda     #$09
	dey
;
; } else {
;
	jmp     L000B
;
; add_xp(1, pos - 1);
;
L000C:	tya
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$01
	jsr     _add_xp
;
; result -= 10;
;
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$0A
L000B:	sta     (sp),y
;
; exp[pos] = 0x30 + result;
;
L0004:	lda     #<(_exp)
	ldx     #>(_exp)
	iny
	clc
	adc     (sp),y
	bcc     L0008
	inx
L0008:	sta     ptr1
	stx     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     #$30
	sta     (ptr1),y
;
; update_xp();
;
	jsr     _update_xp
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ show_HUD (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_HUD: near

.segment	"CODE"

;
; vram_adr(0x23C0);
;
	ldx     #$23
	lda     #$C0
	jsr     _vram_adr
;
; vram_fill(0x00, 8);
;
	lda     #$00
	jsr     pusha
	tax
	lda     #$08
	jsr     _vram_fill
;
; update_health();
;
	jsr     _update_health
;
; update_xp();
;
	jsr     _update_xp
;
; one_vram_buffer(0x5d, NTADR_A(22, 2));
;
	lda     #$5D
	jsr     pusha
	ldx     #$20
	lda     #$56
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x5e, NTADR_A(23, 2));
;
	lda     #$5E
	jsr     pusha
	ldx     #$20
	lda     #$57
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x5f, NTADR_A(24, 2));
;
	lda     #$5F
	jsr     pusha
	ldx     #$20
	lda     #$58
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x7e, NTADR_A(23, 3));
;
	lda     #$7E
	jsr     pusha
	ldx     #$20
	lda     #$77
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x7f, NTADR_A(24, 3));
;
	lda     #$7F
	jsr     pusha
	ldx     #$20
	lda     #$78
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ show_title_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_title_screen: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ show_game_over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_game_over: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_paddles (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_paddles: near

.segment	"CODE"

;
; switch (current_level) {
;
	lda     _current_level
;
; }
;
	jeq     L002D
	cmp     #$01
	jeq     L002E
	cmp     #$02
	jeq     L002E
	cmp     #$03
	jeq     L002E
	cmp     #$04
	jeq     L002E
	cmp     #$05
	jeq     L002E
	cmp     #$06
	jeq     L002E
	cmp     #$07
	jeq     L002E
	cmp     #$08
	jeq     L002E
	cmp     #$09
	jeq     L002E
	cmp     #$0A
	jeq     L002E
	cmp     #$0B
	beq     L002E
	cmp     #$0C
	beq     L002E
	cmp     #$0D
	beq     L002E
	cmp     #$0E
	beq     L002E
	cmp     #$0F
	beq     L002E
	cmp     #$10
	beq     L002E
	cmp     #$11
	beq     L002E
	cmp     #$12
	beq     L002E
	cmp     #$13
	beq     L002E
	cmp     #$14
	beq     L002E
	cmp     #$15
	beq     L002E
	cmp     #$16
	beq     L002E
	cmp     #$17
	beq     L002E
	cmp     #$18
	beq     L002E
	cmp     #$19
	beq     L002E
	cmp     #$1A
	beq     L002E
	cmp     #$1B
	beq     L002E
	cmp     #$1C
	beq     L002E
	cmp     #$1D
	beq     L002E
	cmp     #$1E
	beq     L002E
	cmp     #$1F
	beq     L002E
	cmp     #$20
	beq     L002E
	cmp     #$21
	beq     L002E
	jmp     L002E
;
; paddle_count = 2;
;
L002D:	lda     #$02
	sta     _paddle_count
;
; paddles[0].x = 0x75;
;
	lda     #$75
	sta     _paddles
;
; paddles[0].y = 0xCF;
;
	lda     #$CF
	sta     _paddles+1
;
; paddles[1].x = 0x75;
;
	lda     #$75
	sta     _paddles+18
;
; paddles[1].y = 0x50;
;
	lda     #$50
	sta     _paddles+19
;
; for (i = 0; i < paddle_count; ++i) {
;
L002E:	lda     #$00
	sta     _i
L002F:	lda     _i
	cmp     _paddle_count
	bcc     L0032
;
; }
;
	rts
;
; if (i < 2) {
;
L0032:	lda     _i
	cmp     #$02
	bcs     L0030
;
; paddles[i].width = 0x20;
;
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$20
	ldy     #$02
	sta     (ptr1),y
;
; paddles[i].height = 0x04;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$04
	ldy     #$03
	sta     (ptr1),y
;
; paddles[i].bbox_x = 0x02;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$02
	ldy     #$04
	sta     (ptr1),y
;
; paddles[i].bbox_y = 0x00;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$00
;
; } else {
;
	jmp     L0031
;
; paddles[i].width = 0x04;
;
L0030:	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$04
	ldy     #$02
	sta     (ptr1),y
;
; paddles[i].height = 0x20;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$20
	ldy     #$03
	sta     (ptr1),y
;
; paddles[i].bbox_x = 0x00;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$00
	ldy     #$04
	sta     (ptr1),y
;
; paddles[i].bbox_y = 0x02;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$02
L0031:	ldy     #$05
	sta     (ptr1),y
;
; paddles[i].xSpeed = 0;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$00
	ldy     #$06
	sta     (ptr1),y
;
; paddles[i].ySpeed = 0;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$00
	ldy     #$07
	sta     (ptr1),y
;
; paddles[i].xDir = 0;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$00
	ldy     #$08
	sta     (ptr1),y
;
; paddles[i].yDir = 0;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$00
	ldy     #$09
	sta     (ptr1),y
;
; paddles[i].xSpeedFloat = 0;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$00
	ldy     #$0A
	sta     (ptr1),y
;
; paddles[i].ySpeedFloat = 0;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$00
	ldy     #$0B
	sta     (ptr1),y
;
; paddles[i].xVelocity = 0;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$00
	ldy     #$0E
	sta     (ptr1),y
;
; paddles[i].yVelocity = 0;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$00
	ldy     #$0F
	sta     (ptr1),y
;
; paddles[i].minSpeed = 0;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$00
	ldy     #$10
	sta     (ptr1),y
;
; paddles[i].maxSpeed = 250;
;
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$FA
	ldy     #$11
	sta     (ptr1),y
;
; for (i = 0; i < paddle_count; ++i) {
;
	inc     _i
	jmp     L002F

.endproc

; ---------------------------------------------------------------
; void __near__ load_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_level: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(level_list[current_level]);
;
	ldx     #$00
	lda     _current_level
	asl     a
	bcc     L0005
	inx
	clc
L0005:	adc     #<(_level_list)
	sta     ptr1
	txa
	adc     #>(_level_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _vram_unrle
;
; memcpy(c_map, level_list[current_level + 1], 368);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _current_level
	clc
	adc     #$01
	bcc     L0002
	inx
L0002:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_level_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_level_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$01
	lda     #$70
	jsr     _memcpy
;
; load_paddles();
;
	jsr     _load_paddles
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; if (game_state == MAIN) {
;
	lda     _game_state
	cmp     #$01
	bne     L0003
;
; show_HUD();
;
	jsr     _show_HUD
;
; skull_launched = FALSE;
;
	lda     #$00
	sta     _skull_launched
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_title_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_title_screen: near

.segment	"CODE"

;
; pal_bg((const char*)pal_forest_bg);
;
	lda     #<(_pal_forest_bg)
	ldx     #>(_pal_forest_bg)
	jsr     _pal_bg
;
; pal_spr(pal_spr_01);
;
	lda     #<(_pal_spr_01)
	ldx     #>(_pal_spr_01)
	jsr     _pal_spr
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; game_state = TITLE;
;
	lda     #$00
	sta     _game_state
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ remove_brick (char tile_type)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_remove_brick: near

.segment	"CODE"

;
; void remove_brick(char tile_type) {
;
	jsr     pusha
;
; one_vram_buffer(tile_type, backup_nt_index);
;
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     _one_vram_buffer
;
; c_map[backup_col_index] &= backup_nt_index % 2 ? 0b11110000 : 0b00001111;
;
	lda     _backup_col_index
	clc
	adc     #<(_c_map)
	tay
	lda     _backup_col_index+1
	adc     #>(_c_map)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	stx     tmp1
	ora     tmp1
	beq     L0002
	lda     #$F0
	jmp     L0003
L0002:	lda     #$0F
L0003:	jsr     tosanda0
	ldy     #$00
	jsr     staspidx
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ hit_brick (char tile_type)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hit_brick: near

.segment	"CODE"

;
; void hit_brick(char tile_type) {
;
	jsr     pusha
;
; remove_brick(tile_type);
;
	ldy     #$00
	lda     (sp),y
	jsr     _remove_brick
;
; is_soft_hit = FALSE;
;
	lda     #$00
	sta     _is_soft_hit
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; signed char __near__ get_x_speed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_x_speed: near

.segment	"CODE"

;
; actor->xSpeed = actor->xSpeedFloat >> 7;
;
	lda     _actor+1
	sta     sreg+1
	lda     _actor
	sta     sreg
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$0A
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	cmp     #$80
	ldy     #$06
	sta     (sreg),y
;
; actor->xRemain += actor->xSpeedFloat & 0b01111111;  // MODULO 128
;
	lda     _actor
	ldx     _actor+1
	sta     ptr2
	stx     ptr2+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$0C
	lda     (ptr1),y
	sta     sreg
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$0A
	lda     (ptr1),y
	and     #$7F
	clc
	adc     sreg
	ldy     #$0C
	sta     (ptr2),y
;
; temp = 0;
;
	lda     #$00
	sta     _temp
;
; temp2 = 0;
;
	sta     _temp2
;
; if (actor->xRemain > 127) {
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	lda     (ptr1),y
	cmp     #$80
	bcc     L0003
;
; actor->xRemain &= 0b01111111;
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	lda     (ptr1),y
	and     #$7F
	sta     (ptr1),y
;
; temp = 1;
;
	lda     #$01
	sta     _temp
;
; temp2 = ((actor->xVelocity > 40) || (actor->xVelocity % 2)) ? 1 : 0;
;
L0003:	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$0E
	lda     (ptr1),y
	cmp     #$29
	bcs     L000E
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	lda     (ptr1),y
	and     #$01
	beq     L0010
L000E:	lda     #$01
L0010:	sta     _temp2
;
; if (actor->xVelocity) {
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	lda     (ptr1),y
	beq     L0008
;
; --actor->xVelocity;
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; return (actor->xSpeed + temp + temp2) * actor->xDir;
;
L0008:	lda     _actor
	ldx     _actor+1
	ldy     #$06
	jsr     ldaidx
	clc
	adc     _temp
	bcc     L000D
	inx
	clc
L000D:	adc     _temp2
	bcc     L000B
	inx
L000B:	jsr     pushax
	lda     _actor
	ldx     _actor+1
	ldy     #$08
	jsr     ldaidx
	jsr     tosmulax
	ldx     #$00
	cmp     #$80
	bcc     L0001
	dex
;
; }
;
L0001:	rts

.endproc

; ---------------------------------------------------------------
; signed char __near__ get_y_speed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_y_speed: near

.segment	"CODE"

;
; actor->ySpeed = actor->ySpeedFloat >> 7;
;
	lda     _actor+1
	sta     sreg+1
	lda     _actor
	sta     sreg
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	cmp     #$80
	ldy     #$07
	sta     (sreg),y
;
; actor->yRemain += actor->ySpeedFloat & 0b01111111;  // MODULO 128
;
	lda     _actor
	ldx     _actor+1
	sta     ptr2
	stx     ptr2+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$0D
	lda     (ptr1),y
	sta     sreg
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	and     #$7F
	clc
	adc     sreg
	ldy     #$0D
	sta     (ptr2),y
;
; temp = 0;
;
	lda     #$00
	sta     _temp
;
; temp2 = 0;
;
	sta     _temp2
;
; if (actor->yRemain > 127) {
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	lda     (ptr1),y
	cmp     #$80
	bcc     L0003
;
; actor->yRemain &= 0b01111111;
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	lda     (ptr1),y
	and     #$7F
	sta     (ptr1),y
;
; temp = 1;
;
	lda     #$01
	sta     _temp
;
; temp2 = ((actor->yVelocity > 40) || (actor->yVelocity % 2)) ? 1 : 0;
;
L0003:	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$0F
	lda     (ptr1),y
	cmp     #$29
	bcs     L000E
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	lda     (ptr1),y
	and     #$01
	beq     L0010
L000E:	lda     #$01
L0010:	sta     _temp2
;
; if (actor->yVelocity) {
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	lda     (ptr1),y
	beq     L0008
;
; --actor->yVelocity;
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; return (actor->ySpeed + temp + temp2) * actor->yDir;
;
L0008:	lda     _actor
	ldx     _actor+1
	ldy     #$07
	jsr     ldaidx
	clc
	adc     _temp
	bcc     L000D
	inx
	clc
L000D:	adc     _temp2
	bcc     L000B
	inx
L000B:	jsr     pushax
	lda     _actor
	ldx     _actor+1
	ldy     #$09
	jsr     ldaidx
	jsr     tosmulax
	ldx     #$00
	cmp     #$80
	bcc     L0001
	dex
;
; }
;
L0001:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ add_x_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_x_speed: near

.segment	"CODE"

;
; void add_x_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = actor->xSpeedFloat;
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$0A
	lda     (ptr1),y
	sta     _temp
;
; actor->xSpeedFloat += val;
;
	lda     _actor
	ldx     _actor+1
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     ptr1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldy     #$0A
	sta     (sreg),y
;
; if (actor->xSpeedFloat > actor->maxSpeed || actor->xSpeedFloat < temp) {
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	lda     (ptr1),y
	sta     sreg
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$11
	lda     (ptr1),y
	cmp     sreg
	bcc     L0006
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$0A
	lda     (ptr1),y
	cmp     _temp
	bcs     L0002
;
; actor->xSpeedFloat = actor->maxSpeed;
;
L0006:	lda     _actor+1
	sta     sreg+1
	lda     _actor
	sta     sreg
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$11
	lda     (ptr1),y
	ldy     #$0A
	sta     (sreg),y
;
; }
;
L0002:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ subtract_x_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_subtract_x_speed: near

.segment	"CODE"

;
; void subtract_x_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = actor->xSpeedFloat;
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$0A
	lda     (ptr1),y
	sta     _temp
;
; actor->xSpeedFloat -= val;
;
	lda     _actor
	ldx     _actor+1
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sec
	ldy     #$00
	sbc     (sp),y
	ldy     #$0A
	sta     (sreg),y
;
; if (actor->xSpeedFloat < actor->minSpeed || actor->xSpeedFloat > temp) {
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	lda     (ptr1),y
	sta     sreg
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$10
	lda     (ptr1),y
	cmp     sreg
	beq     L0005
	bcs     L0008
L0005:	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$0A
	lda     (ptr1),y
	cmp     _temp
	beq     L0002
	bcc     L0002
;
; actor->xSpeedFloat = actor->minSpeed;
;
L0008:	lda     _actor+1
	sta     sreg+1
	lda     _actor
	sta     sreg
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$10
	lda     (ptr1),y
	ldy     #$0A
	sta     (sreg),y
;
; }
;
L0002:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ add_y_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_y_speed: near

.segment	"CODE"

;
; void add_y_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = actor->ySpeedFloat;
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	sta     _temp
;
; actor->ySpeedFloat += val;
;
	lda     _actor
	ldx     _actor+1
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     ptr1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	ldy     #$0B
	sta     (sreg),y
;
; if (actor->ySpeedFloat > actor->maxSpeed || actor->ySpeedFloat < temp) {
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	lda     (ptr1),y
	sta     sreg
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$11
	lda     (ptr1),y
	cmp     sreg
	bcc     L0006
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	cmp     _temp
	bcs     L0002
;
; actor->ySpeedFloat = actor->maxSpeed;
;
L0006:	lda     _actor+1
	sta     sreg+1
	lda     _actor
	sta     sreg
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$11
	lda     (ptr1),y
	ldy     #$0B
	sta     (sreg),y
;
; }
;
L0002:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ subtract_y_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_subtract_y_speed: near

.segment	"CODE"

;
; void subtract_y_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = actor->ySpeedFloat;
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	sta     _temp
;
; actor->ySpeedFloat -= val;
;
	lda     _actor
	ldx     _actor+1
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sec
	ldy     #$00
	sbc     (sp),y
	ldy     #$0B
	sta     (sreg),y
;
; if (actor->ySpeedFloat < actor->minSpeed || actor->ySpeedFloat > temp) {
;
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	lda     (ptr1),y
	sta     sreg
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$10
	lda     (ptr1),y
	cmp     sreg
	beq     L0005
	bcs     L0008
L0005:	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$0B
	lda     (ptr1),y
	cmp     _temp
	beq     L0002
	bcc     L0002
;
; actor->ySpeedFloat = actor->minSpeed;
;
L0008:	lda     _actor+1
	sta     sreg+1
	lda     _actor
	sta     sreg
	lda     _actor+1
	sta     ptr1+1
	lda     _actor
	sta     ptr1
	ldy     #$10
	lda     (ptr1),y
	ldy     #$0B
	sta     (sreg),y
;
; }
;
L0002:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; char __near__ get_collision_type (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_collision_type: near

.segment	"CODE"

;
; collision_index = (temp_x_col >> 4) + (((temp_y_col >> 3) - 5) * 16);
;
	lda     _temp_x_col
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha0
	lda     _temp_y_col
	lsr     a
	lsr     a
	lsr     a
	sec
	sbc     #$05
	bcs     L0002
	ldx     #$FF
L0002:	jsr     aslax4
	jsr     tosaddax
	sta     _collision_index
	stx     _collision_index+1
;
; return (temp_x_col >> 3) % 2 ? c_map[collision_index] & 0x0F : c_map[collision_index] >> 4;
;
	lda     _temp_x_col
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha0
	lda     #$02
	jsr     tosmoda0
	stx     tmp1
	ora     tmp1
	beq     L0003
	lda     _collision_index
	sta     ptr1
	lda     _collision_index+1
	clc
	adc     #>(_c_map)
	sta     ptr1+1
	ldy     #<(_c_map)
	lda     (ptr1),y
	ldx     #$00
	and     #$0F
	rts
L0003:	lda     _collision_index
	sta     ptr1
	lda     _collision_index+1
	clc
	adc     #>(_c_map)
	sta     ptr1+1
	ldy     #<(_c_map)
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; char __near__ set_collision_data (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_collision_data: near

.segment	"CODE"

;
; backup_nt_index = NTADR_A((temp_x_col >> 3), (temp_y_col >> 3));
;
	ldx     #$00
	lda     _temp_y_col
	lsr     a
	lsr     a
	lsr     a
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	sta     ptr1
	stx     ptr1+1
	lda     _temp_x_col
	lsr     a
	lsr     a
	lsr     a
	ora     ptr1
	sta     _backup_nt_index
	lda     ptr1+1
	ora     #$20
	sta     _backup_nt_index+1
;
; backup_col_type = get_collision_type();
;
	jsr     _get_collision_type
	sta     _backup_col_type
;
; backup_col_index = collision_index;
;
	lda     _collision_index+1
	sta     _backup_col_index+1
	lda     _collision_index
	sta     _backup_col_index
;
; return backup_col_type;
;
	ldx     #$00
	lda     _backup_col_type
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ do_skull_tile_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_skull_tile_collision: near

.segment	"CODE"

;
; switch (backup_col_type) {
;
	lda     _backup_col_type
;
; }
;
	cmp     #$01
	bne     L001A
;
; }
;
	rts
;
; }
;
L001A:	cmp     #$02
	beq     L0005
	cmp     #$03
	beq     L0016
	cmp     #$04
	beq     L0017
	cmp     #$05
	jeq     L0018
	cmp     #$06
	jeq     L0019
	cmp     #$07
	bne     L001B
;
; }
;
	rts
;
; }
;
L001B:	cmp     #$08
	bne     L001C
;
; }
;
	rts
;
; }
;
L001C:	cmp     #$09
	bne     L001D
;
; }
;
	rts
;
; }
;
L001D:	cmp     #$0A
	beq     L0003
	cmp     #$0B
	beq     L0003
	cmp     #$0C
	beq     L0003
	cmp     #$0D
	beq     L0003
	cmp     #$0E
	beq     L0003
	cmp     #$0F
	beq     L0003
	rts
;
; if (p1_health) {
;
L0005:	lda     _p1_health
	beq     L0006
;
; --p1_health;
;
	dec     _p1_health
;
; update_health();
;
L0006:	jmp     _update_health
;
; remove_brick(TILE_BACK);
;
L0016:	lda     #$10
	jsr     _remove_brick
;
; ++backup_nt_index;
;
	inc     _backup_nt_index
	bne     L0008
	inc     _backup_nt_index+1
;
; hit_brick(TILE_BACK);
;
L0008:	lda     #$10
	jsr     _hit_brick
;
; add_xp(1, HUNDREDS);
;
	lda     #$01
	jsr     pusha
	lda     #$05
	jmp     _add_xp
;
; remove_brick(TILE_BACK);
;
L0017:	lda     #$10
	jsr     _remove_brick
;
; --backup_nt_index;
;
	lda     _backup_nt_index
	sec
	sbc     #$01
	sta     _backup_nt_index
	bcs     L000A
	dec     _backup_nt_index+1
;
; hit_brick(TILE_BACK);
;
L000A:	lda     #$10
	jsr     _hit_brick
;
; add_xp(1, HUNDREDS);
;
	lda     #$01
	jsr     pusha
	lda     #$05
	jmp     _add_xp
;
; hit_brick(0x11);
;
L0018:	lda     #$11
	jsr     _hit_brick
;
; add_xp(5, TENS);
;
	lda     #$05
	jsr     pusha
	lda     #$06
	jmp     _add_xp
;
; hit_brick(TILE_BACK_GRASS);
;
L0019:	lda     #$23
	jsr     _hit_brick
;
; is_soft_hit = TRUE;
;
	lda     #$01
	sta     _is_soft_hit
;
; break;
;
	rts
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ is_skull_beside (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_skull_beside: near

.segment	"CODE"

;
; return (Skull.y + 1 < paddles[pad_index].y + 6) && (Skull.y + 7 > paddles[pad_index].y + 2);
;
	ldx     #$00
	lda     _Skull+1
	clc
	adc     #$01
	bcc     L0002
	inx
L0002:	jsr     pushax
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$01
	ldx     #$00
	lda     (ptr1),y
	clc
	adc     #$06
	bcc     L0003
	inx
L0003:	jsr     tosicmp
	bpl     L0004
	ldx     #$00
	lda     _Skull+1
	clc
	adc     #$07
	bcc     L0005
	inx
L0005:	jsr     pushax
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$01
	ldx     #$00
	lda     (ptr1),y
	clc
	adc     #$02
	bcc     L0006
	inx
L0006:	jsr     tosicmp
	beq     L0004
	bpl     L0007
L0004:	ldx     #$00
	txa
	rts
L0007:	lda     #$01
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; char __near__ is_skull_collision_paddle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_skull_collision_paddle: near

.segment	"CODE"

;
; return (temp_x < paddles[pad_index].x + paddles[pad_index].width + paddles[pad_index].bbox_x &&
;
	lda     _temp_x
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #<(_paddles)
	lda     (ptr1),y
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     tosadda0
	jsr     pushax
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	jsr     tosadda0
	jsr     tosicmp
	jpl     L0002
;
; temp_x + Skull.width > paddles[pad_index].x + paddles[pad_index].bbox_x &&
;
	ldx     #$00
	lda     _temp_x
	clc
	adc     _Skull+2
	bcc     L0005
	inx
L0005:	jsr     pushax
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #<(_paddles)
	lda     (ptr1),y
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	jsr     tosadda0
	jsr     tosicmp
	jmi     L0002
	jeq     L0002
;
; temp_y < paddles[pad_index].y + paddles[pad_index].height + paddles[pad_index].bbox_y &&
;
	lda     _temp_y
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     tosadda0
	jsr     pushax
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$05
	lda     (ptr1),y
	jsr     tosadda0
	jsr     tosicmp
	bpl     L0002
;
; temp_y + Skull.height > paddles[pad_index].y + paddles[pad_index].bbox_y);
;
	ldx     #$00
	lda     _temp_y
	clc
	adc     _Skull+3
	bcc     L0006
	inx
L0006:	jsr     pushax
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$05
	lda     (ptr1),y
	jsr     tosadda0
	jsr     tosicmp
	beq     L0002
	bpl     L0003
L0002:	ldx     #$00
	txa
	rts
L0003:	lda     #$01
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; char __near__ is_paddle_collision_skull (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_paddle_collision_skull: near

.segment	"CODE"

;
; return (Skull.x + 7 > paddles[pad_index].x + paddles[pad_index].bbox_x &&
;
	ldx     #$00
	lda     _Skull
	clc
	adc     #$07
	bcc     L0002
	inx
L0002:	jsr     pushax
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #<(_paddles)
	lda     (ptr1),y
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	jsr     tosadda0
	jsr     tosicmp
	jmi     L0003
	jeq     L0003
;
; Skull.y + 7 > paddles[pad_index].y + paddles[pad_index].bbox_y &&
;
	ldx     #$00
	lda     _Skull+1
	clc
	adc     #$07
	bcc     L0004
	inx
L0004:	jsr     pushax
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$05
	lda     (ptr1),y
	jsr     tosadda0
	jsr     tosicmp
	jmi     L0003
	jeq     L0003
;
; Skull.x + 1 < paddles[pad_index].x + paddles[pad_index].width + paddles[pad_index].bbox_x &&
;
	ldx     #$00
	lda     _Skull
	clc
	adc     #$01
	bcc     L0005
	inx
L0005:	jsr     pushax
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #<(_paddles)
	lda     (ptr1),y
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     tosadda0
	jsr     pushax
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$04
	lda     (ptr1),y
	jsr     tosadda0
	jsr     tosicmp
	bpl     L0003
;
; Skull.y + 1 < paddles[pad_index].y + paddles[pad_index].height + paddles[pad_index].bbox_y);
;
	ldx     #$00
	lda     _Skull+1
	clc
	adc     #$01
	bcc     L0006
	inx
L0006:	jsr     pushax
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$03
	lda     (ptr1),y
	jsr     tosadda0
	jsr     pushax
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$05
	lda     (ptr1),y
	jsr     tosadda0
	jsr     tosicmp
	bmi     L0007
L0003:	ldx     #$00
	txa
	rts
L0007:	lda     #$01
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_horizontal_paddle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_horizontal_paddle: near

.segment	"CODE"

;
; temp_x_col = paddles[pad_index].x;
;
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #<(_paddles)
	lda     (ptr1),y
	sta     _temp_x_col
;
; temp_y_col = paddles[pad_index].y;
;
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _temp_y_col
;
; if (paddles[pad_index].xDir == LEFT) {
;
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	tay
	txa
	adc     #>(_paddles)
	tax
	tya
	ldy     #$08
	jsr     ldaidx
	cmp     #$FF
	bne     L0002
;
; --temp_x_col;
;
	dec     _temp_x_col
;
; if (get_collision_type()) {
;
	jsr     _get_collision_type
	tax
	beq     L0010
;
; ++temp_x_col;
;
	inc     _temp_x_col
;
; } else {
;
	jmp     L0011
;
; temp_x_col += paddles[pad_index].width;
;
L0002:	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	clc
	adc     _temp_x_col
	sta     _temp_x_col
;
; if (get_collision_type()) {
;
	jsr     _get_collision_type
	tax
	beq     L0010
;
; temp_x_col = paddles[pad_index].x;
;
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #<(_paddles)
	lda     (ptr1),y
;
; } else {
;
	jmp     L000E
;
; temp_x_col = paddles[pad_index].x + get_x_speed();
;
L0010:	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #<(_paddles)
	lda     (ptr1),y
	jsr     pusha0
	jsr     _get_x_speed
	jsr     tosaddax
L000E:	sta     _temp_x_col
;
; if ((pad1 & 0b00000011) && is_paddle_collision_skull()) {
;
L0011:	lda     _pad1
	and     #$03
	beq     L0014
	jsr     _is_paddle_collision_skull
	tax
	beq     L0014
;
; if (is_skull_beside()) {
;
	jsr     _is_skull_beside
	tax
	beq     L0014
;
; Skull.xVelocity = 80;
;
	lda     #$50
	sta     _Skull+14
;
; paddles[pad_index].x = temp_x_col;
;
L0014:	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     _temp_x_col
	ldy     #$00
	sta     (ptr1),y
;
; if (paddles[pad_index].xSpeedFloat) {
;
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$0A
	lda     (ptr1),y
	beq     L000D
;
; subtract_x_speed(16);
;
	lda     #$10
	jmp     _subtract_x_speed
;
; }
;
L000D:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_vertical_paddle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_vertical_paddle: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_paddle_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_paddle_collision: near

.segment	"CODE"

;
; temp = FALSE;
;
	lda     #$00
	sta     _temp
;
; if (Skull.y > 127) {
;
	lda     _Skull+1
	cmp     #$80
	bcc     L0022
;
; temp = TRUE;
;
	lda     #$01
	sta     _temp
;
; pad_index = 0;
;
	lda     #$00
;
; } else if (paddle_count > 1) {
;
	jmp     L001C
L0022:	lda     _paddle_count
	cmp     #$02
	bcc     L0004
;
; one_vram_buffer(0x31, NTADR_A(1,1));
;
	lda     #$31
	jsr     pusha
	ldx     #$20
	lda     #$21
	jsr     _one_vram_buffer
;
; temp = TRUE;
;
	lda     #$01
	sta     _temp
;
; pad_index = 1;
;
L001C:	sta     _pad_index
;
; if (temp) {
;
L0004:	lda     _temp
	jeq     L0024
;
; if (is_skull_collision_paddle()) {
;
	jsr     _is_skull_collision_paddle
	tax
	jeq     L0024
;
; if (temp_x < paddles[pad_index].x + (paddles[pad_index].width >> 1)) {
;
	lda     _temp_x
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #<(_paddles)
	lda     (ptr1),y
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	lsr     a
	jsr     tosadda0
	jsr     tosicmp
	bpl     L0007
;
; if (temp_x <= paddles[pad_index].x + 4) {
;
	lda     _temp_x
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #<(_paddles)
	ldx     #$00
	lda     (ptr1),y
	clc
	adc     #$04
	bcc     L0009
	inx
L0009:	jsr     tosicmp
	beq     L0020
	bpl     L0008
;
; Skull.xDir = LEFT;
;
L0020:	lda     #$FF
	sta     _Skull+8
;
; Skull.xSpeedFloat = 140;
;
	lda     #$8C
	sta     _Skull+10
;
; Skull.ySpeedFloat = 60;
;
	lda     #$3C
;
; } else if (temp_x <= paddles[pad_index].x + 8) {
;
	jmp     L001D
L0008:	lda     _temp_x
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #<(_paddles)
	ldx     #$00
	lda     (ptr1),y
	clc
	adc     #$08
	bcc     L000C
	inx
L000C:	jsr     tosicmp
	beq     L0021
	jpl     L0012
;
; Skull.xDir = LEFT;
;
L0021:	lda     #$FF
	sta     _Skull+8
;
; Skull.xSpeedFloat = 100;
;
	lda     #$64
	sta     _Skull+10
;
; } else {
;
	jmp     L001D
;
; if (temp_x >= paddles[pad_index].x + paddles[pad_index].width - 4) {
;
L0007:	lda     _temp_x
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #<(_paddles)
	lda     (ptr1),y
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     tosadda0
	sec
	sbc     #$04
	bcs     L0010
	dex
L0010:	jsr     tosicmp
	bmi     L000F
;
; Skull.xDir = RIGHT;
;
	lda     #$01
	sta     _Skull+8
;
; Skull.xSpeedFloat = 140;
;
	lda     #$8C
	sta     _Skull+10
;
; Skull.ySpeedFloat = 60;
;
	lda     #$3C
;
; } else if (temp_x >= paddles[pad_index].x + paddles[pad_index].width - 8) {
;
	jmp     L001D
L000F:	lda     _temp_x
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #<(_paddles)
	lda     (ptr1),y
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$02
	lda     (ptr1),y
	jsr     tosadda0
	sec
	sbc     #$08
	bcs     L0013
	dex
L0013:	jsr     tosicmp
	bmi     L0012
;
; Skull.xDir = RIGHT;
;
	lda     #$01
	sta     _Skull+8
;
; Skull.xSpeedFloat = 100;
;
	lda     #$64
	sta     _Skull+10
;
; } else {
;
	jmp     L001D
;
; Skull.xSpeedFloat = 60;
;
L0012:	lda     #$3C
	sta     _Skull+10
;
; Skull.ySpeedFloat = 140;
;
	lda     #$8C
L001D:	sta     _Skull+11
;
; if (Skull.y < paddles[pad_index].y) {
;
	lda     _Skull+1
	jsr     pusha0
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     tosicmp0
	bcs     L0015
;
; Skull.yDir = UP;
;
	lda     #$FF
;
; } else {
;
	jmp     L001E
;
; Skull.yDir = DOWN;
;
L0015:	lda     #$01
L001E:	sta     _Skull+9
;
; temp = FALSE;
;
	lda     #$00
L0024:	sta     _temp
;
; if (paddle_count > 2) {
;
	lda     _paddle_count
	cmp     #$03
	bcc     L001A
;
; if (Skull.x < 127) {
;
	lda     _Skull
	cmp     #$7F
	bcs     L0025
;
; temp = TRUE;
;
	lda     #$01
	sta     _temp
;
; pad_index = 2;
;
	lda     #$02
;
; } else if (paddle_count > 3) {
;
	jmp     L001F
L0025:	lda     _paddle_count
	cmp     #$04
	bcc     L001A
;
; temp = TRUE;
;
	lda     #$01
	sta     _temp
;
; pad_index = 3;
;
	lda     #$03
L001F:	sta     _pad_index
;
; }
;
L001A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_main_input (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_main_input: near

.segment	"CODE"

;
; for (pad_index = 0; pad_index < paddle_count; ++pad_index) {
;
	lda     #$00
	sta     _pad_index
L0012:	lda     _pad_index
	cmp     _paddle_count
	jcs     L0016
;
; actor = &paddles[pad_index];
;
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     _actor
	txa
	adc     #>(_paddles)
	sta     _actor+1
;
; if (pad_index < 2) {
;
	lda     _pad_index
	cmp     #$02
	bcs     L0014
;
; if (pad1 & PAD_LEFT) {
;
	lda     _pad1
	and     #$02
	beq     L0013
;
; add_x_speed(80);
;
	lda     #$50
	jsr     _add_x_speed
;
; paddles[pad_index].xDir = LEFT;
;
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$FF
	ldy     #$08
	sta     (ptr1),y
;
; if (pad1 & PAD_RIGHT) {
;
L0013:	lda     _pad1
	and     #$01
	beq     L0008
;
; add_x_speed(80);
;
	lda     #$50
	jsr     _add_x_speed
;
; paddles[pad_index].xDir = RIGHT;
;
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$01
	ldy     #$08
	sta     (ptr1),y
;
; move_horizontal_paddle();
;
L0008:	jsr     _move_horizontal_paddle
;
; } else {
;
	jmp     L0004
;
; if (pad1 & PAD_UP) {
;
L0014:	lda     _pad1
	and     #$08
	beq     L0015
;
; add_y_speed(80);
;
	lda     #$50
	jsr     _add_y_speed
;
; paddles[pad_index].yDir = UP;
;
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$FF
	ldy     #$09
	sta     (ptr1),y
;
; if (pad1 & PAD_DOWN) {
;
L0015:	lda     _pad1
	and     #$04
	beq     L000B
;
; add_y_speed(80);
;
	lda     #$50
	jsr     _add_y_speed
;
; paddles[pad_index].yDir = DOWN;
;
	lda     _pad_index
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	lda     #$01
	ldy     #$09
	sta     (ptr1),y
;
; move_vertical_paddle();
;
L000B:	jsr     _move_vertical_paddle
;
; for (pad_index = 0; pad_index < paddle_count; ++pad_index) {
;
L0004:	inc     _pad_index
	jmp     L0012
;
; if (pad1 & PAD_A) {
;
L0016:	lda     _pad1
	and     #$80
	beq     L0017
;
; if (skull_launched) {
;
	lda     _skull_launched
;
; } else {
;
	bne     L0017
;
; skull_launched = TRUE;
;
	lda     #$01
	sta     _skull_launched
;
; if (pad1 & PAD_B) {
;
L0017:	lda     _pad1
	ldx     #$00
	and     #$40
	stx     tmp1
	ora     tmp1
;
; if (pad1 & PAD_START) {
;
	lda     _pad1
	and     #$10
	ora     tmp1
;
; if (pad1 & PAD_SELECT) {
;
	lda     _pad1
	and     #$20
	ora     tmp1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_skull (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_skull: near

.segment	"CODE"

;
; backup_col_type = NULL;
;
	ldx     #$00
	stx     _backup_col_type
;
; if (skull_launched) {
;
	lda     _skull_launched
	jeq     L0065
;
; actor = &Skull;
;
	lda     #>(_Skull)
	sta     _actor+1
	lda     #<(_Skull)
	sta     _actor
;
; temp_x = Skull.x + get_x_speed();
;
	lda     _Skull
	jsr     pusha0
	jsr     _get_x_speed
	jsr     tosaddax
	sta     _temp_x
;
; temp_y = Skull.y + get_y_speed();
;
	lda     _Skull+1
	jsr     pusha0
	jsr     _get_y_speed
	jsr     tosaddax
	sta     _temp_y
;
; ++temp_x;
;
	inc     _temp_x
;
; ++temp_y;
;
	inc     _temp_y
;
; if (Skull.xDir == RIGHT) {
;
	lda     _Skull+8
	cmp     #$01
	jne     L0003
;
; if (Skull.yDir == DOWN) {
;
	lda     _Skull+9
	cmp     #$01
	jne     L0005
;
; temp_x_col = temp_x;
;
	lda     _temp_x
	sta     _temp_x_col
;
; temp_y_col = temp_y + Skull.height;
;
	lda     _temp_y
	clc
	adc     _Skull+3
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L004D
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0008
;
; Skull.yDir = UP;
;
	lda     #$FF
	sta     _Skull+9
;
; temp_y -= temp_y % 8;
;
	lda     _temp_y
	and     #$07
	eor     #$FF
	sec
	adc     _temp_y
	sta     _temp_y
;
; do_skull_tile_collision();
;
L0008:	jsr     _do_skull_tile_collision
;
; temp_x_col += Skull.width;
;
L004D:	lda     _Skull+2
	clc
	adc     _temp_x_col
	sta     _temp_x_col
;
; temp_y_col = temp_y;
;
	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L004E
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0043
;
; Skull.xDir = LEFT;
;
	lda     #$FF
	sta     _Skull+8
;
; temp_x -= temp_x % 8;
;
	lda     _temp_x
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; temp_y_col += Skull.height;
;
L004E:	lda     _Skull+3
	clc
	adc     _temp_y_col
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	jeq     L003B
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0043
;
; if (temp_y % 8 < COL_OFFSET && temp_x % 8 > 3) {
;
	lda     _temp_y
	and     #$07
	cmp     #$05
	lda     #$00
	sbc     #$00
	bvc     L000F
	eor     #$80
L000F:	bpl     L000E
	lda     _temp_x
	and     #$07
	cmp     #$04
	lda     #$00
	sbc     #$00
	bvs     L0011
	eor     #$80
L0011:	bpl     L000E
;
; Skull.yDir = UP;
;
	lda     #$FF
	sta     _Skull+9
;
; temp_y -= temp_y % 8;
;
	lda     _temp_y
;
; } else {
;
	jmp     L006B
;
; Skull.xDir = LEFT;
;
L000E:	lda     #$FF
	sta     _Skull+8
;
; temp_x -= temp_x % 8;
;
	lda     _temp_x
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; temp_x_col = temp_x;
;
L0005:	lda     _temp_x
	sta     _temp_x_col
;
; temp_y_col = temp_y;
;
	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L0052
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0017
;
; Skull.yDir = DOWN;
;
	lda     #$01
	sta     _Skull+9
;
; temp_y += 8;
;
	lda     #$08
	clc
	adc     _temp_y
	sta     _temp_y
;
; temp_y -= temp_y % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_y
	sta     _temp_y
;
; do_skull_tile_collision();
;
L0017:	jsr     _do_skull_tile_collision
;
; temp_x_col = temp_x + Skull.width;
;
L0052:	lda     _temp_x
	clc
	adc     _Skull+2
	sta     _temp_x_col
;
; temp_y_col += Skull.height;
;
	lda     _Skull+3
	clc
	adc     _temp_y_col
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L0053
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0043
;
; Skull.xDir = LEFT;
;
	lda     #$FF
	sta     _Skull+8
;
; temp_x -= temp_x % 8;
;
	lda     _temp_x
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; temp_y_col = temp_y;
;
L0053:	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	jeq     L003B
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0043
;
; if (temp_y % 8 < COL_OFFSET && temp_x % 8 < 3) {
;
	lda     _temp_y
	and     #$07
	cmp     #$05
	lda     #$00
	sbc     #$00
	bvc     L001E
	eor     #$80
L001E:	jpl     L0063
	lda     _temp_x
	and     #$07
	cmp     #$03
	lda     #$00
	sbc     #$00
	bvc     L0020
	eor     #$80
L0020:	jpl     L0063
;
; Skull.xDir = LEFT;
;
	lda     #$FF
	sta     _Skull+8
;
; temp_x -= temp_x % 8;
;
	lda     _temp_x
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; if (Skull.yDir == DOWN) {
;
L0003:	lda     _Skull+9
	cmp     #$01
	jne     L0025
;
; temp_x_col = temp_x + Skull.width;
;
	lda     _temp_x
	clc
	adc     _Skull+2
	sta     _temp_x_col
;
; temp_y_col = temp_y + Skull.height;
;
	lda     _temp_y
	clc
	adc     _Skull+3
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L0058
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0028
;
; Skull.yDir = UP;
;
	lda     #$FF
	sta     _Skull+9
;
; temp_y -= temp_y % 8;
;
	lda     _temp_y
	and     #$07
	eor     #$FF
	sec
	adc     _temp_y
	sta     _temp_y
;
; do_skull_tile_collision();
;
L0028:	jsr     _do_skull_tile_collision
;
; temp_x_col = temp_x;
;
L0058:	lda     _temp_x
	sta     _temp_x_col
;
; temp_y_col = temp_y;
;
	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L0059
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0043
;
; Skull.xDir = RIGHT;
;
	lda     #$01
	sta     _Skull+8
;
; temp_x += 8;
;
	lda     #$08
	clc
	adc     _temp_x
	sta     _temp_x
;
; temp_x -= temp_x % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; temp_x_col = temp_x;
;
L0059:	lda     _temp_x
	sta     _temp_x_col
;
; temp_y_col += Skull.height;
;
	lda     _Skull+3
	clc
	adc     _temp_y_col
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	jeq     L003B
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0043
;
; if (temp_y % 8 < COL_OFFSET && temp_x % 8 > 3) {
;
	lda     _temp_y
	and     #$07
	cmp     #$05
	lda     #$00
	sbc     #$00
	bvc     L002F
	eor     #$80
L002F:	bpl     L005D
	lda     _temp_x
	and     #$07
	cmp     #$04
	lda     #$00
	sbc     #$00
	bvs     L0031
	eor     #$80
L0031:	bpl     L005D
;
; Skull.yDir = UP;
;
	lda     #$FF
	sta     _Skull+9
;
; temp_y -= temp_y % 8;
;
	lda     _temp_y
;
; } else {
;
	jmp     L006B
;
; Skull.xDir = RIGHT;
;
L005D:	lda     #$01
	sta     _Skull+8
;
; temp_x += 8;
;
	lda     #$08
	clc
	adc     _temp_x
	sta     _temp_x
;
; temp_x -= temp_x % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; temp_x_col = temp_x + Skull.width;
;
L0025:	lda     _temp_x
	clc
	adc     _Skull+2
	sta     _temp_x_col
;
; temp_y_col = temp_y;
;
	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L005E
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0037
;
; Skull.yDir = DOWN;
;
	lda     #$01
	sta     _Skull+9
;
; temp_y += 8;
;
	lda     #$08
	clc
	adc     _temp_y
	sta     _temp_y
;
; temp_y -= temp_y % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_y
	sta     _temp_y
;
; do_skull_tile_collision();
;
L0037:	jsr     _do_skull_tile_collision
;
; temp_x_col = temp_x;
;
L005E:	lda     _temp_x
	sta     _temp_x_col
;
; temp_y_col = temp_y + Skull.height;
;
	lda     _temp_y
	clc
	adc     _Skull+3
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L005F
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0043
;
; Skull.xDir = RIGHT;
;
	lda     #$01
	sta     _Skull+8
;
; temp_x += 8;
;
	lda     #$08
	clc
	adc     _temp_x
	sta     _temp_x
;
; temp_x -= temp_x % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; temp_y_col = temp_y;
;
L005F:	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L003B
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0043
;
; if (temp_y % 8 < COL_OFFSET && temp_x % 8 > 3) {
;
	lda     _temp_y
	and     #$07
	cmp     #$05
	lda     #$00
	sbc     #$00
	bvc     L003E
	eor     #$80
L003E:	bpl     L0063
	lda     _temp_x
	and     #$07
	cmp     #$04
	lda     #$00
	sbc     #$00
	bvs     L0040
	eor     #$80
L0040:	bpl     L0063
;
; Skull.xDir = RIGHT;
;
	lda     #$01
	sta     _Skull+8
;
; temp_x += 8;
;
	lda     #$08
	clc
	adc     _temp_x
	sta     _temp_x
;
; temp_x -= temp_x % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; Skull.yDir = DOWN;
;
L0063:	lda     #$01
	sta     _Skull+9
;
; temp_y += 8;
;
	lda     #$08
	clc
	adc     _temp_y
	sta     _temp_y
;
; temp_y -= temp_y % 8;
;
L006B:	and     #$07
	eor     #$FF
	sec
	adc     _temp_y
	sta     _temp_y
;
; do_skull_tile_collision();
;
L0043:	jsr     _do_skull_tile_collision
;
; check_paddle_collision();
;
L003B:	jsr     _check_paddle_collision
;
; --temp_x;
;
	dec     _temp_x
;
; --temp_y;
;
	dec     _temp_y
;
; } else {
;
	jmp     L0066
;
; temp_x = paddles[0].x + (paddles[0].width >> 1) - (Skull.width >> 1);
;
L0065:	lda     _paddles+2
	lsr     a
	clc
	adc     _paddles
	bcc     L004C
	inx
L004C:	jsr     pushax
	lda     _Skull+2
	lsr     a
	jsr     tossuba0
	sta     _temp_x
;
; temp_y = paddles[0].y + paddles[0].bbox_y - Skull.height - Skull.bbox_x;
;
	lda     _paddles+1
	clc
	adc     _paddles+5
	sec
	sbc     _Skull+3
	sec
	sbc     _Skull+4
	sta     _temp_y
;
; Skull.x = temp_x;
;
L0066:	lda     _temp_x
	sta     _Skull
;
; Skull.y = temp_y;
;
	lda     _temp_y
	sta     _Skull+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; for (i = 0; i < paddle_count; ++i) {
;
	lda     #$00
	sta     _i
L0009:	lda     _i
	cmp     _paddle_count
	jcs     L0003
;
; if (i < 2) {
;
	cmp     #$02
	bcs     L0006
;
; oam_meta_spr(paddles[i].x, paddles[i].y, HorizontalPaddleSpr);
;
	jsr     decsp2
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #<(_paddles)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #<(_HorizontalPaddleSpr)
	ldx     #>(_HorizontalPaddleSpr)
;
; } else {
;
	jmp     L0008
;
; oam_meta_spr(paddles[i].x, paddles[i].y, VerticalPaddleSpr);
;
L0006:	jsr     decsp2
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	sta     ptr1
	txa
	clc
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #<(_paddles)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
	lda     _i
	jsr     pusha0
	lda     #$12
	jsr     tosmula0
	clc
	adc     #<(_paddles)
	sta     ptr1
	txa
	adc     #>(_paddles)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	dey
	sta     (sp),y
	lda     #<(_VerticalPaddleSpr)
	ldx     #>(_VerticalPaddleSpr)
L0008:	jsr     _oam_meta_spr
;
; for (i = 0; i < paddle_count; ++i) {
;
	inc     _i
	jmp     L0009
;
; oam_spr(Skull.x, Skull.y, 0x00, 0b00000000);
;
L0003:	jsr     decsp3
	lda     _Skull
	ldy     #$02
	sta     (sp),y
	lda     _Skull+1
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; load_title_screen();
;
	jsr     _load_title_screen
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; while (game_state == TITLE) {
;
	jmp     L000C
;
; ppu_wait_nmi();
;
L0005:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START) {
;
	and     #$10
	beq     L000C
;
; game_state = MAIN;
;
	lda     #$01
	sta     _game_state
;
; current_level = 0;
;
	lda     #$00
	sta     _current_level
;
; p1_health = 3;
;
	lda     #$03
	sta     _p1_health
;
; p1_max_health = 3;
;
	sta     _p1_max_health
;
; load_level();
;
	jsr     _load_level
;
; while (game_state == TITLE) {
;
L000C:	lda     _game_state
	beq     L0005
;
; while (game_state == MAIN) {
;
	jmp     L000D
;
; ppu_wait_nmi();
;
L0009:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; check_main_input();
;
	jsr     _check_main_input
;
; update_skull();
;
	jsr     _update_skull
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; gray_line();
;
	jsr     _gray_line
;
; while (game_state == MAIN) {
;
L000D:	lda     _game_state
	cmp     #$01
	beq     L0009
;
; while (1) {
;
	jmp     L000C

.endproc

