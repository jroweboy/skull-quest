;
; File generated by cc65 v 2.19 - Git 4f87c7c
;
	.fopt		compiler,"cc65 v 2.19 - Git 4f87c7c"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_set_animation_info
	.export		_get_x_speed
	.export		_get_y_speed
	.export		_set_torch
	.export		_do_skull_tile_collision
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_get_pad_new
	.import		_set_scroll_y
	.import		_add_scroll_y
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_unrle
	.import		_memfill
	.export		_bankLevel
	.export		_bankBuffer
	.export		_banked_call
	.export		_bank_push
	.export		_bank_pop
	.import		_set_prg_8000
	.import		_set_chr_mode_1
	.import		_set_chr_mode_2
	.import		_set_chr_mode_3
	.import		_set_chr_mode_4
	.import		_set_chr_mode_5
	.import		_set_mirroring
	.import		_disable_irq
	.export		_empty_line
	.export		_dial0001
	.export		_dial0002
	.export		_dial0003
	.export		_dial0004
	.export		_dial0005
	.export		_dial0006
	.export		_dial0007
	.export		_dial0008
	.export		_dial0009
	.export		_dial0010
	.export		_dial0011
	.export		_dial0012
	.export		_dial0013
	.export		_dial0014
	.export		_dial0015
	.export		_dial0016
	.export		_dial0017
	.export		_dial0018
	.export		_dial0019
	.export		_dial0020
	.export		_dial0021
	.export		_dial0022
	.export		_dial0023
	.export		_dial0024
	.export		_dial0025
	.export		_black_level
	.export		_pal_map
	.export		_pal_title
	.export		_pal_cemetery_bg
	.export		_pal_cemetery_spr
	.export		_pal_altar_bg
	.export		_pal_altar_spr
	.export		_pal_altar_lightning
	.export		_pal_temple_bg
	.export		_pal_temple_spr
	.export		_pal_temple_spr2
	.export		_pal_town_bg
	.export		_pal_town_bg2
	.export		_pal_town_spr
	.export		_pal_town_spr2
	.export		_animation_array
	.export		_wram_array
	.export		_current_nametable
	.export		_current_collision_map
	.export		_current_background_palette
	.export		_current_sprite_palette
	.export		_items
	.export		_actors
	.export		_cemetery_col
	.export		_temple_col
	.export		_temple2_col
	.export		_temple3_col
	.export		_temple4_col
	.export		_town_col
	.export		_farm_col
	.export		_bombable_test
	.export		_no_sprite
	.export		_angelic_idle1
	.export		_angelic_idle2
	.export		_angelic_idle3
	.export		_angelic_face
	.export		_angelic_animation_index
	.export		_angelic_animation
	.export		_bomb_0a_data
	.export		_bomb_0b_data
	.export		_bomb_0c_data
	.export		_bomb_1_data
	.export		_bomb_2_data
	.export		_bomb_3_data
	.export		_bomb_4_data
	.export		_bomb_5_data
	.export		_bomb_animation_index
	.export		_bomb_animation
	.export		_crow_left_idle
	.export		_crow_right_idle
	.export		_crow_left_skwak
	.export		_crow_right_skwak
	.export		_crow_left_fly1
	.export		_crow_right_fly1
	.export		_crow_left_fly2
	.export		_crow_right_fly2
	.export		_crow_left_eat
	.export		_crow_right_eat
	.export		_crow_animation_index
	.export		_crow_animation
	.export		_cursor_0_data
	.export		_cursor_1_data
	.export		_cursor_2_data
	.export		_cursor_3_data
	.export		_cursor_animation_index
	.export		_cursor_animation
	.export		_devil_8_data
	.export		_devil_9_data
	.export		_devil_10_data
	.export		_devil_attack
	.export		_grakk_face
	.export		_grakk
	.export		_devil_animation_index
	.export		_devil_animation
	.export		_house_door_idle
	.export		_house_door_open1
	.export		_house_door_open2
	.export		_house_door_animation_index
	.export		_house_door_animation
	.export		_scarecrow_data
	.export		_pumpkin_1_data
	.export		_pumpkin_2_data
	.export		_pumpkin_3_data
	.export		_pumpkin_4_data
	.export		_pumpkin_5_data
	.export		_pumpkin_6_data
	.export		_pumpkin_7_data
	.export		_pumpkin_8_data
	.export		_pumpkin_9_data
	.export		_scarecrow_animation
	.export		_pumpkin_animation_index
	.export		_pumpkin_animation
	.export		_fireball1
	.export		_fireball2
	.export		_fireball3
	.export		_fireball1_right
	.export		_fireball2_right
	.export		_fireball3_right
	.export		_fireball_appear1
	.export		_fireball_appear2
	.export		_fireball_animation_index
	.export		_fireball_animation
	.export		_trigger_animation
	.export		_HorizontalPaddleSpr
	.export		_VerticalPaddleSpr
	.export		_HorizontalPaddleSpr_short
	.export		_VerticalPaddleSpr_short
	.export		_tree
	.export		_tree_animation
	.export		_gate0
	.export		_gate1
	.export		_gate2
	.export		_gate3
	.export		_gate4
	.export		_torch_flicker1
	.export		_torch_flicker2
	.export		_torch_flicker3
	.export		_torch_flicker4
	.export		_torch_animation_index
	.export		_torch_animation
	.export		_gate_animation_index
	.export		_gate_animation
	.export		_skull_pile
	.export		_skull_pile_animation
	.export		_crate_data
	.export		_crate_animation
	.export		_skeleton_king
	.export		_skeleton_king_animation
	.export		_hero_head_up
	.export		_hero_head_down
	.export		_hero_animation_index
	.export		_hero_animation
	.export		_lightning_0_data
	.export		_lightning_1_data
	.export		_lightning_2_data
	.export		_lightning_3_data
	.export		_lightning_4_data
	.export		_lightning_5_data
	.export		_lightning_6_data
	.export		_lightning_7_data
	.export		_lightning_8_data
	.export		_lightning_9_data
	.export		_lightning_10_data
	.export		_lightning_11_data
	.export		_lightning_animation_index
	.export		_lightning_animation
	.export		_necromancer_idle
	.export		_necromancer_raising1
	.export		_necromancer_raising2
	.export		_necromancer_hit
	.export		_necromancer_animation_index
	.export		_necromancer_animation
	.export		_skeleton_right_still
	.export		_skeleton_right_walk1
	.export		_skeleton_right_walk2
	.export		_skeleton_right_walk3
	.export		_skeleton_right_walk4
	.export		_skeleton_right_turn
	.export		_skeleton_left_still
	.export		_skeleton_left_walk1
	.export		_skeleton_left_walk2
	.export		_skeleton_left_walk3
	.export		_skeleton_left_walk4
	.export		_skeleton_left_turn
	.export		_skeleton_dying_right1
	.export		_skeleton_dying_right2
	.export		_skeleton_dying_right3
	.export		_skeleton_dying_right4
	.export		_skeleton_dying_right5
	.export		_skeleton_dying_right6
	.export		_skeleton_dying_right7
	.export		_skeleton_dying_left1
	.export		_skeleton_dying_left2
	.export		_skeleton_dying_left3
	.export		_skeleton_dying_left4
	.export		_skeleton_dying_left5
	.export		_skeleton_dying_left6
	.export		_skeleton_dying_left7
	.export		_skeleton_animation_index
	.export		_skeleton_animation
	.export		_skull_rotate_left1
	.export		_skull_rotate_left2
	.export		_skull_rotate_left3
	.export		_skull_rotate_left4
	.export		_skull_rotate_left5
	.export		_skull_rotate_left6
	.export		_skull_rotate_right1
	.export		_skull_rotate_right2
	.export		_skull_rotate_right3
	.export		_skull_rotate_right4
	.export		_skull_rotate_right5
	.export		_skull_rotate_right6
	.export		_skull_animation_index
	.export		_skull_animation
	.export		_skull_door
	.export		_skull_door2
	.export		_skull_door3
	.export		_skull_door_animation_index
	.export		_skull_door_animation
	.export		_sorcerer_appear0_left
	.export		_sorcerer_appear1_left
	.export		_sorcerer_appear2_left
	.export		_sorcerer_appear3_left
	.export		_sorcerer_appear4_left
	.export		_sorcerer_appear5_left
	.export		_sorcerer_appear6_left
	.export		_sorcerer_attack0_left
	.export		_sorcerer_attack1_left
	.export		_sorcerer_appear0_right
	.export		_sorcerer_appear1_right
	.export		_sorcerer_appear2_right
	.export		_sorcerer_appear3_right
	.export		_sorcerer_appear4_right
	.export		_sorcerer_appear5_right
	.export		_sorcerer_appear6_right
	.export		_sorcerer_attack0_right
	.export		_sorcerer_attack1_right
	.export		_sorcerer_animation_index
	.export		_sorcerer_animation
	.export		_staff
	.export		_nothing
	.export		_stainedglass_1_data
	.export		_stainedglass_2_data
	.export		_stainedglass_3_data
	.export		_stainedglass_4_data
	.export		_stainedglass_5_data
	.export		_stainedglass_6_data
	.export		_stainedglass_7_data
	.export		_glass_animation_index
	.export		_glass_animation
	.export		_star_0_data
	.export		_star_1_data
	.export		_star_2_data
	.export		_star_3_data
	.export		_star_4_data
	.export		_star_5_data
	.export		_star_6_data
	.export		_star_7_data
	.export		_star_8_data
	.export		_star_9_data
	.export		_stars_animation_index
	.export		_stars_animation
	.export		_villager_beard_idle1
	.export		_villager_beard_idle2
	.export		_villager_beard_idle3
	.export		_villager_beard_face
	.export		_villager_animation_index
	.export		_villager_animation
	.export		_init_paddles
	.export		_init_skull
	.export		_inventory
	.export		_map
	.export		_levels
	.export		_hide_map
	.export		_load_map
	.export		_load_inventory
	.export		_manage_inventory
	.export		_reset_actors
	.export		_cemetery
	.export		_temple
	.export		_temple2
	.export		_temple3
	.export		_temple4
	.export		_story
	.export		_title_screen
	.export		_bombable
	.export		_altar
	.export		_farm
	.export		_town_ruins
	.export		_set_skeleton
	.export		_set_crow
	.export		_set_stars
	.export		_init_level_specifics
	.export		_debug
	.export		_update_health
	.export		_update_xp
	.export		_add_xp
	.export		_show_HUD
	.export		_hide_HUD
	.export		_show_game_over
	.export		_load_black_level
	.export		_load_collision
	.export		_load_level
	.export		_load_title_screen
	.export		_remove_brick
	.export		_first_hit_long
	.export		_first_hit_small
	.export		_hit_brick
	.export		_add_x_speed
	.export		_subtract_x_speed
	.export		_add_y_speed
	.export		_subtract_y_speed
	.export		_has_collision
	.export		_get_collision_type
	.export		_set_collision_data
	.export		_animate
	.export		_get_inactive_actor_index
	.export		_set_projectile_dir_speed
	.export		_move
	.export		_animate_actors
	.export		_skull_was_beside
	.export		_skull_was_above
	.export		_is_skull_collision_paddle
	.export		_is_paddle_collision_skull
	.export		_create_item_at_skull_pos
	.export		_check_enemy_collision
	.export		_move_horizontal_paddle
	.export		_move_vertical_paddle
	.export		_check_paddle_collision
	.export		_check_main_input
	.export		_update_skull
	.export		_draw_paddles
	.export		_move_skull_map
	.export		_fadeout
	.export		_fadein
	.export		_brightout
	.export		_wait_input
	.export		_wait
	.export		_play_normal_level
	.export		_play_story
	.export		_debug_start
	.export		_main

.segment	"DATA"

_exit_inventory:
	.byte	$00
_brightness:
	.byte	$04
_exp:
	.byte	$30,$30,$30,$30,$30,$30,$30,$30,$00
_scarecrow_animation:
	.addr	_scarecrow_data
_pumpkin_animation:
	.addr	_pumpkin_1_data
	.addr	_pumpkin_2_data
	.addr	_pumpkin_3_data
	.addr	_pumpkin_4_data
	.addr	_pumpkin_5_data
	.addr	_pumpkin_6_data
	.addr	_pumpkin_5_data
	.addr	_pumpkin_6_data
	.addr	_pumpkin_7_data
	.addr	_pumpkin_8_data
	.addr	_pumpkin_9_data
	.addr	_pumpkin_5_data
	.addr	_pumpkin_6_data
_trigger_animation:
	.addr	_no_sprite
_level_names:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$00
	.byte	$20,$20,$4F,$6C,$64,$20,$43,$65,$6D,$65,$74,$65,$72,$79,$20,$00
	.byte	$20,$20,$54,$65,$6D,$70,$6C,$65,$20,$52,$75,$69,$6E,$73,$20,$00
	.byte	$20,$54,$65,$6D,$70,$6C,$65,$20,$43,$72,$79,$70,$74,$65,$20,$00
	.byte	$20,$54,$65,$6D,$70,$6C,$65,$20,$4D,$61,$64,$6E,$65,$73,$73,$00
	.byte	$20,$20,$48,$61,$75,$6E,$74,$65,$64,$20,$74,$6F,$77,$6E,$20,$00
	.byte	$20,$54,$68,$61,$72,$73,$68,$20,$42,$72,$69,$64,$67,$65,$20,$00

.segment	"RODATA"

.segment	"STARTUP"
_empty_line:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$00
_dial0001:
	.byte	$57,$68,$65,$72,$65,$2E,$2E,$2E,$20,$00
_dial0002:
	.byte	$57,$68,$65,$72,$65,$20,$61,$6D,$20,$49,$3F,$00
_dial0003:
	.byte	$44,$6F,$20,$6E,$6F,$74,$20,$62,$65,$20,$61,$66,$72,$61,$69,$64
	.byte	$2E,$00
_dial0004:
	.byte	$49,$20,$77,$61,$73,$20,$73,$65,$6E,$74,$20,$74,$6F,$20,$68,$65
	.byte	$6C,$70,$20,$79,$6F,$75,$00
_dial0005:
	.byte	$59,$6F,$75,$20,$61,$72,$65,$20,$61,$62,$6F,$75,$74,$20,$74,$6F
	.byte	$20,$65,$6E,$74,$65,$72,$00
_dial0006:
	.byte	$74,$68,$65,$20,$54,$72,$69,$61,$6C,$20,$6F,$66,$20,$4B,$68,$61
	.byte	$72,$7A,$6F,$69,$64,$21,$00
_dial0007:
	.byte	$59,$6F,$75,$20,$6D,$75,$73,$74,$20,$67,$6F,$20,$62,$61,$63,$6B
	.byte	$20,$74,$6F,$00
_dial0008:
	.byte	$74,$68,$65,$20,$63,$61,$73,$74,$6C,$65,$2C,$20,$61,$6E,$64,$20
	.byte	$64,$65,$66,$65,$61,$74,$00
_dial0009:
	.byte	$74,$68,$69,$73,$20,$65,$76,$69,$6C,$20,$6E,$65,$63,$72,$6F,$6D
	.byte	$61,$6E,$74,$00
_dial0010:
	.byte	$54,$61,$6B,$65,$20,$74,$68,$69,$73,$21,$00
_dial0011:
	.byte	$50,$72,$65,$73,$73,$20,$74,$68,$65,$20,$42,$20,$62,$75,$74,$74
	.byte	$6F,$6E,$2C,$00
_dial0012:
	.byte	$79,$6F,$75,$20,$77,$69,$6C,$6C,$20,$6D,$6F,$76,$65,$20,$74,$6F
	.byte	$77,$61,$72,$64,$00
_dial0013:
	.byte	$74,$68,$65,$20,$62,$6F,$74,$74,$6F,$6D,$20,$70,$61,$64,$64,$6C
	.byte	$65,$00
_dial0014:
	.byte	$48,$69,$74,$20,$61,$6C,$6C,$20,$74,$68,$65,$20,$74,$6F,$6D,$62
	.byte	$73,$74,$6F,$6E,$65,$73,$00
_dial0015:
	.byte	$74,$6F,$20,$67,$65,$74,$20,$6F,$75,$74,$20,$6F,$66,$20,$68,$65
	.byte	$72,$65,$00
_dial0016:
	.byte	$57,$65,$27,$6C,$6C,$20,$6D,$65,$65,$74,$20,$61,$67,$61,$69,$6E
	.byte	$20,$73,$6F,$6F,$6E,$21,$00
_dial0017:
	.byte	$47,$72,$72,$72,$21,$20,$50,$65,$73,$6B,$79,$20,$63,$72,$6F,$77
	.byte	$20,$77,$6F,$6E,$27,$74,$00
_dial0018:
	.byte	$6C,$65,$61,$76,$65,$20,$47,$72,$61,$6B,$6B,$20,$61,$6C,$6F,$6E
	.byte	$65,$2E,$2E,$2E,$00
_dial0019:
	.byte	$47,$6F,$20,$61,$77,$61,$79,$21,$00
_dial0020:
	.byte	$59,$6F,$75,$20,$6E,$6F,$74,$20,$70,$65,$73,$6B,$79,$20,$63,$72
	.byte	$6F,$77,$3F,$00
_dial0021:
	.byte	$4F,$6B,$20,$74,$68,$65,$6E,$2C,$00
_dial0022:
	.byte	$54,$61,$6B,$65,$20,$74,$68,$69,$73,$20,$00
_dial0023:
	.byte	$54,$68,$69,$73,$20,$69,$73,$20,$67,$69,$66,$74,$00
_dial0024:
	.byte	$66,$6F,$72,$20,$70,$65,$73,$6B,$79,$20,$63,$72,$6F,$77,$21,$00
_dial0025:
	.byte	$50,$6C,$61,$6E,$74,$20,$69,$74,$20,$69,$6E,$20,$66,$69,$65,$6C
	.byte	$64,$20,$61,$62,$6F,$76,$65,$00
_black_level:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$C2
	.byte	$FF
	.byte	$01
	.byte	$37
	.byte	$0F
	.byte	$01
	.byte	$06
	.byte	$0F
	.byte	$01
	.byte	$00
_pal_map:
	.byte	$0F
	.byte	$18
	.byte	$16
	.byte	$38
	.byte	$0F
	.byte	$04
	.byte	$16
	.byte	$28
	.byte	$0F
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$23
	.byte	$2A
	.byte	$00
_pal_title:
	.byte	$0F
	.byte	$37
	.byte	$23
	.byte	$17
	.byte	$0F
	.byte	$23
	.byte	$13
	.byte	$06
	.byte	$0F
	.byte	$13
	.byte	$22
	.byte	$06
	.byte	$0F
	.byte	$07
	.byte	$13
	.byte	$06
_pal_cemetery_bg:
	.byte	$0F
	.byte	$00
	.byte	$3D
	.byte	$08
	.byte	$0F
	.byte	$08
	.byte	$18
	.byte	$22
	.byte	$0F
	.byte	$00
	.byte	$18
	.byte	$10
	.byte	$0F
	.byte	$03
	.byte	$15
	.byte	$30
_pal_cemetery_spr:
	.byte	$0F
	.byte	$03
	.byte	$15
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$0F
	.byte	$38
	.byte	$0F
	.byte	$17
	.byte	$06
	.byte	$07
	.byte	$0F
	.byte	$04
	.byte	$23
	.byte	$0C
_pal_altar_bg:
	.byte	$01
	.byte	$0F
	.byte	$00
	.byte	$22
	.byte	$01
	.byte	$11
	.byte	$3D
	.byte	$22
	.byte	$01
	.byte	$0F
	.byte	$37
	.byte	$28
	.byte	$01
	.byte	$0F
	.byte	$07
	.byte	$11
_pal_altar_spr:
	.byte	$0F
	.byte	$03
	.byte	$15
	.byte	$30
	.byte	$10
	.byte	$05
	.byte	$0C
	.byte	$27
	.byte	$10
	.byte	$17
	.byte	$08
	.byte	$36
	.byte	$10
	.byte	$09
	.byte	$19
	.byte	$29
_pal_altar_lightning:
	.byte	$0F
	.byte	$03
	.byte	$15
	.byte	$30
	.byte	$10
	.byte	$05
	.byte	$0C
	.byte	$27
	.byte	$10
	.byte	$21
	.byte	$31
	.byte	$30
	.byte	$10
	.byte	$09
	.byte	$19
	.byte	$29
_pal_temple_bg:
	.byte	$0F
	.byte	$0C
	.byte	$28
	.byte	$31
	.byte	$0F
	.byte	$0C
	.byte	$13
	.byte	$10
	.byte	$0F
	.byte	$0C
	.byte	$05
	.byte	$33
	.byte	$0F
	.byte	$03
	.byte	$15
	.byte	$30
_pal_temple_spr:
	.byte	$0F
	.byte	$03
	.byte	$15
	.byte	$30
	.byte	$10
	.byte	$01
	.byte	$19
	.byte	$26
	.byte	$10
	.byte	$08
	.byte	$28
	.byte	$22
	.byte	$10
	.byte	$08
	.byte	$18
	.byte	$28
_pal_temple_spr2:
	.byte	$0F
	.byte	$03
	.byte	$15
	.byte	$30
	.byte	$10
	.byte	$05
	.byte	$25
	.byte	$28
	.byte	$10
	.byte	$08
	.byte	$28
	.byte	$22
	.byte	$10
	.byte	$08
	.byte	$18
	.byte	$28
_pal_town_bg:
	.byte	$0F
	.byte	$03
	.byte	$15
	.byte	$30
	.byte	$0F
	.byte	$12
	.byte	$22
	.byte	$28
	.byte	$0F
	.byte	$18
	.byte	$28
	.byte	$38
	.byte	$0F
	.byte	$18
	.byte	$00
	.byte	$10
_pal_town_bg2:
	.byte	$0F
	.byte	$03
	.byte	$15
	.byte	$30
	.byte	$0F
	.byte	$0C
	.byte	$22
	.byte	$28
	.byte	$0F
	.byte	$18
	.byte	$28
	.byte	$38
	.byte	$0F
	.byte	$28
	.byte	$15
	.byte	$30
_pal_town_spr:
	.byte	$0F
	.byte	$03
	.byte	$15
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$17
	.byte	$28
	.byte	$0F
	.byte	$0F
	.byte	$16
	.byte	$30
	.byte	$0F
	.byte	$04
	.byte	$23
	.byte	$0C
_pal_town_spr2:
	.byte	$0F
	.byte	$03
	.byte	$15
	.byte	$30
	.byte	$0F
	.byte	$00
	.byte	$0F
	.byte	$38
	.byte	$0F
	.byte	$17
	.byte	$0C
	.byte	$05
	.byte	$0F
	.byte	$04
	.byte	$23
	.byte	$0C
_paddle_hit_zones:
	.byte	$03
	.byte	$06
	.byte	$0B
	.byte	$0E
	.byte	$04
	.byte	$0A
	.byte	$16
	.byte	$1C
.segment	"BANK0"
_cemetery_col:
	.byte	$A3
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$0C
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$0C
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$23
	.byte	$01
	.byte	$FF
_temple_col:
	.byte	$A3
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$0A
	.byte	$05
	.byte	$04
	.byte	$00
	.byte	$0A
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$0A
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$0A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$0A
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$0A
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$0A
	.byte	$03
	.byte	$04
	.byte	$00
	.byte	$0A
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$0C
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$0C
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$1A
	.byte	$00
	.byte	$09
	.byte	$01
	.byte	$14
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$FF
_temple2_col:
	.byte	$46
	.byte	$01
	.byte	$14
	.byte	$02
	.byte	$0C
	.byte	$01
	.byte	$14
	.byte	$03
	.byte	$0C
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$0C
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$0C
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$0C
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$0C
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$0C
	.byte	$01
	.byte	$14
	.byte	$03
	.byte	$0C
	.byte	$01
	.byte	$14
	.byte	$02
	.byte	$26
	.byte	$01
	.byte	$FF
_temple3_col:
	.byte	$4D
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$11
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$06
	.byte	$03
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$0E
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$0C
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0C
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0C
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0C
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0C
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0C
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0C
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$0C
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$0E
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$08
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$16
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$08
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$14
	.byte	$03
	.byte	$02
	.byte	$05
	.byte	$44
	.byte	$01
	.byte	$FF
_temple4_col:
	.byte	$4D
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$11
	.byte	$01
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$06
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$09
	.byte	$01
	.byte	$01
	.byte	$06
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$14
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$12
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$14
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$14
	.byte	$09
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$01
	.byte	$18
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$FF
_town_col:
	.byte	$0A
	.byte	$01
	.byte	$12
	.byte	$00
	.byte	$16
	.byte	$01
	.byte	$0A
	.byte	$00
	.byte	$16
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$5C
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$1C
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$14
	.byte	$01
	.byte	$0C
	.byte	$00
	.byte	$14
	.byte	$01
	.byte	$0C
	.byte	$00
	.byte	$0C
	.byte	$01
	.byte	$0C
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$0E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$0C
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$0E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$09
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$0D
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$0C
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$04
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$1E
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$1E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$1C
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$FF
_farm_col:
	.byte	$22
	.byte	$01
	.byte	$12
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$12
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0F
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0F
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$0F
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$12
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$04
	.byte	$00
	.byte	$0C
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$06
	.byte	$0A
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$0C
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$11
	.byte	$00
	.byte	$0C
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$11
	.byte	$00
	.byte	$0C
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$09
	.byte	$02
	.byte	$0C
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$09
	.byte	$00
	.byte	$0C
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$0E
	.byte	$00
	.byte	$0C
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$0E
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$06
	.byte	$0A
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$14
	.byte	$00
	.byte	$06
	.byte	$0A
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$01
	.byte	$1C
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$18
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$FF
_bombable_test:
	.byte	$22
	.byte	$01
	.byte	$1B
	.byte	$02
	.byte	$05
	.byte	$01
	.byte	$1B
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$1B
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$1B
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$12
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$12
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$0E
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$0E
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$0A
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$0A
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$0A
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$0A
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$0E
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$0E
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$06
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$0A
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$16
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$16
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$1B
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$1B
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$1B
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$1B
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$FF
_no_sprite:
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$00
	.byte	$80
_angelic_idle1:
	.byte	$00
	.byte	$00
	.byte	$93
	.byte	$03
	.byte	$07
	.byte	$00
	.byte	$93
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$82
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$83
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$80
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$81
	.byte	$03
	.byte	$80
_angelic_idle2:
	.byte	$00
	.byte	$01
	.byte	$93
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$93
	.byte	$43
	.byte	$00
	.byte	$09
	.byte	$82
	.byte	$03
	.byte	$08
	.byte	$09
	.byte	$83
	.byte	$03
	.byte	$00
	.byte	$11
	.byte	$80
	.byte	$03
	.byte	$08
	.byte	$11
	.byte	$81
	.byte	$03
	.byte	$80
_angelic_idle3:
	.byte	$00
	.byte	$02
	.byte	$93
	.byte	$03
	.byte	$07
	.byte	$02
	.byte	$93
	.byte	$43
	.byte	$00
	.byte	$0A
	.byte	$82
	.byte	$03
	.byte	$08
	.byte	$0A
	.byte	$83
	.byte	$03
	.byte	$00
	.byte	$12
	.byte	$80
	.byte	$03
	.byte	$08
	.byte	$12
	.byte	$81
	.byte	$03
	.byte	$80
_angelic_face:
	.byte	$FE
	.byte	$0C
	.byte	$92
	.byte	$03
	.byte	$06
	.byte	$00
	.byte	$90
	.byte	$03
	.byte	$0E
	.byte	$00
	.byte	$91
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$A0
	.byte	$03
	.byte	$0E
	.byte	$08
	.byte	$A1
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$A3
	.byte	$03
	.byte	$06
	.byte	$10
	.byte	$B0
	.byte	$03
	.byte	$0E
	.byte	$12
	.byte	$B1
	.byte	$03
	.byte	$0E
	.byte	$10
	.byte	$B2
	.byte	$03
	.byte	$16
	.byte	$0F
	.byte	$B3
	.byte	$03
	.byte	$16
	.byte	$08
	.byte	$A2
	.byte	$03
	.byte	$80
_angelic_animation_index:
	.byte	$00
	.byte	$06
_angelic_animation:
	.addr	_angelic_idle1
	.addr	_angelic_idle2
	.addr	_angelic_idle3
	.addr	_angelic_idle3
	.addr	_angelic_idle2
	.addr	_angelic_idle1
_bomb_0a_data:
	.byte	$FC
	.byte	$FC
	.byte	$20
	.byte	$00
	.byte	$80
_bomb_0b_data:
	.byte	$FC
	.byte	$FC
	.byte	$20
	.byte	$01
	.byte	$80
_bomb_0c_data:
	.byte	$FC
	.byte	$FC
	.byte	$20
	.byte	$02
	.byte	$80
_bomb_1_data:
	.byte	$F8
	.byte	$F8
	.byte	$D4
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$D4
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$D4
	.byte	$C0
	.byte	$F8
	.byte	$00
	.byte	$D4
	.byte	$80
	.byte	$80
_bomb_2_data:
	.byte	$F4
	.byte	$F4
	.byte	$D4
	.byte	$00
	.byte	$FC
	.byte	$06
	.byte	$F4
	.byte	$80
	.byte	$04
	.byte	$F3
	.byte	$D4
	.byte	$40
	.byte	$F2
	.byte	$FC
	.byte	$E4
	.byte	$00
	.byte	$06
	.byte	$FC
	.byte	$E4
	.byte	$40
	.byte	$FC
	.byte	$F2
	.byte	$F4
	.byte	$00
	.byte	$F4
	.byte	$04
	.byte	$D4
	.byte	$80
	.byte	$04
	.byte	$04
	.byte	$D4
	.byte	$C0
	.byte	$FC
	.byte	$FC
	.byte	$E5
	.byte	$00
	.byte	$80
_bomb_3_data:
	.byte	$F0
	.byte	$F4
	.byte	$D4
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$F4
	.byte	$80
	.byte	$08
	.byte	$F4
	.byte	$D4
	.byte	$40
	.byte	$EE
	.byte	$FD
	.byte	$E4
	.byte	$00
	.byte	$0A
	.byte	$FD
	.byte	$E4
	.byte	$40
	.byte	$F8
	.byte	$F0
	.byte	$F4
	.byte	$00
	.byte	$F0
	.byte	$06
	.byte	$D4
	.byte	$80
	.byte	$08
	.byte	$06
	.byte	$D4
	.byte	$C0
	.byte	$00
	.byte	$F0
	.byte	$D5
	.byte	$00
	.byte	$F8
	.byte	$0A
	.byte	$D5
	.byte	$C0
	.byte	$80
_bomb_4_data:
	.byte	$F0
	.byte	$F3
	.byte	$E5
	.byte	$00
	.byte	$09
	.byte	$F3
	.byte	$E5
	.byte	$40
	.byte	$EB
	.byte	$FD
	.byte	$E5
	.byte	$00
	.byte	$0D
	.byte	$FD
	.byte	$E5
	.byte	$40
	.byte	$FC
	.byte	$ED
	.byte	$E5
	.byte	$00
	.byte	$EF
	.byte	$07
	.byte	$E5
	.byte	$80
	.byte	$07
	.byte	$07
	.byte	$E5
	.byte	$C0
	.byte	$FC
	.byte	$0C
	.byte	$E5
	.byte	$C0
	.byte	$80
_bomb_5_data:
	.byte	$EF
	.byte	$F2
	.byte	$F5
	.byte	$00
	.byte	$0A
	.byte	$F2
	.byte	$F5
	.byte	$40
	.byte	$EA
	.byte	$FD
	.byte	$F5
	.byte	$00
	.byte	$0E
	.byte	$FD
	.byte	$F5
	.byte	$40
	.byte	$FC
	.byte	$EC
	.byte	$F5
	.byte	$00
	.byte	$EE
	.byte	$08
	.byte	$F5
	.byte	$80
	.byte	$08
	.byte	$08
	.byte	$F5
	.byte	$C0
	.byte	$FC
	.byte	$0D
	.byte	$F5
	.byte	$C0
	.byte	$80
_bomb_animation_index:
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$05
	.byte	$08
	.byte	$01
_bomb_animation:
	.addr	_bomb_0a_data
	.addr	_bomb_0b_data
	.addr	_bomb_0c_data
	.addr	_bomb_1_data
	.addr	_bomb_2_data
	.addr	_bomb_3_data
	.addr	_bomb_4_data
	.addr	_bomb_5_data
	.addr	_no_sprite
_crow_left_idle:
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$41
	.byte	$00
	.byte	$05
	.byte	$25
	.byte	$01
	.byte	$08
	.byte	$05
	.byte	$26
	.byte	$01
	.byte	$80
_crow_right_idle:
	.byte	$08
	.byte	$01
	.byte	$22
	.byte	$01
	.byte	$08
	.byte	$06
	.byte	$25
	.byte	$41
	.byte	$00
	.byte	$06
	.byte	$26
	.byte	$41
	.byte	$80
_crow_left_skwak:
	.byte	$FE
	.byte	$01
	.byte	$21
	.byte	$01
	.byte	$00
	.byte	$05
	.byte	$23
	.byte	$01
	.byte	$08
	.byte	$05
	.byte	$24
	.byte	$01
	.byte	$80
_crow_right_skwak:
	.byte	$0A
	.byte	$02
	.byte	$21
	.byte	$41
	.byte	$08
	.byte	$06
	.byte	$23
	.byte	$41
	.byte	$00
	.byte	$06
	.byte	$24
	.byte	$41
	.byte	$80
_crow_left_fly1:
	.byte	$00
	.byte	$06
	.byte	$27
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$28
	.byte	$01
	.byte	$06
	.byte	$FF
	.byte	$29
	.byte	$01
	.byte	$FD
	.byte	$02
	.byte	$22
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$41
	.byte	$80
_crow_right_fly1:
	.byte	$02
	.byte	$FF
	.byte	$29
	.byte	$41
	.byte	$08
	.byte	$06
	.byte	$27
	.byte	$41
	.byte	$01
	.byte	$06
	.byte	$28
	.byte	$41
	.byte	$0B
	.byte	$02
	.byte	$22
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$29
	.byte	$01
	.byte	$80
_crow_left_fly2:
	.byte	$00
	.byte	$06
	.byte	$27
	.byte	$01
	.byte	$08
	.byte	$06
	.byte	$28
	.byte	$01
	.byte	$FD
	.byte	$01
	.byte	$22
	.byte	$41
	.byte	$06
	.byte	$07
	.byte	$29
	.byte	$81
	.byte	$02
	.byte	$05
	.byte	$29
	.byte	$C1
	.byte	$80
_crow_right_fly2:
	.byte	$08
	.byte	$06
	.byte	$27
	.byte	$41
	.byte	$00
	.byte	$06
	.byte	$28
	.byte	$41
	.byte	$0B
	.byte	$01
	.byte	$22
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$29
	.byte	$C1
	.byte	$06
	.byte	$05
	.byte	$29
	.byte	$81
	.byte	$80
_crow_left_eat:
	.byte	$01
	.byte	$07
	.byte	$20
	.byte	$41
	.byte	$00
	.byte	$05
	.byte	$23
	.byte	$01
	.byte	$08
	.byte	$05
	.byte	$24
	.byte	$01
	.byte	$80
_crow_right_eat:
	.byte	$07
	.byte	$07
	.byte	$20
	.byte	$01
	.byte	$08
	.byte	$05
	.byte	$23
	.byte	$41
	.byte	$00
	.byte	$05
	.byte	$24
	.byte	$41
	.byte	$80
_crow_animation_index:
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$00
	.byte	$02
_crow_animation:
	.addr	_crow_left_fly1
	.addr	_crow_left_fly2
	.addr	_crow_right_fly1
	.addr	_crow_right_fly2
	.addr	_crow_left_skwak
	.addr	_crow_right_skwak
	.addr	_crow_left_idle
	.addr	_crow_right_idle
	.addr	_crow_left_skwak
	.addr	_crow_left_eat
	.addr	_crow_right_skwak
	.addr	_crow_right_eat
_cursor_0_data:
	.byte	$05
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$14
	.byte	$04
	.byte	$08
	.byte	$40
	.byte	$05
	.byte	$14
	.byte	$08
	.byte	$80
	.byte	$14
	.byte	$14
	.byte	$08
	.byte	$C0
	.byte	$80
_cursor_1_data:
	.byte	$06
	.byte	$05
	.byte	$08
	.byte	$00
	.byte	$13
	.byte	$05
	.byte	$08
	.byte	$40
	.byte	$06
	.byte	$13
	.byte	$08
	.byte	$80
	.byte	$13
	.byte	$13
	.byte	$08
	.byte	$C0
	.byte	$80
_cursor_2_data:
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$35
	.byte	$03
	.byte	$08
	.byte	$40
	.byte	$03
	.byte	$1D
	.byte	$08
	.byte	$80
	.byte	$35
	.byte	$1D
	.byte	$08
	.byte	$C0
	.byte	$80
_cursor_3_data:
	.byte	$04
	.byte	$04
	.byte	$08
	.byte	$00
	.byte	$34
	.byte	$04
	.byte	$08
	.byte	$40
	.byte	$04
	.byte	$1C
	.byte	$08
	.byte	$80
	.byte	$34
	.byte	$1C
	.byte	$08
	.byte	$C0
	.byte	$80
_cursor_animation_index:
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
_cursor_animation:
	.addr	_cursor_0_data
	.addr	_cursor_1_data
	.addr	_cursor_2_data
	.addr	_cursor_3_data
_devil_8_data:
	.byte	$00
	.byte	$FF
	.byte	$84
	.byte	$02
	.byte	$05
	.byte	$07
	.byte	$88
	.byte	$02
	.byte	$00
	.byte	$06
	.byte	$85
	.byte	$02
	.byte	$00
	.byte	$0C
	.byte	$86
	.byte	$02
	.byte	$F9
	.byte	$0A
	.byte	$87
	.byte	$02
	.byte	$80
_devil_9_data:
	.byte	$00
	.byte	$FE
	.byte	$84
	.byte	$02
	.byte	$05
	.byte	$07
	.byte	$88
	.byte	$02
	.byte	$00
	.byte	$06
	.byte	$85
	.byte	$02
	.byte	$00
	.byte	$0C
	.byte	$86
	.byte	$02
	.byte	$F9
	.byte	$0A
	.byte	$87
	.byte	$02
	.byte	$80
_devil_10_data:
	.byte	$00
	.byte	$FD
	.byte	$84
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$88
	.byte	$02
	.byte	$00
	.byte	$0C
	.byte	$86
	.byte	$02
	.byte	$F9
	.byte	$09
	.byte	$87
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$85
	.byte	$02
	.byte	$80
_devil_attack:
	.byte	$00
	.byte	$FD
	.byte	$84
	.byte	$02
	.byte	$08
	.byte	$06
	.byte	$88
	.byte	$02
	.byte	$01
	.byte	$05
	.byte	$89
	.byte	$02
	.byte	$00
	.byte	$0C
	.byte	$86
	.byte	$02
	.byte	$F9
	.byte	$09
	.byte	$87
	.byte	$02
	.byte	$00
	.byte	$05
	.byte	$85
	.byte	$02
	.byte	$80
_grakk_face:
	.byte	$00
	.byte	$00
	.byte	$D6
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$D7
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$E7
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$E6
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F6
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$F7
	.byte	$00
	.byte	$80
_grakk:
	.byte	$00
	.byte	$00
	.byte	$84
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$78
	.byte	$00
	.byte	$FA
	.byte	$0A
	.byte	$87
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$77
	.byte	$00
	.byte	$06
	.byte	$05
	.byte	$12
	.byte	$C0
	.byte	$80
_devil_animation_index:
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$05
_devil_animation:
	.addr	_devil_8_data
	.addr	_devil_9_data
	.addr	_devil_10_data
	.addr	_devil_9_data
	.addr	_devil_8_data
	.addr	_devil_attack
_house_door_idle:
	.byte	$06
	.byte	$05
	.byte	$5A
	.byte	$01
	.byte	$06
	.byte	$0D
	.byte	$6A
	.byte	$01
	.byte	$06
	.byte	$15
	.byte	$7A
	.byte	$01
	.byte	$80
_house_door_open1:
	.byte	$06
	.byte	$05
	.byte	$5B
	.byte	$01
	.byte	$06
	.byte	$0D
	.byte	$7B
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$7B
	.byte	$C1
	.byte	$80
_house_door_open2:
	.byte	$00
	.byte	$06
	.byte	$53
	.byte	$01
	.byte	$00
	.byte	$0C
	.byte	$53
	.byte	$01
	.byte	$06
	.byte	$10
	.byte	$53
	.byte	$C1
	.byte	$80
_house_door_animation_index:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$01
_house_door_animation:
	.addr	_house_door_idle
	.addr	_house_door_open1
	.addr	_house_door_open2
	.addr	_no_sprite
_scarecrow_data:
	.byte	$09
	.byte	$FD
	.byte	$8E
	.byte	$02
	.byte	$11
	.byte	$FD
	.byte	$8F
	.byte	$02
	.byte	$04
	.byte	$05
	.byte	$9E
	.byte	$02
	.byte	$0C
	.byte	$05
	.byte	$9F
	.byte	$02
	.byte	$04
	.byte	$0D
	.byte	$AE
	.byte	$02
	.byte	$0C
	.byte	$0D
	.byte	$AF
	.byte	$02
	.byte	$14
	.byte	$0A
	.byte	$BE
	.byte	$02
	.byte	$0B
	.byte	$15
	.byte	$BF
	.byte	$02
	.byte	$80
_pumpkin_1_data:
	.byte	$00
	.byte	$FD
	.byte	$39
	.byte	$02
	.byte	$FE
	.byte	$FF
	.byte	$8A
	.byte	$42
	.byte	$04
	.byte	$FF
	.byte	$8A
	.byte	$02
	.byte	$80
_pumpkin_2_data:
	.byte	$05
	.byte	$FF
	.byte	$8A
	.byte	$02
	.byte	$FD
	.byte	$FF
	.byte	$8A
	.byte	$42
	.byte	$01
	.byte	$FF
	.byte	$F4
	.byte	$02
	.byte	$80
_pumpkin_3_data:
	.byte	$FA
	.byte	$FE
	.byte	$C7
	.byte	$02
	.byte	$06
	.byte	$FE
	.byte	$C7
	.byte	$42
	.byte	$02
	.byte	$FF
	.byte	$8A
	.byte	$02
	.byte	$02
	.byte	$FE
	.byte	$D5
	.byte	$02
	.byte	$FF
	.byte	$FF
	.byte	$48
	.byte	$02
	.byte	$80
_pumpkin_4_data:
	.byte	$F8
	.byte	$FE
	.byte	$C7
	.byte	$02
	.byte	$0A
	.byte	$FE
	.byte	$C6
	.byte	$02
	.byte	$FF
	.byte	$FE
	.byte	$C3
	.byte	$02
	.byte	$03
	.byte	$FE
	.byte	$C4
	.byte	$02
	.byte	$04
	.byte	$F8
	.byte	$C2
	.byte	$02
	.byte	$FE
	.byte	$F8
	.byte	$C1
	.byte	$02
	.byte	$80
_pumpkin_5_data:
	.byte	$F4
	.byte	$FE
	.byte	$C5
	.byte	$02
	.byte	$0C
	.byte	$FE
	.byte	$C6
	.byte	$02
	.byte	$FC
	.byte	$FE
	.byte	$C3
	.byte	$02
	.byte	$04
	.byte	$FE
	.byte	$C4
	.byte	$02
	.byte	$FC
	.byte	$F6
	.byte	$C1
	.byte	$02
	.byte	$04
	.byte	$F6
	.byte	$C2
	.byte	$02
	.byte	$80
_pumpkin_6_data:
	.byte	$F5
	.byte	$FE
	.byte	$C5
	.byte	$02
	.byte	$0B
	.byte	$FE
	.byte	$C6
	.byte	$02
	.byte	$FC
	.byte	$FE
	.byte	$C3
	.byte	$02
	.byte	$04
	.byte	$FE
	.byte	$C4
	.byte	$02
	.byte	$FC
	.byte	$F7
	.byte	$C1
	.byte	$02
	.byte	$04
	.byte	$F7
	.byte	$C2
	.byte	$02
	.byte	$80
_pumpkin_7_data:
	.byte	$F4
	.byte	$FE
	.byte	$C5
	.byte	$02
	.byte	$0C
	.byte	$FE
	.byte	$C6
	.byte	$02
	.byte	$FC
	.byte	$FE
	.byte	$C3
	.byte	$02
	.byte	$04
	.byte	$FE
	.byte	$C4
	.byte	$02
	.byte	$FD
	.byte	$F3
	.byte	$C1
	.byte	$02
	.byte	$04
	.byte	$F3
	.byte	$C2
	.byte	$02
	.byte	$FC
	.byte	$FA
	.byte	$E5
	.byte	$00
	.byte	$03
	.byte	$FA
	.byte	$E5
	.byte	$40
	.byte	$80
_pumpkin_8_data:
	.byte	$F4
	.byte	$FE
	.byte	$C5
	.byte	$02
	.byte	$0C
	.byte	$FE
	.byte	$C6
	.byte	$02
	.byte	$FC
	.byte	$FF
	.byte	$C3
	.byte	$02
	.byte	$04
	.byte	$FF
	.byte	$C4
	.byte	$02
	.byte	$FD
	.byte	$EE
	.byte	$C1
	.byte	$02
	.byte	$05
	.byte	$EE
	.byte	$C2
	.byte	$02
	.byte	$FC
	.byte	$FB
	.byte	$E5
	.byte	$00
	.byte	$03
	.byte	$FB
	.byte	$E5
	.byte	$40
	.byte	$01
	.byte	$F1
	.byte	$E5
	.byte	$00
	.byte	$02
	.byte	$F5
	.byte	$7C
	.byte	$00
	.byte	$80
_pumpkin_9_data:
	.byte	$F4
	.byte	$FE
	.byte	$C5
	.byte	$02
	.byte	$0C
	.byte	$FE
	.byte	$C6
	.byte	$02
	.byte	$FC
	.byte	$FF
	.byte	$C3
	.byte	$02
	.byte	$04
	.byte	$FF
	.byte	$C4
	.byte	$02
	.byte	$FD
	.byte	$EB
	.byte	$C1
	.byte	$02
	.byte	$05
	.byte	$EB
	.byte	$C2
	.byte	$02
	.byte	$FC
	.byte	$FB
	.byte	$E5
	.byte	$00
	.byte	$03
	.byte	$FB
	.byte	$E5
	.byte	$40
	.byte	$01
	.byte	$F1
	.byte	$E5
	.byte	$00
	.byte	$01
	.byte	$F4
	.byte	$7C
	.byte	$00
	.byte	$80
_pumpkin_animation_index:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$01
	.byte	$06
	.byte	$01
	.byte	$06
	.byte	$01
	.byte	$07
	.byte	$04
	.byte	$0B
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$06
	.byte	$01
_fireball1:
	.byte	$00
	.byte	$00
	.byte	$AD
	.byte	$00
	.byte	$80
_fireball2:
	.byte	$00
	.byte	$00
	.byte	$AC
	.byte	$00
	.byte	$80
_fireball3:
	.byte	$00
	.byte	$00
	.byte	$BC
	.byte	$00
	.byte	$80
_fireball1_right:
	.byte	$00
	.byte	$00
	.byte	$AD
	.byte	$40
	.byte	$80
_fireball2_right:
	.byte	$00
	.byte	$00
	.byte	$AC
	.byte	$40
	.byte	$80
_fireball3_right:
	.byte	$00
	.byte	$00
	.byte	$BC
	.byte	$40
	.byte	$80
_fireball_appear1:
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$00
	.byte	$80
_fireball_appear2:
	.byte	$00
	.byte	$00
	.byte	$BD
	.byte	$00
	.byte	$80
_fireball_animation_index:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$06
	.byte	$03
_fireball_animation:
	.addr	_no_sprite
	.addr	_no_sprite
	.addr	_fireball_appear1
	.addr	_fireball_appear2
	.addr	_fireball_appear1
	.addr	_fireball_appear2
	.addr	_fireball1
	.addr	_fireball2
	.addr	_fireball3
	.addr	_fireball1_right
	.addr	_fireball2_right
	.addr	_fireball3_right
_HorizontalPaddleSpr:
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$80
_VerticalPaddleSpr:
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$06
	.byte	$00
	.byte	$80
_HorizontalPaddleSpr_short:
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$80
_VerticalPaddleSpr_short:
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$06
	.byte	$00
	.byte	$80
_tree:
	.byte	$F6
	.byte	$DF
	.byte	$0C
	.byte	$02
	.byte	$F6
	.byte	$E7
	.byte	$1C
	.byte	$02
	.byte	$EE
	.byte	$E7
	.byte	$1B
	.byte	$02
	.byte	$E6
	.byte	$E7
	.byte	$1A
	.byte	$02
	.byte	$0E
	.byte	$E7
	.byte	$1F
	.byte	$02
	.byte	$F6
	.byte	$EF
	.byte	$2C
	.byte	$02
	.byte	$FE
	.byte	$EF
	.byte	$2D
	.byte	$02
	.byte	$06
	.byte	$EF
	.byte	$2E
	.byte	$02
	.byte	$0E
	.byte	$EF
	.byte	$2F
	.byte	$02
	.byte	$F6
	.byte	$F7
	.byte	$3C
	.byte	$02
	.byte	$FE
	.byte	$F7
	.byte	$3D
	.byte	$02
	.byte	$06
	.byte	$F7
	.byte	$3E
	.byte	$02
	.byte	$F6
	.byte	$FF
	.byte	$4C
	.byte	$02
	.byte	$FE
	.byte	$FF
	.byte	$4D
	.byte	$02
	.byte	$06
	.byte	$FF
	.byte	$4E
	.byte	$02
	.byte	$0E
	.byte	$FF
	.byte	$4F
	.byte	$02
	.byte	$F6
	.byte	$07
	.byte	$5C
	.byte	$02
	.byte	$FE
	.byte	$07
	.byte	$5D
	.byte	$02
	.byte	$06
	.byte	$07
	.byte	$3C
	.byte	$42
	.byte	$FE
	.byte	$E7
	.byte	$1D
	.byte	$02
	.byte	$EE
	.byte	$0F
	.byte	$6B
	.byte	$02
	.byte	$F6
	.byte	$0F
	.byte	$6C
	.byte	$02
	.byte	$FE
	.byte	$0F
	.byte	$6D
	.byte	$02
	.byte	$06
	.byte	$0F
	.byte	$6E
	.byte	$02
	.byte	$80
_tree_animation:
	.addr	_tree
_gate0:
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$30
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$40
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$50
	.byte	$01
	.byte	$80
_gate1:
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$41
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$30
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$40
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$50
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$46
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$46
	.byte	$41
	.byte	$80
_gate2:
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$41
	.byte	$41
	.byte	$00
	.byte	$10
	.byte	$51
	.byte	$41
	.byte	$00
	.byte	$18
	.byte	$61
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$31
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$41
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$51
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$61
	.byte	$01
	.byte	$80
_gate3:
	.byte	$00
	.byte	$00
	.byte	$32
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$42
	.byte	$41
	.byte	$00
	.byte	$10
	.byte	$52
	.byte	$41
	.byte	$00
	.byte	$18
	.byte	$62
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$32
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$42
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$52
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$62
	.byte	$01
	.byte	$80
_gate4:
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$43
	.byte	$41
	.byte	$00
	.byte	$10
	.byte	$43
	.byte	$41
	.byte	$00
	.byte	$18
	.byte	$53
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$33
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$43
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$43
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$53
	.byte	$01
	.byte	$80
_torch_flicker1:
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$01
	.byte	$80
_torch_flicker2:
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$01
	.byte	$80
_torch_flicker3:
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$01
	.byte	$80
_torch_flicker4:
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$01
	.byte	$80
_torch_animation_index:
	.byte	$00
	.byte	$04
_torch_animation:
	.addr	_torch_flicker1
	.addr	_torch_flicker2
	.addr	_torch_flicker3
	.addr	_torch_flicker4
_gate_animation_index:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$01
_gate_animation:
	.addr	_gate0
	.addr	_gate1
	.addr	_gate2
	.addr	_gate3
	.addr	_gate4
_skull_pile:
	.byte	$00
	.byte	$00
	.byte	$39
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$3A
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$3B
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$4A
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$4B
	.byte	$03
	.byte	$80
_skull_pile_animation:
	.addr	_skull_pile
_crate_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$0E
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$0F
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$1E
	.byte	$01
	.byte	$80
_crate_animation:
	.addr	_crate_data
_skeleton_king:
	.byte	$00
	.byte	$00
	.byte	$8B
	.byte	$01
	.byte	$03
	.byte	$07
	.byte	$77
	.byte	$41
	.byte	$05
	.byte	$0F
	.byte	$77
	.byte	$41
	.byte	$07
	.byte	$17
	.byte	$77
	.byte	$41
	.byte	$08
	.byte	$01
	.byte	$8A
	.byte	$01
	.byte	$07
	.byte	$0D
	.byte	$7C
	.byte	$01
	.byte	$0F
	.byte	$0D
	.byte	$7D
	.byte	$01
	.byte	$07
	.byte	$15
	.byte	$8C
	.byte	$01
	.byte	$0F
	.byte	$15
	.byte	$8D
	.byte	$01
	.byte	$80
_skeleton_king_animation:
	.addr	_skeleton_king
_hero_head_up:
	.byte	$05
	.byte	$03
	.byte	$35
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$44
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$45
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$55
	.byte	$02
	.byte	$09
	.byte	$00
	.byte	$34
	.byte	$42
	.byte	$80
_hero_head_down:
	.byte	$05
	.byte	$04
	.byte	$36
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$44
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$45
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$55
	.byte	$02
	.byte	$09
	.byte	$00
	.byte	$34
	.byte	$42
	.byte	$80
_hero_animation_index:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_hero_animation:
	.addr	_hero_head_up
	.addr	_hero_head_down
	.addr	_hero_head_down
_lightning_0_data:
	.byte	$F1
	.byte	$DE
	.byte	$C0
	.byte	$02
	.byte	$F9
	.byte	$DE
	.byte	$C1
	.byte	$02
	.byte	$01
	.byte	$DE
	.byte	$C2
	.byte	$02
	.byte	$09
	.byte	$DE
	.byte	$C3
	.byte	$02
	.byte	$01
	.byte	$D6
	.byte	$C4
	.byte	$02
	.byte	$09
	.byte	$D6
	.byte	$C5
	.byte	$02
	.byte	$80
_lightning_1_data:
	.byte	$EF
	.byte	$D8
	.byte	$C6
	.byte	$02
	.byte	$F7
	.byte	$D8
	.byte	$C7
	.byte	$02
	.byte	$FF
	.byte	$D8
	.byte	$C8
	.byte	$02
	.byte	$07
	.byte	$D8
	.byte	$C6
	.byte	$42
	.byte	$F7
	.byte	$E0
	.byte	$C9
	.byte	$02
	.byte	$F1
	.byte	$E2
	.byte	$C5
	.byte	$82
	.byte	$05
	.byte	$DD
	.byte	$C5
	.byte	$02
	.byte	$FF
	.byte	$E0
	.byte	$CA
	.byte	$02
	.byte	$80
_lightning_2_data:
	.byte	$F1
	.byte	$D8
	.byte	$CB
	.byte	$02
	.byte	$F9
	.byte	$D8
	.byte	$CC
	.byte	$02
	.byte	$01
	.byte	$D8
	.byte	$CD
	.byte	$02
	.byte	$09
	.byte	$DB
	.byte	$C6
	.byte	$42
	.byte	$F1
	.byte	$E0
	.byte	$CE
	.byte	$02
	.byte	$F9
	.byte	$E0
	.byte	$CF
	.byte	$02
	.byte	$F9
	.byte	$E8
	.byte	$D0
	.byte	$02
	.byte	$FA
	.byte	$EF
	.byte	$D1
	.byte	$02
	.byte	$F1
	.byte	$F0
	.byte	$D2
	.byte	$02
	.byte	$F5
	.byte	$F4
	.byte	$D1
	.byte	$42
	.byte	$FD
	.byte	$00
	.byte	$D3
	.byte	$02
	.byte	$FF
	.byte	$0A
	.byte	$D3
	.byte	$C2
	.byte	$F8
	.byte	$11
	.byte	$D2
	.byte	$02
	.byte	$04
	.byte	$11
	.byte	$D2
	.byte	$42
	.byte	$FD
	.byte	$18
	.byte	$D0
	.byte	$42
	.byte	$01
	.byte	$E0
	.byte	$C8
	.byte	$82
	.byte	$80
_lightning_3_data:
	.byte	$EF
	.byte	$D8
	.byte	$C6
	.byte	$02
	.byte	$F7
	.byte	$D8
	.byte	$C7
	.byte	$02
	.byte	$FF
	.byte	$D8
	.byte	$C8
	.byte	$02
	.byte	$07
	.byte	$D8
	.byte	$C6
	.byte	$42
	.byte	$F7
	.byte	$E0
	.byte	$C9
	.byte	$02
	.byte	$F1
	.byte	$E2
	.byte	$C5
	.byte	$82
	.byte	$05
	.byte	$DD
	.byte	$C5
	.byte	$02
	.byte	$FF
	.byte	$E0
	.byte	$CA
	.byte	$02
	.byte	$FC
	.byte	$E4
	.byte	$D4
	.byte	$02
	.byte	$FC
	.byte	$EC
	.byte	$D4
	.byte	$02
	.byte	$FC
	.byte	$F4
	.byte	$D4
	.byte	$02
	.byte	$FC
	.byte	$FC
	.byte	$D4
	.byte	$02
	.byte	$FC
	.byte	$04
	.byte	$D4
	.byte	$02
	.byte	$FC
	.byte	$0C
	.byte	$D4
	.byte	$02
	.byte	$FC
	.byte	$14
	.byte	$D4
	.byte	$02
	.byte	$EE
	.byte	$1A
	.byte	$C0
	.byte	$42
	.byte	$F6
	.byte	$17
	.byte	$CE
	.byte	$C2
	.byte	$04
	.byte	$18
	.byte	$C6
	.byte	$82
	.byte	$0A
	.byte	$17
	.byte	$C5
	.byte	$42
	.byte	$FC
	.byte	$18
	.byte	$D4
	.byte	$02
	.byte	$80
_lightning_4_data:
	.byte	$FE
	.byte	$E0
	.byte	$D5
	.byte	$02
	.byte	$FC
	.byte	$F0
	.byte	$D6
	.byte	$02
	.byte	$FC
	.byte	$F8
	.byte	$D9
	.byte	$02
	.byte	$F3
	.byte	$FE
	.byte	$D1
	.byte	$42
	.byte	$FC
	.byte	$00
	.byte	$D8
	.byte	$02
	.byte	$00
	.byte	$F0
	.byte	$DA
	.byte	$02
	.byte	$05
	.byte	$F7
	.byte	$D2
	.byte	$42
	.byte	$FC
	.byte	$08
	.byte	$DB
	.byte	$42
	.byte	$FC
	.byte	$10
	.byte	$DB
	.byte	$C2
	.byte	$F4
	.byte	$10
	.byte	$DC
	.byte	$02
	.byte	$F4
	.byte	$08
	.byte	$DD
	.byte	$02
	.byte	$F4
	.byte	$18
	.byte	$DE
	.byte	$02
	.byte	$FC
	.byte	$18
	.byte	$DF
	.byte	$02
	.byte	$02
	.byte	$19
	.byte	$C5
	.byte	$C2
	.byte	$02
	.byte	$0C
	.byte	$D7
	.byte	$02
	.byte	$02
	.byte	$0F
	.byte	$CA
	.byte	$82
	.byte	$FE
	.byte	$E8
	.byte	$D6
	.byte	$02
	.byte	$80
_lightning_5_data:
	.byte	$FB
	.byte	$E0
	.byte	$D5
	.byte	$42
	.byte	$FD
	.byte	$F0
	.byte	$D6
	.byte	$42
	.byte	$FD
	.byte	$F8
	.byte	$D9
	.byte	$42
	.byte	$04
	.byte	$ED
	.byte	$D1
	.byte	$82
	.byte	$FD
	.byte	$00
	.byte	$D8
	.byte	$42
	.byte	$F8
	.byte	$F4
	.byte	$DA
	.byte	$42
	.byte	$F4
	.byte	$F7
	.byte	$D2
	.byte	$02
	.byte	$FD
	.byte	$08
	.byte	$DB
	.byte	$02
	.byte	$FD
	.byte	$10
	.byte	$DB
	.byte	$82
	.byte	$00
	.byte	$10
	.byte	$D6
	.byte	$42
	.byte	$05
	.byte	$08
	.byte	$DD
	.byte	$42
	.byte	$06
	.byte	$18
	.byte	$C7
	.byte	$C2
	.byte	$0D
	.byte	$14
	.byte	$DF
	.byte	$82
	.byte	$E9
	.byte	$20
	.byte	$C5
	.byte	$82
	.byte	$F7
	.byte	$0C
	.byte	$D7
	.byte	$42
	.byte	$EF
	.byte	$1B
	.byte	$C1
	.byte	$02
	.byte	$FE
	.byte	$18
	.byte	$DB
	.byte	$C2
	.byte	$F6
	.byte	$18
	.byte	$E0
	.byte	$02
	.byte	$F0
	.byte	$13
	.byte	$D2
	.byte	$02
	.byte	$FB
	.byte	$E8
	.byte	$D6
	.byte	$42
	.byte	$80
_lightning_6_data:
	.byte	$FA
	.byte	$F4
	.byte	$E2
	.byte	$02
	.byte	$FC
	.byte	$E1
	.byte	$D5
	.byte	$02
	.byte	$F9
	.byte	$E5
	.byte	$E1
	.byte	$02
	.byte	$FA
	.byte	$EC
	.byte	$D0
	.byte	$02
	.byte	$01
	.byte	$FB
	.byte	$CC
	.byte	$02
	.byte	$F4
	.byte	$F9
	.byte	$D2
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$D5
	.byte	$02
	.byte	$03
	.byte	$08
	.byte	$D0
	.byte	$02
	.byte	$FA
	.byte	$10
	.byte	$E3
	.byte	$02
	.byte	$02
	.byte	$10
	.byte	$E4
	.byte	$02
	.byte	$FA
	.byte	$18
	.byte	$E5
	.byte	$02
	.byte	$02
	.byte	$18
	.byte	$E6
	.byte	$02
	.byte	$F2
	.byte	$10
	.byte	$E7
	.byte	$02
	.byte	$F2
	.byte	$18
	.byte	$E8
	.byte	$02
	.byte	$E8
	.byte	$18
	.byte	$EA
	.byte	$02
	.byte	$EA
	.byte	$10
	.byte	$E9
	.byte	$02
	.byte	$EE
	.byte	$1D
	.byte	$EB
	.byte	$02
	.byte	$02
	.byte	$1F
	.byte	$EB
	.byte	$02
	.byte	$07
	.byte	$18
	.byte	$E8
	.byte	$42
	.byte	$0F
	.byte	$19
	.byte	$D1
	.byte	$02
	.byte	$12
	.byte	$1B
	.byte	$C6
	.byte	$42
	.byte	$12
	.byte	$0F
	.byte	$CC
	.byte	$02
	.byte	$1A
	.byte	$15
	.byte	$D2
	.byte	$42
	.byte	$0A
	.byte	$12
	.byte	$CB
	.byte	$82
	.byte	$80
_lightning_7_data:
	.byte	$FB
	.byte	$E8
	.byte	$EC
	.byte	$02
	.byte	$00
	.byte	$E3
	.byte	$D2
	.byte	$C2
	.byte	$F3
	.byte	$E7
	.byte	$ED
	.byte	$02
	.byte	$F1
	.byte	$EF
	.byte	$D6
	.byte	$02
	.byte	$F2
	.byte	$F5
	.byte	$E4
	.byte	$C2
	.byte	$F5
	.byte	$F6
	.byte	$DE
	.byte	$02
	.byte	$FC
	.byte	$F7
	.byte	$E3
	.byte	$82
	.byte	$03
	.byte	$F3
	.byte	$E3
	.byte	$02
	.byte	$06
	.byte	$F6
	.byte	$DE
	.byte	$02
	.byte	$0D
	.byte	$F7
	.byte	$EC
	.byte	$82
	.byte	$06
	.byte	$00
	.byte	$EE
	.byte	$C2
	.byte	$08
	.byte	$0E
	.byte	$E4
	.byte	$02
	.byte	$FD
	.byte	$18
	.byte	$F0
	.byte	$02
	.byte	$12
	.byte	$0E
	.byte	$DD
	.byte	$C2
	.byte	$0C
	.byte	$FB
	.byte	$EA
	.byte	$42
	.byte	$06
	.byte	$08
	.byte	$EF
	.byte	$42
	.byte	$02
	.byte	$0F
	.byte	$ED
	.byte	$02
	.byte	$FE
	.byte	$10
	.byte	$C8
	.byte	$02
	.byte	$F6
	.byte	$11
	.byte	$EF
	.byte	$02
	.byte	$F1
	.byte	$0B
	.byte	$EE
	.byte	$42
	.byte	$EE
	.byte	$06
	.byte	$EC
	.byte	$82
	.byte	$F0
	.byte	$13
	.byte	$EE
	.byte	$42
	.byte	$EC
	.byte	$0D
	.byte	$DD
	.byte	$02
	.byte	$F8
	.byte	$19
	.byte	$DB
	.byte	$82
	.byte	$FA
	.byte	$0C
	.byte	$E2
	.byte	$82
	.byte	$ED
	.byte	$13
	.byte	$D1
	.byte	$02
	.byte	$EA
	.byte	$0C
	.byte	$D3
	.byte	$42
	.byte	$ED
	.byte	$1C
	.byte	$D2
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$C8
	.byte	$02
	.byte	$08
	.byte	$18
	.byte	$CD
	.byte	$02
	.byte	$0E
	.byte	$0F
	.byte	$EE
	.byte	$02
	.byte	$80
_lightning_8_data:
	.byte	$FD
	.byte	$18
	.byte	$F1
	.byte	$02
	.byte	$FA
	.byte	$10
	.byte	$ED
	.byte	$42
	.byte	$FD
	.byte	$08
	.byte	$F2
	.byte	$02
	.byte	$05
	.byte	$08
	.byte	$F3
	.byte	$02
	.byte	$F5
	.byte	$0B
	.byte	$F2
	.byte	$02
	.byte	$ED
	.byte	$10
	.byte	$F4
	.byte	$02
	.byte	$13
	.byte	$14
	.byte	$D3
	.byte	$C2
	.byte	$E5
	.byte	$18
	.byte	$CE
	.byte	$02
	.byte	$F6
	.byte	$19
	.byte	$F5
	.byte	$02
	.byte	$F2
	.byte	$13
	.byte	$C6
	.byte	$02
	.byte	$ED
	.byte	$18
	.byte	$F6
	.byte	$02
	.byte	$E6
	.byte	$0C
	.byte	$CB
	.byte	$02
	.byte	$F6
	.byte	$0C
	.byte	$DE
	.byte	$82
	.byte	$02
	.byte	$17
	.byte	$E4
	.byte	$82
	.byte	$08
	.byte	$15
	.byte	$E8
	.byte	$02
	.byte	$F1
	.byte	$1F
	.byte	$EB
	.byte	$02
	.byte	$0A
	.byte	$0E
	.byte	$F4
	.byte	$42
	.byte	$03
	.byte	$1F
	.byte	$EB
	.byte	$42
	.byte	$09
	.byte	$1B
	.byte	$C6
	.byte	$42
	.byte	$0A
	.byte	$01
	.byte	$EA
	.byte	$42
	.byte	$0B
	.byte	$FA
	.byte	$EA
	.byte	$02
	.byte	$04
	.byte	$F7
	.byte	$F2
	.byte	$02
	.byte	$FF
	.byte	$FB
	.byte	$EB
	.byte	$42
	.byte	$F8
	.byte	$00
	.byte	$C0
	.byte	$02
	.byte	$F5
	.byte	$FB
	.byte	$D4
	.byte	$02
	.byte	$F2
	.byte	$F9
	.byte	$F2
	.byte	$82
	.byte	$F2
	.byte	$F2
	.byte	$EE
	.byte	$02
	.byte	$F6
	.byte	$EA
	.byte	$E3
	.byte	$02
	.byte	$FE
	.byte	$EE
	.byte	$E3
	.byte	$C2
	.byte	$FF
	.byte	$E8
	.byte	$C1
	.byte	$82
	.byte	$80
_lightning_9_data:
	.byte	$FD
	.byte	$17
	.byte	$F7
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$F5
	.byte	$C2
	.byte	$01
	.byte	$0B
	.byte	$DA
	.byte	$42
	.byte	$FC
	.byte	$0F
	.byte	$D1
	.byte	$02
	.byte	$F8
	.byte	$06
	.byte	$E2
	.byte	$82
	.byte	$F2
	.byte	$08
	.byte	$F3
	.byte	$02
	.byte	$FD
	.byte	$03
	.byte	$F2
	.byte	$02
	.byte	$E8
	.byte	$13
	.byte	$D5
	.byte	$42
	.byte	$EF
	.byte	$17
	.byte	$EB
	.byte	$02
	.byte	$EB
	.byte	$1B
	.byte	$C6
	.byte	$02
	.byte	$F7
	.byte	$1F
	.byte	$EB
	.byte	$02
	.byte	$04
	.byte	$1F
	.byte	$EB
	.byte	$42
	.byte	$EA
	.byte	$0B
	.byte	$F4
	.byte	$02
	.byte	$15
	.byte	$13
	.byte	$F5
	.byte	$42
	.byte	$08
	.byte	$19
	.byte	$EA
	.byte	$02
	.byte	$0F
	.byte	$1D
	.byte	$F3
	.byte	$02
	.byte	$0A
	.byte	$08
	.byte	$F3
	.byte	$42
	.byte	$06
	.byte	$03
	.byte	$DA
	.byte	$42
	.byte	$07
	.byte	$FB
	.byte	$F5
	.byte	$02
	.byte	$01
	.byte	$F9
	.byte	$C6
	.byte	$42
	.byte	$FF
	.byte	$ED
	.byte	$EE
	.byte	$02
	.byte	$F6
	.byte	$1A
	.byte	$C6
	.byte	$42
	.byte	$F9
	.byte	$F3
	.byte	$DA
	.byte	$42
	.byte	$FA
	.byte	$FA
	.byte	$D3
	.byte	$C2
	.byte	$FD
	.byte	$E6
	.byte	$DD
	.byte	$02
	.byte	$FB
	.byte	$E3
	.byte	$F8
	.byte	$02
	.byte	$80
_lightning_10_data:
	.byte	$03
	.byte	$11
	.byte	$F5
	.byte	$C2
	.byte	$01
	.byte	$0B
	.byte	$DA
	.byte	$42
	.byte	$F8
	.byte	$06
	.byte	$F9
	.byte	$82
	.byte	$F0
	.byte	$0B
	.byte	$F3
	.byte	$02
	.byte	$05
	.byte	$05
	.byte	$EB
	.byte	$02
	.byte	$EF
	.byte	$17
	.byte	$EB
	.byte	$02
	.byte	$E7
	.byte	$1B
	.byte	$C6
	.byte	$02
	.byte	$F7
	.byte	$1F
	.byte	$EB
	.byte	$02
	.byte	$04
	.byte	$1F
	.byte	$EB
	.byte	$42
	.byte	$E5
	.byte	$10
	.byte	$DA
	.byte	$42
	.byte	$18
	.byte	$12
	.byte	$F5
	.byte	$42
	.byte	$12
	.byte	$1E
	.byte	$F3
	.byte	$02
	.byte	$0E
	.byte	$0B
	.byte	$F3
	.byte	$42
	.byte	$08
	.byte	$FE
	.byte	$DA
	.byte	$42
	.byte	$F6
	.byte	$1A
	.byte	$C6
	.byte	$42
	.byte	$FE
	.byte	$EE
	.byte	$DA
	.byte	$42
	.byte	$FD
	.byte	$F7
	.byte	$D3
	.byte	$C2
	.byte	$04
	.byte	$E7
	.byte	$DD
	.byte	$42
	.byte	$FD
	.byte	$E1
	.byte	$F8
	.byte	$02
	.byte	$07
	.byte	$F8
	.byte	$EB
	.byte	$02
	.byte	$0C
	.byte	$1A
	.byte	$C6
	.byte	$02
	.byte	$80
_lightning_11_data:
	.byte	$09
	.byte	$15
	.byte	$DA
	.byte	$42
	.byte	$F8
	.byte	$06
	.byte	$F9
	.byte	$82
	.byte	$EE
	.byte	$09
	.byte	$F3
	.byte	$02
	.byte	$05
	.byte	$05
	.byte	$EB
	.byte	$02
	.byte	$EF
	.byte	$10
	.byte	$D3
	.byte	$02
	.byte	$E3
	.byte	$1D
	.byte	$C6
	.byte	$02
	.byte	$F7
	.byte	$21
	.byte	$EB
	.byte	$02
	.byte	$04
	.byte	$21
	.byte	$EB
	.byte	$42
	.byte	$E1
	.byte	$0E
	.byte	$DA
	.byte	$42
	.byte	$1C
	.byte	$12
	.byte	$F5
	.byte	$42
	.byte	$16
	.byte	$20
	.byte	$F3
	.byte	$02
	.byte	$10
	.byte	$09
	.byte	$F3
	.byte	$42
	.byte	$0D
	.byte	$1F
	.byte	$C6
	.byte	$42
	.byte	$0C
	.byte	$1A
	.byte	$C6
	.byte	$02
	.byte	$80
_lightning_animation_index:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$0D
	.byte	$00
	.byte	$01
_lightning_animation:
	.addr	_no_sprite
	.addr	_lightning_0_data
	.addr	_lightning_1_data
	.addr	_lightning_2_data
	.addr	_lightning_3_data
	.addr	_lightning_4_data
	.addr	_lightning_5_data
	.addr	_lightning_6_data
	.addr	_lightning_7_data
	.addr	_lightning_8_data
	.addr	_lightning_8_data
	.addr	_lightning_9_data
	.addr	_lightning_10_data
	.addr	_lightning_11_data
_necromancer_idle:
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$71
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$72
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$73
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$74
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$75
	.byte	$01
	.byte	$0F
	.byte	$FA
	.byte	$65
	.byte	$01
	.byte	$03
	.byte	$FC
	.byte	$60
	.byte	$02
	.byte	$09
	.byte	$07
	.byte	$64
	.byte	$01
	.byte	$0D
	.byte	$04
	.byte	$56
	.byte	$82
	.byte	$08
	.byte	$10
	.byte	$77
	.byte	$01
	.byte	$0A
	.byte	$08
	.byte	$77
	.byte	$01
	.byte	$11
	.byte	$02
	.byte	$77
	.byte	$C1
	.byte	$80
_necromancer_raising1:
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$71
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$72
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$73
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$74
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$75
	.byte	$01
	.byte	$0E
	.byte	$F8
	.byte	$66
	.byte	$01
	.byte	$03
	.byte	$FC
	.byte	$60
	.byte	$02
	.byte	$09
	.byte	$06
	.byte	$64
	.byte	$01
	.byte	$0D
	.byte	$02
	.byte	$56
	.byte	$82
	.byte	$0A
	.byte	$05
	.byte	$77
	.byte	$01
	.byte	$09
	.byte	$0C
	.byte	$77
	.byte	$01
	.byte	$0A
	.byte	$00
	.byte	$77
	.byte	$01
	.byte	$01
	.byte	$08
	.byte	$64
	.byte	$41
	.byte	$FD
	.byte	$05
	.byte	$56
	.byte	$02
	.byte	$80
_necromancer_raising2:
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$71
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$72
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$73
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$74
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$75
	.byte	$01
	.byte	$0E
	.byte	$F5
	.byte	$66
	.byte	$01
	.byte	$03
	.byte	$FC
	.byte	$60
	.byte	$02
	.byte	$09
	.byte	$01
	.byte	$64
	.byte	$81
	.byte	$0E
	.byte	$FE
	.byte	$56
	.byte	$82
	.byte	$0A
	.byte	$05
	.byte	$77
	.byte	$01
	.byte	$09
	.byte	$0A
	.byte	$77
	.byte	$01
	.byte	$0A
	.byte	$FD
	.byte	$76
	.byte	$01
	.byte	$FF
	.byte	$07
	.byte	$64
	.byte	$41
	.byte	$FA
	.byte	$04
	.byte	$56
	.byte	$02
	.byte	$80
_necromancer_hit:
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$71
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$72
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$73
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$74
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$75
	.byte	$01
	.byte	$0E
	.byte	$FA
	.byte	$66
	.byte	$01
	.byte	$03
	.byte	$FC
	.byte	$60
	.byte	$02
	.byte	$09
	.byte	$07
	.byte	$64
	.byte	$01
	.byte	$0D
	.byte	$04
	.byte	$56
	.byte	$82
	.byte	$0F
	.byte	$10
	.byte	$77
	.byte	$C1
	.byte	$0A
	.byte	$08
	.byte	$77
	.byte	$01
	.byte	$11
	.byte	$02
	.byte	$76
	.byte	$C1
	.byte	$FF
	.byte	$07
	.byte	$64
	.byte	$41
	.byte	$FA
	.byte	$04
	.byte	$56
	.byte	$02
	.byte	$80
_necromancer_animation_index:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$01
_necromancer_animation:
	.addr	_necromancer_idle
	.addr	_necromancer_raising1
	.addr	_necromancer_raising2
	.addr	_necromancer_hit
_skeleton_right_still:
	.byte	$01
	.byte	$00
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$37
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$47
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$38
	.byte	$00
	.byte	$80
_skeleton_right_walk1:
	.byte	$01
	.byte	$FF
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$57
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$47
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$38
	.byte	$00
	.byte	$80
_skeleton_right_walk2:
	.byte	$02
	.byte	$00
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$67
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$47
	.byte	$00
	.byte	$09
	.byte	$04
	.byte	$38
	.byte	$00
	.byte	$80
_skeleton_right_walk3:
	.byte	$01
	.byte	$0C
	.byte	$58
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$47
	.byte	$00
	.byte	$09
	.byte	$02
	.byte	$38
	.byte	$00
	.byte	$02
	.byte	$FF
	.byte	$48
	.byte	$00
	.byte	$80
_skeleton_right_walk4:
	.byte	$01
	.byte	$0C
	.byte	$68
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$47
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$38
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$48
	.byte	$00
	.byte	$80
_skeleton_right_turn:
	.byte	$FF
	.byte	$00
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$37
	.byte	$40
	.byte	$00
	.byte	$05
	.byte	$47
	.byte	$40
	.byte	$F8
	.byte	$04
	.byte	$38
	.byte	$40
	.byte	$80
_skeleton_left_still:
	.byte	$FF
	.byte	$00
	.byte	$48
	.byte	$40
	.byte	$00
	.byte	$0C
	.byte	$37
	.byte	$40
	.byte	$00
	.byte	$05
	.byte	$47
	.byte	$40
	.byte	$F8
	.byte	$04
	.byte	$38
	.byte	$40
	.byte	$80
_skeleton_left_walk1:
	.byte	$FF
	.byte	$FF
	.byte	$48
	.byte	$40
	.byte	$00
	.byte	$0C
	.byte	$57
	.byte	$40
	.byte	$00
	.byte	$04
	.byte	$47
	.byte	$40
	.byte	$F8
	.byte	$03
	.byte	$38
	.byte	$40
	.byte	$80
_skeleton_left_walk2:
	.byte	$FE
	.byte	$00
	.byte	$48
	.byte	$40
	.byte	$00
	.byte	$0C
	.byte	$67
	.byte	$40
	.byte	$FF
	.byte	$05
	.byte	$47
	.byte	$40
	.byte	$F7
	.byte	$04
	.byte	$38
	.byte	$40
	.byte	$80
_skeleton_left_walk3:
	.byte	$FF
	.byte	$0C
	.byte	$58
	.byte	$40
	.byte	$FF
	.byte	$04
	.byte	$47
	.byte	$40
	.byte	$F7
	.byte	$02
	.byte	$38
	.byte	$40
	.byte	$FE
	.byte	$FF
	.byte	$48
	.byte	$40
	.byte	$80
_skeleton_left_walk4:
	.byte	$00
	.byte	$0C
	.byte	$68
	.byte	$40
	.byte	$00
	.byte	$05
	.byte	$47
	.byte	$40
	.byte	$F8
	.byte	$03
	.byte	$38
	.byte	$40
	.byte	$FF
	.byte	$00
	.byte	$48
	.byte	$40
	.byte	$80
_skeleton_left_turn:
	.byte	$01
	.byte	$00
	.byte	$48
	.byte	$40
	.byte	$00
	.byte	$0C
	.byte	$37
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$47
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$38
	.byte	$00
	.byte	$80
_skeleton_dying_right1:
	.byte	$01
	.byte	$0C
	.byte	$68
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$47
	.byte	$00
	.byte	$09
	.byte	$04
	.byte	$38
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$48
	.byte	$00
	.byte	$80
_skeleton_dying_right2:
	.byte	$01
	.byte	$09
	.byte	$47
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$68
	.byte	$00
	.byte	$09
	.byte	$06
	.byte	$38
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$48
	.byte	$00
	.byte	$80
_skeleton_dying_right3:
	.byte	$01
	.byte	$0B
	.byte	$47
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$68
	.byte	$00
	.byte	$09
	.byte	$08
	.byte	$38
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$48
	.byte	$00
	.byte	$80
_skeleton_dying_right4:
	.byte	$00
	.byte	$0C
	.byte	$47
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$68
	.byte	$00
	.byte	$09
	.byte	$0C
	.byte	$38
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$48
	.byte	$00
	.byte	$80
_skeleton_dying_right5:
	.byte	$FF
	.byte	$0C
	.byte	$47
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$68
	.byte	$00
	.byte	$09
	.byte	$0C
	.byte	$38
	.byte	$00
	.byte	$06
	.byte	$09
	.byte	$48
	.byte	$C0
	.byte	$80
_skeleton_dying_right6:
	.byte	$FE
	.byte	$0C
	.byte	$47
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$68
	.byte	$00
	.byte	$09
	.byte	$0C
	.byte	$38
	.byte	$00
	.byte	$07
	.byte	$0C
	.byte	$48
	.byte	$00
	.byte	$80
_skeleton_dying_right7:
	.byte	$FE
	.byte	$0C
	.byte	$47
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$68
	.byte	$00
	.byte	$09
	.byte	$0C
	.byte	$38
	.byte	$00
	.byte	$09
	.byte	$0C
	.byte	$48
	.byte	$80
	.byte	$80
_skeleton_dying_left1:
	.byte	$01
	.byte	$0C
	.byte	$68
	.byte	$40
	.byte	$01
	.byte	$07
	.byte	$47
	.byte	$40
	.byte	$F9
	.byte	$04
	.byte	$38
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$40
	.byte	$80
_skeleton_dying_left2:
	.byte	$01
	.byte	$09
	.byte	$47
	.byte	$40
	.byte	$01
	.byte	$0C
	.byte	$68
	.byte	$40
	.byte	$F9
	.byte	$06
	.byte	$38
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$48
	.byte	$40
	.byte	$80
_skeleton_dying_left3:
	.byte	$01
	.byte	$0B
	.byte	$47
	.byte	$40
	.byte	$01
	.byte	$0C
	.byte	$68
	.byte	$40
	.byte	$F9
	.byte	$08
	.byte	$38
	.byte	$40
	.byte	$00
	.byte	$03
	.byte	$48
	.byte	$40
	.byte	$80
_skeleton_dying_left4:
	.byte	$02
	.byte	$0C
	.byte	$47
	.byte	$40
	.byte	$01
	.byte	$0C
	.byte	$68
	.byte	$40
	.byte	$F9
	.byte	$0C
	.byte	$38
	.byte	$40
	.byte	$00
	.byte	$07
	.byte	$48
	.byte	$40
	.byte	$80
_skeleton_dying_left5:
	.byte	$03
	.byte	$0C
	.byte	$47
	.byte	$40
	.byte	$01
	.byte	$0C
	.byte	$68
	.byte	$40
	.byte	$F9
	.byte	$0C
	.byte	$38
	.byte	$40
	.byte	$FC
	.byte	$09
	.byte	$48
	.byte	$80
	.byte	$80
_skeleton_dying_left6:
	.byte	$04
	.byte	$0C
	.byte	$47
	.byte	$40
	.byte	$01
	.byte	$0C
	.byte	$68
	.byte	$40
	.byte	$F9
	.byte	$0C
	.byte	$38
	.byte	$40
	.byte	$FB
	.byte	$0C
	.byte	$48
	.byte	$40
	.byte	$80
_skeleton_dying_left7:
	.byte	$04
	.byte	$0C
	.byte	$47
	.byte	$40
	.byte	$01
	.byte	$0C
	.byte	$68
	.byte	$40
	.byte	$F9
	.byte	$0C
	.byte	$38
	.byte	$40
	.byte	$F9
	.byte	$0C
	.byte	$48
	.byte	$C0
	.byte	$80
_skeleton_animation_index:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$0C
	.byte	$07
	.byte	$1A
	.byte	$01
	.byte	$1C
	.byte	$07
	.byte	$04
	.byte	$04
_skeleton_animation:
	.addr	_skeleton_left_still
	.addr	_skeleton_right_still
	.addr	_skeleton_left_turn
	.addr	_skeleton_right_turn
	.addr	_skeleton_left_walk1
	.addr	_skeleton_left_walk2
	.addr	_skeleton_left_walk3
	.addr	_skeleton_left_walk4
	.addr	_skeleton_right_walk1
	.addr	_skeleton_right_walk2
	.addr	_skeleton_right_walk3
	.addr	_skeleton_right_walk4
	.addr	_skeleton_dying_left1
	.addr	_skeleton_dying_left2
	.addr	_skeleton_dying_left3
	.addr	_skeleton_dying_left4
	.addr	_skeleton_dying_left5
	.addr	_skeleton_dying_left6
	.addr	_skeleton_dying_left7
	.addr	_skeleton_dying_right1
	.addr	_skeleton_dying_right2
	.addr	_skeleton_dying_right3
	.addr	_skeleton_dying_right4
	.addr	_skeleton_dying_right5
	.addr	_skeleton_dying_right6
	.addr	_skeleton_dying_right7
	.addr	_skeleton_dying_left7
	.addr	_skeleton_dying_right7
	.addr	_skeleton_dying_left7
	.addr	_skeleton_dying_left6
	.addr	_skeleton_dying_left5
	.addr	_skeleton_dying_left4
	.addr	_skeleton_dying_left3
	.addr	_skeleton_dying_left2
	.addr	_skeleton_dying_left1
	.addr	_skeleton_dying_right7
	.addr	_skeleton_dying_right6
	.addr	_skeleton_dying_right5
	.addr	_skeleton_dying_right4
	.addr	_skeleton_dying_right3
	.addr	_skeleton_dying_right2
	.addr	_skeleton_dying_right1
_skull_rotate_left1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
_skull_rotate_left2:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$40
	.byte	$80
_skull_rotate_left3:
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$80
	.byte	$80
_skull_rotate_left4:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$80
_skull_rotate_left5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$80
_skull_rotate_left6:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$80
_skull_rotate_right1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
_skull_rotate_right2:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$80
_skull_rotate_right3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$80
_skull_rotate_right4:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$80
_skull_rotate_right5:
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$80
	.byte	$80
_skull_rotate_right6:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$40
	.byte	$80
_skull_animation_index:
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$06
_skull_animation:
	.addr	_skull_rotate_left1
	.addr	_skull_rotate_right1
	.addr	_skull_rotate_left1
	.addr	_skull_rotate_left2
	.addr	_skull_rotate_left3
	.addr	_skull_rotate_left4
	.addr	_skull_rotate_left5
	.addr	_skull_rotate_left6
	.addr	_skull_rotate_right1
	.addr	_skull_rotate_right2
	.addr	_skull_rotate_right3
	.addr	_skull_rotate_right4
	.addr	_skull_rotate_right5
	.addr	_skull_rotate_right6
_skull_door:
	.byte	$05
	.byte	$00
	.byte	$C0
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$D0
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$D1
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$E0
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$E1
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$F0
	.byte	$03
	.byte	$08
	.byte	$18
	.byte	$F1
	.byte	$03
	.byte	$80
_skull_door2:
	.byte	$00
	.byte	$08
	.byte	$D2
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$E2
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$F2
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$D2
	.byte	$43
	.byte	$08
	.byte	$10
	.byte	$E2
	.byte	$43
	.byte	$08
	.byte	$18
	.byte	$F2
	.byte	$43
	.byte	$80
_skull_door3:
	.byte	$00
	.byte	$08
	.byte	$D3
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$E3
	.byte	$03
	.byte	$00
	.byte	$18
	.byte	$F3
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$D3
	.byte	$43
	.byte	$08
	.byte	$10
	.byte	$E3
	.byte	$43
	.byte	$08
	.byte	$18
	.byte	$F3
	.byte	$43
	.byte	$80
_skull_door_animation_index:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
_skull_door_animation:
	.addr	_skull_door
	.addr	_skull_door2
	.addr	_skull_door3
_sorcerer_appear0_left:
	.byte	$03
	.byte	$14
	.byte	$97
	.byte	$02
	.byte	$80
_sorcerer_appear1_left:
	.byte	$06
	.byte	$14
	.byte	$A7
	.byte	$02
	.byte	$80
_sorcerer_appear2_left:
	.byte	$00
	.byte	$0B
	.byte	$98
	.byte	$02
	.byte	$07
	.byte	$0C
	.byte	$99
	.byte	$02
	.byte	$07
	.byte	$14
	.byte	$A8
	.byte	$02
	.byte	$80
_sorcerer_appear3_left:
	.byte	$06
	.byte	$04
	.byte	$B7
	.byte	$02
	.byte	$09
	.byte	$0C
	.byte	$B9
	.byte	$02
	.byte	$03
	.byte	$0C
	.byte	$B8
	.byte	$02
	.byte	$09
	.byte	$14
	.byte	$A9
	.byte	$02
	.byte	$80
_sorcerer_appear4_left:
	.byte	$06
	.byte	$03
	.byte	$9A
	.byte	$02
	.byte	$0E
	.byte	$03
	.byte	$9B
	.byte	$02
	.byte	$05
	.byte	$0B
	.byte	$AA
	.byte	$02
	.byte	$0D
	.byte	$0B
	.byte	$AB
	.byte	$02
	.byte	$05
	.byte	$13
	.byte	$BA
	.byte	$02
	.byte	$0D
	.byte	$13
	.byte	$BB
	.byte	$02
	.byte	$80
_sorcerer_appear5_left:
	.byte	$06
	.byte	$02
	.byte	$9A
	.byte	$02
	.byte	$0E
	.byte	$02
	.byte	$9B
	.byte	$02
	.byte	$05
	.byte	$0A
	.byte	$AA
	.byte	$02
	.byte	$0D
	.byte	$0A
	.byte	$AB
	.byte	$02
	.byte	$05
	.byte	$12
	.byte	$BA
	.byte	$02
	.byte	$0D
	.byte	$12
	.byte	$BB
	.byte	$02
	.byte	$80
_sorcerer_appear6_left:
	.byte	$06
	.byte	$01
	.byte	$9A
	.byte	$02
	.byte	$0E
	.byte	$01
	.byte	$9B
	.byte	$02
	.byte	$05
	.byte	$09
	.byte	$AA
	.byte	$02
	.byte	$0D
	.byte	$09
	.byte	$AB
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$BA
	.byte	$02
	.byte	$0D
	.byte	$11
	.byte	$BB
	.byte	$02
	.byte	$80
_sorcerer_attack0_left:
	.byte	$06
	.byte	$01
	.byte	$9A
	.byte	$02
	.byte	$0E
	.byte	$01
	.byte	$9B
	.byte	$02
	.byte	$05
	.byte	$09
	.byte	$9C
	.byte	$02
	.byte	$0D
	.byte	$09
	.byte	$AB
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$BA
	.byte	$02
	.byte	$0D
	.byte	$11
	.byte	$BB
	.byte	$02
	.byte	$80
_sorcerer_attack1_left:
	.byte	$06
	.byte	$01
	.byte	$9A
	.byte	$02
	.byte	$0E
	.byte	$01
	.byte	$9B
	.byte	$02
	.byte	$05
	.byte	$09
	.byte	$AA
	.byte	$02
	.byte	$0D
	.byte	$09
	.byte	$9D
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$BA
	.byte	$02
	.byte	$0D
	.byte	$11
	.byte	$BB
	.byte	$02
	.byte	$80
_sorcerer_appear0_right:
	.byte	$0B
	.byte	$14
	.byte	$97
	.byte	$42
	.byte	$80
_sorcerer_appear1_right:
	.byte	$08
	.byte	$14
	.byte	$A7
	.byte	$42
	.byte	$80
_sorcerer_appear2_right:
	.byte	$0E
	.byte	$0B
	.byte	$98
	.byte	$42
	.byte	$07
	.byte	$0C
	.byte	$99
	.byte	$42
	.byte	$07
	.byte	$14
	.byte	$A8
	.byte	$42
	.byte	$80
_sorcerer_appear3_right:
	.byte	$08
	.byte	$04
	.byte	$B7
	.byte	$42
	.byte	$05
	.byte	$0C
	.byte	$B9
	.byte	$42
	.byte	$0B
	.byte	$0C
	.byte	$B8
	.byte	$42
	.byte	$05
	.byte	$14
	.byte	$A9
	.byte	$42
	.byte	$80
_sorcerer_appear4_right:
	.byte	$08
	.byte	$03
	.byte	$9A
	.byte	$42
	.byte	$00
	.byte	$03
	.byte	$9B
	.byte	$42
	.byte	$09
	.byte	$0B
	.byte	$AA
	.byte	$42
	.byte	$01
	.byte	$0B
	.byte	$AB
	.byte	$42
	.byte	$09
	.byte	$13
	.byte	$BA
	.byte	$42
	.byte	$01
	.byte	$13
	.byte	$BB
	.byte	$42
	.byte	$80
_sorcerer_appear5_right:
	.byte	$08
	.byte	$02
	.byte	$9A
	.byte	$42
	.byte	$00
	.byte	$02
	.byte	$9B
	.byte	$42
	.byte	$09
	.byte	$0A
	.byte	$AA
	.byte	$42
	.byte	$01
	.byte	$0A
	.byte	$AB
	.byte	$42
	.byte	$09
	.byte	$12
	.byte	$BA
	.byte	$42
	.byte	$01
	.byte	$12
	.byte	$BB
	.byte	$42
	.byte	$80
_sorcerer_appear6_right:
	.byte	$08
	.byte	$01
	.byte	$9A
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$9B
	.byte	$42
	.byte	$09
	.byte	$09
	.byte	$AA
	.byte	$42
	.byte	$01
	.byte	$09
	.byte	$AB
	.byte	$42
	.byte	$09
	.byte	$11
	.byte	$BA
	.byte	$42
	.byte	$01
	.byte	$11
	.byte	$BB
	.byte	$42
	.byte	$80
_sorcerer_attack0_right:
	.byte	$08
	.byte	$01
	.byte	$9A
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$9B
	.byte	$42
	.byte	$09
	.byte	$09
	.byte	$9C
	.byte	$42
	.byte	$01
	.byte	$09
	.byte	$AB
	.byte	$42
	.byte	$09
	.byte	$11
	.byte	$BA
	.byte	$42
	.byte	$01
	.byte	$11
	.byte	$BB
	.byte	$42
	.byte	$80
_sorcerer_attack1_right:
	.byte	$08
	.byte	$01
	.byte	$9A
	.byte	$42
	.byte	$00
	.byte	$01
	.byte	$9B
	.byte	$42
	.byte	$09
	.byte	$09
	.byte	$AA
	.byte	$42
	.byte	$01
	.byte	$09
	.byte	$9D
	.byte	$42
	.byte	$09
	.byte	$11
	.byte	$BA
	.byte	$42
	.byte	$01
	.byte	$11
	.byte	$BB
	.byte	$42
	.byte	$80
_sorcerer_animation_index:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0A
	.byte	$16
	.byte	$01
	.byte	$18
	.byte	$0A
	.byte	$00
	.byte	$01
_sorcerer_animation:
	.addr	_no_sprite
	.addr	_no_sprite
	.addr	_sorcerer_appear0_left
	.addr	_sorcerer_appear1_left
	.addr	_sorcerer_appear2_left
	.addr	_sorcerer_appear3_left
	.addr	_sorcerer_appear4_left
	.addr	_sorcerer_appear5_left
	.addr	_sorcerer_appear6_left
	.addr	_sorcerer_appear5_left
	.addr	_sorcerer_appear4_left
	.addr	_sorcerer_appear5_left
	.addr	_sorcerer_appear0_right
	.addr	_sorcerer_appear1_right
	.addr	_sorcerer_appear2_right
	.addr	_sorcerer_appear3_right
	.addr	_sorcerer_appear4_right
	.addr	_sorcerer_appear5_right
	.addr	_sorcerer_appear6_right
	.addr	_sorcerer_appear5_right
	.addr	_sorcerer_appear4_right
	.addr	_sorcerer_appear5_right
	.addr	_sorcerer_attack0_left
	.addr	_sorcerer_attack0_right
	.addr	_sorcerer_attack1_left
	.addr	_sorcerer_appear5_left
	.addr	_sorcerer_appear4_left
	.addr	_sorcerer_appear4_left
	.addr	_sorcerer_appear4_left
	.addr	_sorcerer_appear4_left
	.addr	_sorcerer_appear3_left
	.addr	_sorcerer_appear2_left
	.addr	_sorcerer_appear1_left
	.addr	_sorcerer_appear0_left
	.addr	_sorcerer_attack1_right
	.addr	_sorcerer_appear5_right
	.addr	_sorcerer_appear4_right
	.addr	_sorcerer_appear4_right
	.addr	_sorcerer_appear4_right
	.addr	_sorcerer_appear4_right
	.addr	_sorcerer_appear3_right
	.addr	_sorcerer_appear2_right
	.addr	_sorcerer_appear1_right
	.addr	_sorcerer_appear0_right
_staff:
	.byte	$08
	.byte	$C8
	.byte	$9F
	.byte	$00
	.byte	$08
	.byte	$D0
	.byte	$80
	.byte	$00
	.byte	$16
	.byte	$D0
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$D8
	.byte	$82
	.byte	$00
	.byte	$08
	.byte	$E0
	.byte	$83
	.byte	$00
	.byte	$10
	.byte	$D8
	.byte	$84
	.byte	$00
	.byte	$03
	.byte	$E8
	.byte	$85
	.byte	$00
	.byte	$04
	.byte	$F0
	.byte	$86
	.byte	$00
	.byte	$FF
	.byte	$F8
	.byte	$87
	.byte	$00
	.byte	$FF
	.byte	$08
	.byte	$89
	.byte	$00
	.byte	$FD
	.byte	$10
	.byte	$8A
	.byte	$00
	.byte	$FC
	.byte	$18
	.byte	$8B
	.byte	$00
	.byte	$F7
	.byte	$20
	.byte	$8C
	.byte	$00
	.byte	$F7
	.byte	$28
	.byte	$8D
	.byte	$00
	.byte	$F6
	.byte	$30
	.byte	$8E
	.byte	$00
	.byte	$F2
	.byte	$38
	.byte	$8F
	.byte	$00
	.byte	$FF
	.byte	$00
	.byte	$88
	.byte	$00
	.byte	$80
_nothing:
	.byte	$00
	.byte	$F0
	.byte	$FF
	.byte	$00
	.byte	$80
_stainedglass_1_data:
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$59
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$69
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$79
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$49
	.byte	$40
	.byte	$07
	.byte	$08
	.byte	$59
	.byte	$40
	.byte	$07
	.byte	$10
	.byte	$69
	.byte	$40
	.byte	$07
	.byte	$20
	.byte	$79
	.byte	$40
	.byte	$00
	.byte	$18
	.byte	$59
	.byte	$00
	.byte	$07
	.byte	$18
	.byte	$59
	.byte	$40
	.byte	$80
_stainedglass_2_data:
	.byte	$00
	.byte	$00
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$59
	.byte	$00
	.byte	$00
	.byte	$15
	.byte	$69
	.byte	$00
	.byte	$FC
	.byte	$2A
	.byte	$79
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$49
	.byte	$40
	.byte	$07
	.byte	$0A
	.byte	$59
	.byte	$40
	.byte	$07
	.byte	$15
	.byte	$69
	.byte	$40
	.byte	$0A
	.byte	$2A
	.byte	$79
	.byte	$40
	.byte	$FF
	.byte	$1F
	.byte	$59
	.byte	$00
	.byte	$08
	.byte	$1F
	.byte	$59
	.byte	$40
	.byte	$80
_stainedglass_3_data:
	.byte	$00
	.byte	$05
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$59
	.byte	$00
	.byte	$FF
	.byte	$1B
	.byte	$69
	.byte	$00
	.byte	$07
	.byte	$05
	.byte	$49
	.byte	$40
	.byte	$07
	.byte	$10
	.byte	$59
	.byte	$40
	.byte	$08
	.byte	$1B
	.byte	$69
	.byte	$40
	.byte	$FC
	.byte	$27
	.byte	$59
	.byte	$00
	.byte	$0B
	.byte	$27
	.byte	$59
	.byte	$40
	.byte	$80
_stainedglass_4_data:
	.byte	$00
	.byte	$0D
	.byte	$49
	.byte	$00
	.byte	$FF
	.byte	$1B
	.byte	$59
	.byte	$00
	.byte	$FD
	.byte	$28
	.byte	$69
	.byte	$00
	.byte	$07
	.byte	$0D
	.byte	$49
	.byte	$40
	.byte	$08
	.byte	$1B
	.byte	$59
	.byte	$40
	.byte	$0A
	.byte	$28
	.byte	$69
	.byte	$40
	.byte	$80
_stainedglass_5_data:
	.byte	$FF
	.byte	$1A
	.byte	$49
	.byte	$00
	.byte	$FC
	.byte	$28
	.byte	$59
	.byte	$00
	.byte	$08
	.byte	$1A
	.byte	$49
	.byte	$40
	.byte	$0B
	.byte	$28
	.byte	$59
	.byte	$40
	.byte	$80
_stainedglass_6_data:
	.byte	$FC
	.byte	$25
	.byte	$49
	.byte	$00
	.byte	$0B
	.byte	$25
	.byte	$49
	.byte	$40
	.byte	$80
_stainedglass_7_data:
	.byte	$F9
	.byte	$28
	.byte	$49
	.byte	$00
	.byte	$0C
	.byte	$28
	.byte	$49
	.byte	$40
	.byte	$80
_glass_animation_index:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$06
	.byte	$06
	.byte	$01
_glass_animation:
	.addr	_stainedglass_1_data
	.addr	_stainedglass_2_data
	.addr	_stainedglass_3_data
	.addr	_stainedglass_4_data
	.addr	_stainedglass_5_data
	.addr	_stainedglass_6_data
	.addr	_stainedglass_7_data
_star_0_data:
	.byte	$FD
	.byte	$E9
	.byte	$12
	.byte	$00
	.byte	$11
	.byte	$FC
	.byte	$12
	.byte	$00
	.byte	$E8
	.byte	$FC
	.byte	$12
	.byte	$00
	.byte	$F0
	.byte	$13
	.byte	$12
	.byte	$00
	.byte	$09
	.byte	$13
	.byte	$12
	.byte	$00
	.byte	$80
_star_1_data:
	.byte	$06
	.byte	$ED
	.byte	$12
	.byte	$00
	.byte	$0F
	.byte	$04
	.byte	$12
	.byte	$00
	.byte	$EE
	.byte	$F6
	.byte	$12
	.byte	$00
	.byte	$ED
	.byte	$0B
	.byte	$12
	.byte	$00
	.byte	$01
	.byte	$12
	.byte	$12
	.byte	$00
	.byte	$80
_star_2_data:
	.byte	$0A
	.byte	$F3
	.byte	$12
	.byte	$00
	.byte	$0A
	.byte	$07
	.byte	$12
	.byte	$00
	.byte	$F6
	.byte	$F2
	.byte	$12
	.byte	$00
	.byte	$EE
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$FA
	.byte	$0E
	.byte	$12
	.byte	$00
	.byte	$80
_star_3_data:
	.byte	$07
	.byte	$FA
	.byte	$12
	.byte	$00
	.byte	$03
	.byte	$07
	.byte	$12
	.byte	$00
	.byte	$FC
	.byte	$F1
	.byte	$12
	.byte	$00
	.byte	$F1
	.byte	$F8
	.byte	$12
	.byte	$00
	.byte	$F5
	.byte	$07
	.byte	$12
	.byte	$00
	.byte	$80
_star_4_data:
	.byte	$06
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$FC
	.byte	$07
	.byte	$12
	.byte	$00
	.byte	$02
	.byte	$F6
	.byte	$12
	.byte	$00
	.byte	$F8
	.byte	$F5
	.byte	$12
	.byte	$00
	.byte	$F3
	.byte	$FF
	.byte	$12
	.byte	$00
	.byte	$80
_star_5_data:
	.byte	$02
	.byte	$01
	.byte	$12
	.byte	$00
	.byte	$F9
	.byte	$01
	.byte	$12
	.byte	$00
	.byte	$03
	.byte	$FA
	.byte	$12
	.byte	$00
	.byte	$FD
	.byte	$F5
	.byte	$12
	.byte	$00
	.byte	$F7
	.byte	$FA
	.byte	$12
	.byte	$00
	.byte	$80
_star_6_data:
	.byte	$FD
	.byte	$03
	.byte	$12
	.byte	$00
	.byte	$F7
	.byte	$FE
	.byte	$12
	.byte	$00
	.byte	$03
	.byte	$FE
	.byte	$12
	.byte	$00
	.byte	$01
	.byte	$F8
	.byte	$12
	.byte	$00
	.byte	$FB
	.byte	$F8
	.byte	$12
	.byte	$00
	.byte	$80
_star_7_data:
	.byte	$FD
	.byte	$F8
	.byte	$12
	.byte	$00
	.byte	$01
	.byte	$FC
	.byte	$12
	.byte	$00
	.byte	$F9
	.byte	$FB
	.byte	$12
	.byte	$00
	.byte	$FA
	.byte	$01
	.byte	$12
	.byte	$00
	.byte	$FF
	.byte	$01
	.byte	$12
	.byte	$00
	.byte	$80
_star_8_data:
	.byte	$FD
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$FB
	.byte	$12
	.byte	$00
	.byte	$FA
	.byte	$FB
	.byte	$12
	.byte	$00
	.byte	$80
_star_9_data:
	.byte	$FD
	.byte	$FD
	.byte	$12
	.byte	$00
	.byte	$80
_stars_animation_index:
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$00
	.byte	$01
_stars_animation:
	.addr	_no_sprite
	.addr	_star_0_data
	.addr	_star_1_data
	.addr	_star_2_data
	.addr	_star_3_data
	.addr	_star_4_data
	.addr	_star_5_data
	.addr	_star_6_data
	.addr	_star_7_data
	.addr	_star_8_data
	.addr	_star_9_data
_villager_beard_idle1:
	.byte	$00
	.byte	$00
	.byte	$94
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$A4
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$B4
	.byte	$03
	.byte	$80
_villager_beard_idle2:
	.byte	$00
	.byte	$01
	.byte	$94
	.byte	$03
	.byte	$00
	.byte	$09
	.byte	$A4
	.byte	$03
	.byte	$00
	.byte	$11
	.byte	$B4
	.byte	$03
	.byte	$80
_villager_beard_idle3:
	.byte	$00
	.byte	$02
	.byte	$94
	.byte	$03
	.byte	$00
	.byte	$0A
	.byte	$A4
	.byte	$03
	.byte	$00
	.byte	$12
	.byte	$B4
	.byte	$03
	.byte	$80
_villager_beard_face:
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$A5
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$B5
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$96
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$A6
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$B6
	.byte	$03
	.byte	$80
_villager_animation_index:
	.byte	$00
	.byte	$06
_villager_animation:
	.addr	_villager_beard_idle1
	.addr	_villager_beard_idle2
	.addr	_villager_beard_idle3
	.addr	_villager_beard_idle3
	.addr	_villager_beard_idle2
	.addr	_villager_beard_idle1
.segment	"BANK1"
_inventory:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$27
	.byte	$F6
	.byte	$F1
	.byte	$02
	.byte	$0E
	.byte	$F3
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$F0
	.byte	$F2
	.byte	$02
	.byte	$03
	.byte	$F8
	.byte	$00
	.byte	$4F
	.byte	$72
	.byte	$62
	.byte	$69
	.byte	$73
	.byte	$00
	.byte	$4D
	.byte	$61
	.byte	$67
	.byte	$69
	.byte	$63
	.byte	$61
	.byte	$65
	.byte	$00
	.byte	$F5
	.byte	$F2
	.byte	$02
	.byte	$02
	.byte	$F0
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$F7
	.byte	$F1
	.byte	$02
	.byte	$0E
	.byte	$F4
	.byte	$00
	.byte	$02
	.byte	$2E
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$02
	.byte	$0E
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$02
	.byte	$29
	.byte	$F0
	.byte	$F2
	.byte	$02
	.byte	$17
	.byte	$F0
	.byte	$00
	.byte	$02
	.byte	$31
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$81
	.byte	$10
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$10
	.byte	$02
	.byte	$0B
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$10
	.byte	$02
	.byte	$0B
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$10
	.byte	$02
	.byte	$0B
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$10
	.byte	$10
	.byte	$81
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$0B
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$90
	.byte	$F9
	.byte	$FA
	.byte	$FB
	.byte	$FC
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$0B
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$10
	.byte	$02
	.byte	$04
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$0B
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$10
	.byte	$02
	.byte	$0B
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$10
	.byte	$02
	.byte	$0B
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$10
	.byte	$02
	.byte	$0B
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$10
	.byte	$02
	.byte	$08
	.byte	$91
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$27
	.byte	$F0
	.byte	$F2
	.byte	$02
	.byte	$17
	.byte	$F0
	.byte	$00
	.byte	$02
	.byte	$2C
	.byte	$41
	.byte	$63
	.byte	$68
	.byte	$69
	.byte	$65
	.byte	$76
	.byte	$65
	.byte	$6D
	.byte	$65
	.byte	$6E
	.byte	$74
	.byte	$73
	.byte	$00
	.byte	$02
	.byte	$A9
	.byte	$40
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$13
	.byte	$40
	.byte	$80
	.byte	$AA
	.byte	$02
	.byte	$02
	.byte	$EE
	.byte	$33
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$02
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$0F
	.byte	$40
	.byte	$50
	.byte	$02
	.byte	$05
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$00
_map:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$A1
	.byte	$10
	.byte	$02
	.byte	$07
	.byte	$81
	.byte	$10
	.byte	$02
	.byte	$12
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$96
	.byte	$98
	.byte	$02
	.byte	$17
	.byte	$9C
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$97
	.byte	$10
	.byte	$02
	.byte	$0A
	.byte	$99
	.byte	$10
	.byte	$9A
	.byte	$10
	.byte	$02
	.byte	$05
	.byte	$9B
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$97
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$97
	.byte	$10
	.byte	$9D
	.byte	$A0
	.byte	$10
	.byte	$A3
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$A7
	.byte	$A8
	.byte	$AB
	.byte	$AC
	.byte	$AF
	.byte	$B0
	.byte	$B3
	.byte	$B4
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$B8
	.byte	$BB
	.byte	$BC
	.byte	$BE
	.byte	$BF
	.byte	$97
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$97
	.byte	$9E
	.byte	$9F
	.byte	$A1
	.byte	$A2
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$10
	.byte	$A9
	.byte	$AA
	.byte	$AD
	.byte	$AE
	.byte	$B1
	.byte	$B2
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$10
	.byte	$B9
	.byte	$BA
	.byte	$BD
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$97
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$97
	.byte	$10
	.byte	$02
	.byte	$08
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$10
	.byte	$02
	.byte	$06
	.byte	$97
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$97
	.byte	$10
	.byte	$02
	.byte	$14
	.byte	$C8
	.byte	$10
	.byte	$10
	.byte	$97
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$97
	.byte	$C9
	.byte	$CA
	.byte	$10
	.byte	$10
	.byte	$C8
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$CD
	.byte	$CE
	.byte	$02
	.byte	$06
	.byte	$D0
	.byte	$10
	.byte	$02
	.byte	$05
	.byte	$C8
	.byte	$97
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$97
	.byte	$10
	.byte	$CB
	.byte	$CC
	.byte	$10
	.byte	$10
	.byte	$C8
	.byte	$10
	.byte	$10
	.byte	$CF
	.byte	$10
	.byte	$10
	.byte	$CE
	.byte	$02
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$D1
	.byte	$10
	.byte	$02
	.byte	$06
	.byte	$97
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$97
	.byte	$10
	.byte	$10
	.byte	$D2
	.byte	$D3
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$D9
	.byte	$DA
	.byte	$10
	.byte	$02
	.byte	$04
	.byte	$DA
	.byte	$DC
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$BE
	.byte	$BF
	.byte	$10
	.byte	$10
	.byte	$97
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$97
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$10
	.byte	$10
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DA
	.byte	$DC
	.byte	$10
	.byte	$02
	.byte	$08
	.byte	$97
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$97
	.byte	$10
	.byte	$C8
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$DD
	.byte	$DE
	.byte	$E0
	.byte	$E3
	.byte	$10
	.byte	$10
	.byte	$E6
	.byte	$10
	.byte	$02
	.byte	$04
	.byte	$E3
	.byte	$E0
	.byte	$EC
	.byte	$93
	.byte	$93
	.byte	$EC
	.byte	$97
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$97
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$C8
	.byte	$10
	.byte	$CD
	.byte	$D0
	.byte	$DF
	.byte	$E1
	.byte	$E2
	.byte	$E4
	.byte	$E5
	.byte	$E7
	.byte	$E8
	.byte	$E9
	.byte	$E9
	.byte	$EA
	.byte	$E5
	.byte	$EB
	.byte	$02
	.byte	$03
	.byte	$E5
	.byte	$01
	.byte	$97
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$97
	.byte	$CE
	.byte	$CE
	.byte	$D0
	.byte	$10
	.byte	$10
	.byte	$D9
	.byte	$DC
	.byte	$10
	.byte	$02
	.byte	$04
	.byte	$94
	.byte	$10
	.byte	$95
	.byte	$95
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$C8
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$97
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$97
	.byte	$10
	.byte	$10
	.byte	$D1
	.byte	$B4
	.byte	$10
	.byte	$02
	.byte	$05
	.byte	$89
	.byte	$8A
	.byte	$10
	.byte	$8E
	.byte	$B4
	.byte	$8D
	.byte	$8F
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$CD
	.byte	$CE
	.byte	$02
	.byte	$02
	.byte	$97
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$97
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$D0
	.byte	$10
	.byte	$02
	.byte	$05
	.byte	$8A
	.byte	$8A
	.byte	$89
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$88
	.byte	$10
	.byte	$10
	.byte	$CD
	.byte	$10
	.byte	$87
	.byte	$85
	.byte	$10
	.byte	$97
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$97
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$CE
	.byte	$02
	.byte	$03
	.byte	$D0
	.byte	$10
	.byte	$02
	.byte	$06
	.byte	$CD
	.byte	$CE
	.byte	$CE
	.byte	$10
	.byte	$10
	.byte	$86
	.byte	$84
	.byte	$10
	.byte	$97
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$90
	.byte	$97
	.byte	$10
	.byte	$02
	.byte	$08
	.byte	$D0
	.byte	$CD
	.byte	$CE
	.byte	$02
	.byte	$02
	.byte	$D0
	.byte	$CD
	.byte	$10
	.byte	$02
	.byte	$07
	.byte	$97
	.byte	$10
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$82
	.byte	$98
	.byte	$02
	.byte	$17
	.byte	$83
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$02
	.byte	$10
	.byte	$91
	.byte	$10
	.byte	$02
	.byte	$08
	.byte	$92
	.byte	$00
	.byte	$02
	.byte	$E0
	.byte	$00
	.byte	$02
	.byte	$00
.segment	"BANK2"
_cemetery:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$A0
	.byte	$11
	.byte	$02
	.byte	$0C
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$11
	.byte	$02
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$02
	.byte	$0C
	.byte	$C7
	.byte	$11
	.byte	$11
	.byte	$C7
	.byte	$11
	.byte	$02
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$11
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$FF
	.byte	$11
	.byte	$FF
	.byte	$C9
	.byte	$11
	.byte	$11
	.byte	$C9
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$11
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$FF
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CA
	.byte	$02
	.byte	$02
	.byte	$CC
	.byte	$CA
	.byte	$02
	.byte	$05
	.byte	$CC
	.byte	$CA
	.byte	$C9
	.byte	$11
	.byte	$11
	.byte	$C9
	.byte	$CA
	.byte	$02
	.byte	$04
	.byte	$CC
	.byte	$CA
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CB
	.byte	$02
	.byte	$0B
	.byte	$C7
	.byte	$C1
	.byte	$C2
	.byte	$CD
	.byte	$CB
	.byte	$02
	.byte	$0B
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$0A
	.byte	$D1
	.byte	$D2
	.byte	$01
	.byte	$02
	.byte	$0A
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$0A
	.byte	$D1
	.byte	$D2
	.byte	$11
	.byte	$02
	.byte	$0A
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$D4
	.byte	$D5
	.byte	$11
	.byte	$11
	.byte	$D4
	.byte	$D5
	.byte	$11
	.byte	$11
	.byte	$E3
	.byte	$E4
	.byte	$11
	.byte	$D1
	.byte	$D2
	.byte	$11
	.byte	$D4
	.byte	$D5
	.byte	$11
	.byte	$11
	.byte	$E3
	.byte	$E4
	.byte	$11
	.byte	$11
	.byte	$D8
	.byte	$D9
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$D3
	.byte	$10
	.byte	$D6
	.byte	$DB
	.byte	$11
	.byte	$11
	.byte	$D6
	.byte	$DB
	.byte	$11
	.byte	$11
	.byte	$E5
	.byte	$D7
	.byte	$11
	.byte	$D1
	.byte	$D2
	.byte	$11
	.byte	$D6
	.byte	$DB
	.byte	$11
	.byte	$11
	.byte	$E5
	.byte	$D7
	.byte	$11
	.byte	$11
	.byte	$D6
	.byte	$DB
	.byte	$10
	.byte	$D3
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$05
	.byte	$DA
	.byte	$D1
	.byte	$D2
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$05
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$05
	.byte	$DA
	.byte	$D1
	.byte	$D2
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$05
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$D4
	.byte	$D5
	.byte	$11
	.byte	$11
	.byte	$E3
	.byte	$E4
	.byte	$11
	.byte	$11
	.byte	$D4
	.byte	$D5
	.byte	$11
	.byte	$D1
	.byte	$D2
	.byte	$11
	.byte	$E3
	.byte	$E4
	.byte	$11
	.byte	$11
	.byte	$D4
	.byte	$D5
	.byte	$11
	.byte	$11
	.byte	$D4
	.byte	$D5
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$D6
	.byte	$DB
	.byte	$11
	.byte	$11
	.byte	$E5
	.byte	$D7
	.byte	$11
	.byte	$DA
	.byte	$D6
	.byte	$DB
	.byte	$11
	.byte	$D1
	.byte	$D2
	.byte	$11
	.byte	$D6
	.byte	$D7
	.byte	$11
	.byte	$11
	.byte	$D6
	.byte	$DB
	.byte	$11
	.byte	$11
	.byte	$D6
	.byte	$DB
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$D3
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$DC
	.byte	$DD
	.byte	$E0
	.byte	$11
	.byte	$02
	.byte	$08
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$D3
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$DE
	.byte	$DF
	.byte	$E1
	.byte	$01
	.byte	$CF
	.byte	$E2
	.byte	$11
	.byte	$02
	.byte	$05
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$E3
	.byte	$E4
	.byte	$11
	.byte	$11
	.byte	$D4
	.byte	$D5
	.byte	$11
	.byte	$11
	.byte	$E6
	.byte	$C8
	.byte	$E8
	.byte	$E9
	.byte	$EC
	.byte	$ED
	.byte	$FD
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$E3
	.byte	$E4
	.byte	$11
	.byte	$11
	.byte	$D4
	.byte	$D5
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$E5
	.byte	$D7
	.byte	$11
	.byte	$11
	.byte	$E5
	.byte	$DB
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$E7
	.byte	$EA
	.byte	$EB
	.byte	$EE
	.byte	$EF
	.byte	$CF
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$E5
	.byte	$D7
	.byte	$11
	.byte	$11
	.byte	$D6
	.byte	$DB
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$04
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$F1
	.byte	$F3
	.byte	$F4
	.byte	$F7
	.byte	$F8
	.byte	$FB
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$D3
	.byte	$10
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$07
	.byte	$F2
	.byte	$F5
	.byte	$F6
	.byte	$F9
	.byte	$FA
	.byte	$CF
	.byte	$11
	.byte	$02
	.byte	$06
	.byte	$DA
	.byte	$11
	.byte	$10
	.byte	$D3
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$08
	.byte	$F1
	.byte	$FD
	.byte	$F1
	.byte	$F0
	.byte	$F1
	.byte	$FD
	.byte	$11
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$17
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$02
	.byte	$19
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$D3
	.byte	$02
	.byte	$02
	.byte	$CE
	.byte	$D3
	.byte	$02
	.byte	$02
	.byte	$CE
	.byte	$D3
	.byte	$02
	.byte	$02
	.byte	$CE
	.byte	$D3
	.byte	$02
	.byte	$03
	.byte	$CE
	.byte	$D3
	.byte	$02
	.byte	$02
	.byte	$CE
	.byte	$D3
	.byte	$02
	.byte	$02
	.byte	$CE
	.byte	$D3
	.byte	$02
	.byte	$02
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$02
	.byte	$1D
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$FF
	.byte	$02
	.byte	$07
	.byte	$6A
	.byte	$5A
	.byte	$5A
	.byte	$9A
	.byte	$6A
	.byte	$5A
	.byte	$5A
	.byte	$9A
	.byte	$2A
	.byte	$5A
	.byte	$02
	.byte	$05
	.byte	$8A
	.byte	$22
	.byte	$56
	.byte	$02
	.byte	$02
	.byte	$59
	.byte	$02
	.byte	$02
	.byte	$88
	.byte	$22
	.byte	$56
	.byte	$56
	.byte	$A6
	.byte	$69
	.byte	$59
	.byte	$59
	.byte	$88
	.byte	$22
	.byte	$56
	.byte	$56
	.byte	$22
	.byte	$88
	.byte	$59
	.byte	$59
	.byte	$88
	.byte	$22
	.byte	$05
	.byte	$05
	.byte	$0A
	.byte	$0A
	.byte	$05
	.byte	$05
	.byte	$88
	.byte	$0A
	.byte	$02
	.byte	$06
	.byte	$0A
	.byte	$02
	.byte	$00
_temple:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$8B
	.byte	$83
	.byte	$84
	.byte	$00
	.byte	$83
	.byte	$84
	.byte	$00
	.byte	$83
	.byte	$84
	.byte	$00
	.byte	$02
	.byte	$0F
	.byte	$85
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$00
	.byte	$A3
	.byte	$94
	.byte	$00
	.byte	$A3
	.byte	$94
	.byte	$00
	.byte	$93
	.byte	$94
	.byte	$00
	.byte	$85
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$95
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$92
	.byte	$A3
	.byte	$A4
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$92
	.byte	$A3
	.byte	$94
	.byte	$92
	.byte	$95
	.byte	$A3
	.byte	$94
	.byte	$95
	.byte	$A3
	.byte	$A4
	.byte	$95
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$81
	.byte	$92
	.byte	$A5
	.byte	$93
	.byte	$94
	.byte	$A5
	.byte	$A2
	.byte	$94
	.byte	$A5
	.byte	$B1
	.byte	$93
	.byte	$94
	.byte	$B1
	.byte	$A2
	.byte	$94
	.byte	$B1
	.byte	$93
	.byte	$A4
	.byte	$B1
	.byte	$A5
	.byte	$93
	.byte	$94
	.byte	$A5
	.byte	$A2
	.byte	$94
	.byte	$A5
	.byte	$92
	.byte	$81
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$91
	.byte	$A5
	.byte	$B3
	.byte	$B4
	.byte	$95
	.byte	$B3
	.byte	$B4
	.byte	$95
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B2
	.byte	$A5
	.byte	$B3
	.byte	$B4
	.byte	$A5
	.byte	$B3
	.byte	$B4
	.byte	$95
	.byte	$91
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$91
	.byte	$B5
	.byte	$90
	.byte	$91
	.byte	$B5
	.byte	$90
	.byte	$91
	.byte	$B5
	.byte	$90
	.byte	$91
	.byte	$02
	.byte	$02
	.byte	$F8
	.byte	$F9
	.byte	$91
	.byte	$02
	.byte	$03
	.byte	$B5
	.byte	$90
	.byte	$91
	.byte	$B5
	.byte	$90
	.byte	$91
	.byte	$B5
	.byte	$91
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$A0
	.byte	$11
	.byte	$11
	.byte	$87
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$04
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$81
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$86
	.byte	$A6
	.byte	$A7
	.byte	$A1
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$04
	.byte	$01
	.byte	$81
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$01
	.byte	$04
	.byte	$02
	.byte	$09
	.byte	$86
	.byte	$B6
	.byte	$B7
	.byte	$87
	.byte	$04
	.byte	$02
	.byte	$09
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$09
	.byte	$04
	.byte	$86
	.byte	$11
	.byte	$11
	.byte	$87
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$09
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$01
	.byte	$0C
	.byte	$0D
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$86
	.byte	$87
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$81
	.byte	$01
	.byte	$1C
	.byte	$1D
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$86
	.byte	$87
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$81
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$01
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$86
	.byte	$87
	.byte	$01
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$01
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$86
	.byte	$A1
	.byte	$01
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$86
	.byte	$87
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$81
	.byte	$01
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$86
	.byte	$87
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$81
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$01
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$A0
	.byte	$87
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$86
	.byte	$87
	.byte	$01
	.byte	$02
	.byte	$0A
	.byte	$07
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$01
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$81
	.byte	$01
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$86
	.byte	$87
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$81
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$86
	.byte	$87
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$86
	.byte	$87
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$07
	.byte	$01
	.byte	$02
	.byte	$18
	.byte	$80
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$81
	.byte	$82
	.byte	$82
	.byte	$81
	.byte	$B0
	.byte	$02
	.byte	$07
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$81
	.byte	$B0
	.byte	$02
	.byte	$07
	.byte	$81
	.byte	$82
	.byte	$82
	.byte	$81
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$82
	.byte	$81
	.byte	$82
	.byte	$02
	.byte	$06
	.byte	$80
	.byte	$01
	.byte	$01
	.byte	$80
	.byte	$82
	.byte	$02
	.byte	$06
	.byte	$81
	.byte	$82
	.byte	$00
	.byte	$02
	.byte	$24
	.byte	$FF
	.byte	$02
	.byte	$07
	.byte	$55
	.byte	$02
	.byte	$08
	.byte	$A5
	.byte	$95
	.byte	$A5
	.byte	$02
	.byte	$03
	.byte	$55
	.byte	$55
	.byte	$9A
	.byte	$9A
	.byte	$AA
	.byte	$02
	.byte	$02
	.byte	$9A
	.byte	$55
	.byte	$55
	.byte	$AA
	.byte	$02
	.byte	$05
	.byte	$55
	.byte	$55
	.byte	$AA
	.byte	$02
	.byte	$05
	.byte	$55
	.byte	$55
	.byte	$5A
	.byte	$5A
	.byte	$59
	.byte	$5A
	.byte	$5A
	.byte	$56
	.byte	$55
	.byte	$05
	.byte	$02
	.byte	$06
	.byte	$05
	.byte	$02
	.byte	$00
_temple2:
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$C4
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$03
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$09
	.byte	$80
	.byte	$02
	.byte	$03
	.byte	$13
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$09
	.byte	$80
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$09
	.byte	$80
	.byte	$01
	.byte	$03
	.byte	$13
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$09
	.byte	$80
	.byte	$01
	.byte	$03
	.byte	$13
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$03
	.byte	$13
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$0A
	.byte	$10
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$06
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$16
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$10
	.byte	$03
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$16
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$01
	.byte	$10
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$03
	.byte	$07
	.byte	$06
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$81
	.byte	$16
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$01
	.byte	$01
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$03
	.byte	$07
	.byte	$16
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$01
	.byte	$01
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$03
	.byte	$07
	.byte	$06
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$16
	.byte	$01
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$10
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$03
	.byte	$07
	.byte	$16
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$81
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$0A
	.byte	$10
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$06
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$16
	.byte	$01
	.byte	$03
	.byte	$0B
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$0A
	.byte	$16
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$19
	.byte	$06
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$16
	.byte	$01
	.byte	$03
	.byte	$0B
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$0A
	.byte	$16
	.byte	$80
	.byte	$00
	.byte	$00
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$03
	.byte	$13
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$03
	.byte	$13
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$09
	.byte	$80
	.byte	$01
	.byte	$03
	.byte	$13
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$09
	.byte	$80
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$09
	.byte	$80
	.byte	$12
	.byte	$03
	.byte	$13
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$09
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$03
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$44
	.byte	$FF
	.byte	$03
	.byte	$07
	.byte	$40
	.byte	$50
	.byte	$55
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$55
	.byte	$59
	.byte	$5A
	.byte	$03
	.byte	$03
	.byte	$56
	.byte	$50
	.byte	$99
	.byte	$66
	.byte	$55
	.byte	$03
	.byte	$03
	.byte	$99
	.byte	$66
	.byte	$99
	.byte	$66
	.byte	$55
	.byte	$03
	.byte	$03
	.byte	$99
	.byte	$66
	.byte	$59
	.byte	$56
	.byte	$55
	.byte	$03
	.byte	$03
	.byte	$59
	.byte	$56
	.byte	$55
	.byte	$59
	.byte	$5A
	.byte	$03
	.byte	$03
	.byte	$56
	.byte	$55
	.byte	$04
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$00
_temple3:
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$8B
	.byte	$85
	.byte	$8F
	.byte	$95
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$8F
	.byte	$85
	.byte	$00
	.byte	$08
	.byte	$0E
	.byte	$85
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C7
	.byte	$A5
	.byte	$9F
	.byte	$A5
	.byte	$00
	.byte	$00
	.byte	$A5
	.byte	$9F
	.byte	$95
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C7
	.byte	$85
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$A5
	.byte	$D6
	.byte	$D7
	.byte	$E7
	.byte	$F7
	.byte	$D6
	.byte	$D7
	.byte	$E7
	.byte	$F7
	.byte	$95
	.byte	$92
	.byte	$B5
	.byte	$01
	.byte	$07
	.byte	$B5
	.byte	$92
	.byte	$A5
	.byte	$D6
	.byte	$D7
	.byte	$E7
	.byte	$F7
	.byte	$D6
	.byte	$D7
	.byte	$E7
	.byte	$F7
	.byte	$95
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$95
	.byte	$92
	.byte	$08
	.byte	$07
	.byte	$B5
	.byte	$01
	.byte	$08
	.byte	$05
	.byte	$B5
	.byte	$92
	.byte	$08
	.byte	$07
	.byte	$A5
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$B5
	.byte	$04
	.byte	$04
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$04
	.byte	$04
	.byte	$B5
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$80
	.byte	$04
	.byte	$01
	.byte	$08
	.byte	$15
	.byte	$04
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$80
	.byte	$06
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$08
	.byte	$09
	.byte	$07
	.byte	$01
	.byte	$06
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$80
	.byte	$16
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$08
	.byte	$13
	.byte	$16
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$80
	.byte	$06
	.byte	$01
	.byte	$08
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$08
	.byte	$0D
	.byte	$81
	.byte	$01
	.byte	$08
	.byte	$02
	.byte	$06
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$82
	.byte	$16
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$81
	.byte	$12
	.byte	$08
	.byte	$0B
	.byte	$81
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$16
	.byte	$82
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$80
	.byte	$06
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$81
	.byte	$82
	.byte	$08
	.byte	$09
	.byte	$81
	.byte	$13
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$06
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$80
	.byte	$16
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$80
	.byte	$E0
	.byte	$11
	.byte	$08
	.byte	$05
	.byte	$E1
	.byte	$11
	.byte	$E2
	.byte	$80
	.byte	$13
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$16
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$80
	.byte	$06
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$80
	.byte	$E0
	.byte	$11
	.byte	$E1
	.byte	$11
	.byte	$A6
	.byte	$A7
	.byte	$11
	.byte	$08
	.byte	$02
	.byte	$E2
	.byte	$80
	.byte	$13
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$06
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$82
	.byte	$16
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$80
	.byte	$E0
	.byte	$11
	.byte	$08
	.byte	$02
	.byte	$B6
	.byte	$B7
	.byte	$11
	.byte	$08
	.byte	$02
	.byte	$E2
	.byte	$80
	.byte	$13
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$16
	.byte	$82
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$80
	.byte	$06
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$80
	.byte	$E0
	.byte	$11
	.byte	$08
	.byte	$04
	.byte	$E1
	.byte	$11
	.byte	$11
	.byte	$E2
	.byte	$80
	.byte	$13
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$06
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$80
	.byte	$16
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$03
	.byte	$81
	.byte	$82
	.byte	$08
	.byte	$09
	.byte	$81
	.byte	$13
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$16
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$80
	.byte	$06
	.byte	$01
	.byte	$08
	.byte	$03
	.byte	$81
	.byte	$02
	.byte	$08
	.byte	$0B
	.byte	$81
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$06
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$82
	.byte	$16
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$81
	.byte	$01
	.byte	$08
	.byte	$0D
	.byte	$81
	.byte	$01
	.byte	$08
	.byte	$02
	.byte	$16
	.byte	$82
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$80
	.byte	$06
	.byte	$01
	.byte	$08
	.byte	$15
	.byte	$06
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$80
	.byte	$16
	.byte	$01
	.byte	$08
	.byte	$0D
	.byte	$07
	.byte	$01
	.byte	$08
	.byte	$06
	.byte	$16
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$80
	.byte	$04
	.byte	$01
	.byte	$08
	.byte	$15
	.byte	$04
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$80
	.byte	$04
	.byte	$04
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$04
	.byte	$04
	.byte	$80
	.byte	$00
	.byte	$08
	.byte	$05
	.byte	$81
	.byte	$82
	.byte	$08
	.byte	$17
	.byte	$81
	.byte	$00
	.byte	$08
	.byte	$62
	.byte	$FF
	.byte	$08
	.byte	$07
	.byte	$44
	.byte	$55
	.byte	$08
	.byte	$05
	.byte	$11
	.byte	$45
	.byte	$6A
	.byte	$AA
	.byte	$56
	.byte	$59
	.byte	$AA
	.byte	$9A
	.byte	$11
	.byte	$45
	.byte	$66
	.byte	$55
	.byte	$08
	.byte	$03
	.byte	$99
	.byte	$11
	.byte	$54
	.byte	$66
	.byte	$55
	.byte	$08
	.byte	$03
	.byte	$99
	.byte	$11
	.byte	$55
	.byte	$66
	.byte	$55
	.byte	$08
	.byte	$03
	.byte	$99
	.byte	$11
	.byte	$55
	.byte	$5A
	.byte	$08
	.byte	$05
	.byte	$11
	.byte	$05
	.byte	$08
	.byte	$06
	.byte	$01
	.byte	$08
	.byte	$00
_temple4:
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$8B
	.byte	$85
	.byte	$8F
	.byte	$95
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$8F
	.byte	$85
	.byte	$00
	.byte	$03
	.byte	$0E
	.byte	$85
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C7
	.byte	$A5
	.byte	$9F
	.byte	$A5
	.byte	$00
	.byte	$00
	.byte	$A5
	.byte	$9F
	.byte	$95
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C7
	.byte	$C6
	.byte	$C7
	.byte	$85
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$A5
	.byte	$D6
	.byte	$D7
	.byte	$E7
	.byte	$F7
	.byte	$D6
	.byte	$D7
	.byte	$E7
	.byte	$F7
	.byte	$95
	.byte	$92
	.byte	$B5
	.byte	$01
	.byte	$07
	.byte	$B5
	.byte	$92
	.byte	$A5
	.byte	$D6
	.byte	$D7
	.byte	$E7
	.byte	$F7
	.byte	$D6
	.byte	$D7
	.byte	$E7
	.byte	$F7
	.byte	$95
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$95
	.byte	$92
	.byte	$03
	.byte	$07
	.byte	$B5
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$B5
	.byte	$92
	.byte	$03
	.byte	$07
	.byte	$A5
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$B5
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$01
	.byte	$03
	.byte	$07
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$B5
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$03
	.byte	$17
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$03
	.byte	$14
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$03
	.byte	$14
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$01
	.byte	$81
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$81
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$81
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$82
	.byte	$01
	.byte	$01
	.byte	$80
	.byte	$12
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$80
	.byte	$12
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$01
	.byte	$82
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$01
	.byte	$80
	.byte	$82
	.byte	$03
	.byte	$11
	.byte	$80
	.byte	$01
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$01
	.byte	$81
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$03
	.byte	$17
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$03
	.byte	$15
	.byte	$07
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$82
	.byte	$01
	.byte	$03
	.byte	$07
	.byte	$07
	.byte	$01
	.byte	$03
	.byte	$0E
	.byte	$82
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$03
	.byte	$17
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$03
	.byte	$17
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$01
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$82
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$82
	.byte	$03
	.byte	$03
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$01
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$01
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$82
	.byte	$01
	.byte	$03
	.byte	$17
	.byte	$82
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$03
	.byte	$17
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$03
	.byte	$12
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$01
	.byte	$03
	.byte	$17
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$80
	.byte	$12
	.byte	$03
	.byte	$17
	.byte	$80
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$81
	.byte	$82
	.byte	$03
	.byte	$03
	.byte	$80
	.byte	$82
	.byte	$03
	.byte	$03
	.byte	$80
	.byte	$82
	.byte	$03
	.byte	$03
	.byte	$80
	.byte	$82
	.byte	$03
	.byte	$03
	.byte	$80
	.byte	$82
	.byte	$03
	.byte	$03
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$22
	.byte	$FF
	.byte	$03
	.byte	$07
	.byte	$55
	.byte	$03
	.byte	$08
	.byte	$50
	.byte	$50
	.byte	$AA
	.byte	$A2
	.byte	$60
	.byte	$50
	.byte	$55
	.byte	$03
	.byte	$03
	.byte	$51
	.byte	$54
	.byte	$55
	.byte	$03
	.byte	$0B
	.byte	$15
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$45
	.byte	$55
	.byte	$03
	.byte	$08
	.byte	$05
	.byte	$03
	.byte	$06
	.byte	$05
	.byte	$03
	.byte	$00
_story:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$54
	.byte	$68
	.byte	$65
	.byte	$00
	.byte	$63
	.byte	$69
	.byte	$74
	.byte	$79
	.byte	$00
	.byte	$6F
	.byte	$66
	.byte	$00
	.byte	$58
	.byte	$79
	.byte	$6C
	.byte	$65
	.byte	$72
	.byte	$69
	.byte	$61
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$77
	.byte	$61
	.byte	$73
	.byte	$00
	.byte	$72
	.byte	$75
	.byte	$6C
	.byte	$65
	.byte	$64
	.byte	$00
	.byte	$62
	.byte	$79
	.byte	$00
	.byte	$4B
	.byte	$68
	.byte	$61
	.byte	$72
	.byte	$7A
	.byte	$6F
	.byte	$69
	.byte	$64
	.byte	$2C
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$61
	.byte	$00
	.byte	$64
	.byte	$61
	.byte	$72
	.byte	$6B
	.byte	$00
	.byte	$61
	.byte	$6E
	.byte	$64
	.byte	$00
	.byte	$70
	.byte	$6F
	.byte	$77
	.byte	$65
	.byte	$72
	.byte	$66
	.byte	$75
	.byte	$6C
	.byte	$00
	.byte	$77
	.byte	$69
	.byte	$7A
	.byte	$61
	.byte	$72
	.byte	$64
	.byte	$00
	.byte	$01
	.byte	$25
	.byte	$49
	.byte	$6E
	.byte	$00
	.byte	$68
	.byte	$69
	.byte	$73
	.byte	$00
	.byte	$74
	.byte	$77
	.byte	$69
	.byte	$73
	.byte	$74
	.byte	$65
	.byte	$64
	.byte	$00
	.byte	$69
	.byte	$6D
	.byte	$61
	.byte	$67
	.byte	$69
	.byte	$6E
	.byte	$61
	.byte	$74
	.byte	$69
	.byte	$6F
	.byte	$6E
	.byte	$2C
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$68
	.byte	$65
	.byte	$00
	.byte	$63
	.byte	$6F
	.byte	$6E
	.byte	$63
	.byte	$65
	.byte	$69
	.byte	$76
	.byte	$65
	.byte	$64
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$64
	.byte	$69
	.byte	$61
	.byte	$62
	.byte	$6F
	.byte	$6C
	.byte	$69
	.byte	$63
	.byte	$61
	.byte	$6C
	.byte	$00
	.byte	$67
	.byte	$61
	.byte	$6D
	.byte	$65
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$66
	.byte	$69
	.byte	$6C
	.byte	$6C
	.byte	$65
	.byte	$64
	.byte	$00
	.byte	$77
	.byte	$69
	.byte	$74
	.byte	$68
	.byte	$00
	.byte	$74
	.byte	$72
	.byte	$61
	.byte	$70
	.byte	$73
	.byte	$00
	.byte	$61
	.byte	$6E
	.byte	$64
	.byte	$00
	.byte	$66
	.byte	$6F
	.byte	$65
	.byte	$73
	.byte	$00
	.byte	$01
	.byte	$25
	.byte	$45
	.byte	$61
	.byte	$63
	.byte	$68
	.byte	$00
	.byte	$79
	.byte	$65
	.byte	$61
	.byte	$72
	.byte	$2C
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$70
	.byte	$72
	.byte	$69
	.byte	$73
	.byte	$6F
	.byte	$6E
	.byte	$65
	.byte	$72
	.byte	$00
	.byte	$77
	.byte	$6F
	.byte	$75
	.byte	$6C
	.byte	$64
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$67
	.byte	$65
	.byte	$74
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$63
	.byte	$68
	.byte	$61
	.byte	$6E
	.byte	$63
	.byte	$65
	.byte	$00
	.byte	$6F
	.byte	$66
	.byte	$00
	.byte	$72
	.byte	$65
	.byte	$64
	.byte	$65
	.byte	$6D
	.byte	$70
	.byte	$74
	.byte	$69
	.byte	$6F
	.byte	$6E
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$69
	.byte	$66
	.byte	$00
	.byte	$68
	.byte	$65
	.byte	$00
	.byte	$63
	.byte	$6F
	.byte	$75
	.byte	$6C
	.byte	$64
	.byte	$00
	.byte	$73
	.byte	$75
	.byte	$63
	.byte	$63
	.byte	$65
	.byte	$65
	.byte	$64
	.byte	$00
	.byte	$74
	.byte	$68
	.byte	$65
	.byte	$00
	.byte	$54
	.byte	$72
	.byte	$69
	.byte	$61
	.byte	$6C
	.byte	$00
	.byte	$01
	.byte	$24
	.byte	$48
	.byte	$69
	.byte	$73
	.byte	$00
	.byte	$73
	.byte	$6F
	.byte	$75
	.byte	$6C
	.byte	$00
	.byte	$77
	.byte	$61
	.byte	$73
	.byte	$00
	.byte	$74
	.byte	$72
	.byte	$61
	.byte	$6E
	.byte	$73
	.byte	$66
	.byte	$65
	.byte	$72
	.byte	$72
	.byte	$65
	.byte	$64
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$69
	.byte	$6E
	.byte	$74
	.byte	$6F
	.byte	$00
	.byte	$61
	.byte	$00
	.byte	$6D
	.byte	$61
	.byte	$67
	.byte	$69
	.byte	$63
	.byte	$61
	.byte	$6C
	.byte	$00
	.byte	$73
	.byte	$6B
	.byte	$75
	.byte	$6C
	.byte	$6C
	.byte	$00
	.byte	$01
	.byte	$2B
	.byte	$49
	.byte	$66
	.byte	$00
	.byte	$69
	.byte	$74
	.byte	$00
	.byte	$67
	.byte	$6F
	.byte	$74
	.byte	$00
	.byte	$64
	.byte	$65
	.byte	$73
	.byte	$74
	.byte	$72
	.byte	$6F
	.byte	$79
	.byte	$65
	.byte	$64
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$68
	.byte	$69
	.byte	$73
	.byte	$00
	.byte	$73
	.byte	$6F
	.byte	$75
	.byte	$6C
	.byte	$00
	.byte	$77
	.byte	$61
	.byte	$73
	.byte	$00
	.byte	$6C
	.byte	$6F
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$2A
	.byte	$41
	.byte	$00
	.byte	$62
	.byte	$72
	.byte	$61
	.byte	$76
	.byte	$65
	.byte	$00
	.byte	$61
	.byte	$6E
	.byte	$64
	.byte	$00
	.byte	$63
	.byte	$6F
	.byte	$75
	.byte	$72
	.byte	$61
	.byte	$67
	.byte	$65
	.byte	$6F
	.byte	$75
	.byte	$73
	.byte	$00
	.byte	$6D
	.byte	$61
	.byte	$6E
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$73
	.byte	$74
	.byte	$6F
	.byte	$6F
	.byte	$64
	.byte	$00
	.byte	$75
	.byte	$70
	.byte	$00
	.byte	$74
	.byte	$6F
	.byte	$00
	.byte	$74
	.byte	$68
	.byte	$65
	.byte	$00
	.byte	$63
	.byte	$68
	.byte	$61
	.byte	$6C
	.byte	$6C
	.byte	$65
	.byte	$6E
	.byte	$67
	.byte	$65
	.byte	$00
	.byte	$01
	.byte	$2A
	.byte	$48
	.byte	$65
	.byte	$00
	.byte	$77
	.byte	$61
	.byte	$73
	.byte	$00
	.byte	$70
	.byte	$75
	.byte	$74
	.byte	$00
	.byte	$69
	.byte	$6E
	.byte	$00
	.byte	$6A
	.byte	$61
	.byte	$69
	.byte	$6C
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$61
	.byte	$6C
	.byte	$74
	.byte	$68
	.byte	$6F
	.byte	$75
	.byte	$67
	.byte	$68
	.byte	$00
	.byte	$68
	.byte	$65
	.byte	$00
	.byte	$77
	.byte	$61
	.byte	$73
	.byte	$00
	.byte	$66
	.byte	$61
	.byte	$75
	.byte	$6C
	.byte	$74
	.byte	$6C
	.byte	$65
	.byte	$73
	.byte	$73
	.byte	$00
	.byte	$01
	.byte	$29
	.byte	$48
	.byte	$65
	.byte	$00
	.byte	$77
	.byte	$61
	.byte	$69
	.byte	$74
	.byte	$65
	.byte	$64
	.byte	$00
	.byte	$70
	.byte	$61
	.byte	$74
	.byte	$69
	.byte	$65
	.byte	$6E
	.byte	$74
	.byte	$6C
	.byte	$79
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$66
	.byte	$6F
	.byte	$72
	.byte	$00
	.byte	$74
	.byte	$68
	.byte	$65
	.byte	$00
	.byte	$64
	.byte	$61
	.byte	$79
	.byte	$00
	.byte	$6F
	.byte	$66
	.byte	$00
	.byte	$74
	.byte	$68
	.byte	$65
	.byte	$00
	.byte	$54
	.byte	$72
	.byte	$69
	.byte	$61
	.byte	$6C
	.byte	$00
	.byte	$01
	.byte	$4A
	.byte	$54
	.byte	$68
	.byte	$65
	.byte	$00
	.byte	$64
	.byte	$61
	.byte	$79
	.byte	$00
	.byte	$6F
	.byte	$66
	.byte	$00
	.byte	$72
	.byte	$65
	.byte	$76
	.byte	$65
	.byte	$6E
	.byte	$67
	.byte	$65
	.byte	$00
	.byte	$01
	.byte	$26
	.byte	$FF
	.byte	$01
	.byte	$37
	.byte	$0F
	.byte	$01
	.byte	$06
	.byte	$0F
	.byte	$01
	.byte	$00
_title_screen:
	.byte	$0E
	.byte	$0F
	.byte	$0E
	.byte	$4B
	.byte	$13
	.byte	$14
	.byte	$17
	.byte	$18
	.byte	$1B
	.byte	$1C
	.byte	$1F
	.byte	$20
	.byte	$0F
	.byte	$0E
	.byte	$13
	.byte	$10
	.byte	$0F
	.byte	$11
	.byte	$12
	.byte	$15
	.byte	$16
	.byte	$19
	.byte	$1A
	.byte	$1D
	.byte	$1E
	.byte	$21
	.byte	$22
	.byte	$0F
	.byte	$0E
	.byte	$13
	.byte	$23
	.byte	$0F
	.byte	$25
	.byte	$0F
	.byte	$28
	.byte	$0F
	.byte	$0E
	.byte	$08
	.byte	$2D
	.byte	$2E
	.byte	$0F
	.byte	$0E
	.byte	$0F
	.byte	$23
	.byte	$24
	.byte	$26
	.byte	$27
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$0F
	.byte	$0E
	.byte	$05
	.byte	$2C
	.byte	$2F
	.byte	$30
	.byte	$0F
	.byte	$0E
	.byte	$0F
	.byte	$31
	.byte	$32
	.byte	$34
	.byte	$35
	.byte	$37
	.byte	$38
	.byte	$3A
	.byte	$3B
	.byte	$3E
	.byte	$3F
	.byte	$42
	.byte	$43
	.byte	$46
	.byte	$47
	.byte	$4A
	.byte	$4B
	.byte	$0F
	.byte	$0E
	.byte	$0F
	.byte	$33
	.byte	$0F
	.byte	$25
	.byte	$36
	.byte	$25
	.byte	$39
	.byte	$3C
	.byte	$3D
	.byte	$40
	.byte	$41
	.byte	$44
	.byte	$45
	.byte	$48
	.byte	$49
	.byte	$4C
	.byte	$4D
	.byte	$0F
	.byte	$0E
	.byte	$0F
	.byte	$4E
	.byte	$0F
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$0F
	.byte	$0E
	.byte	$04
	.byte	$53
	.byte	$0F
	.byte	$0E
	.byte	$1D
	.byte	$52
	.byte	$54
	.byte	$0F
	.byte	$0E
	.byte	$35
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$0F
	.byte	$0F
	.byte	$59
	.byte	$5A
	.byte	$5B
	.byte	$0F
	.byte	$0E
	.byte	$16
	.byte	$5C
	.byte	$5E
	.byte	$5F
	.byte	$62
	.byte	$0F
	.byte	$65
	.byte	$66
	.byte	$69
	.byte	$6A
	.byte	$6D
	.byte	$0F
	.byte	$0E
	.byte	$15
	.byte	$5D
	.byte	$60
	.byte	$61
	.byte	$63
	.byte	$64
	.byte	$67
	.byte	$68
	.byte	$6B
	.byte	$6C
	.byte	$6E
	.byte	$6F
	.byte	$E3
	.byte	$0F
	.byte	$0E
	.byte	$13
	.byte	$70
	.byte	$72
	.byte	$73
	.byte	$E4
	.byte	$E5
	.byte	$76
	.byte	$77
	.byte	$7A
	.byte	$7B
	.byte	$7E
	.byte	$7F
	.byte	$0F
	.byte	$0F
	.byte	$82
	.byte	$83
	.byte	$0F
	.byte	$0E
	.byte	$10
	.byte	$71
	.byte	$74
	.byte	$75
	.byte	$E6
	.byte	$E7
	.byte	$78
	.byte	$79
	.byte	$7C
	.byte	$7D
	.byte	$80
	.byte	$81
	.byte	$E8
	.byte	$E9
	.byte	$84
	.byte	$85
	.byte	$0F
	.byte	$0E
	.byte	$11
	.byte	$86
	.byte	$87
	.byte	$8A
	.byte	$8B
	.byte	$EA
	.byte	$EB
	.byte	$8E
	.byte	$8F
	.byte	$92
	.byte	$93
	.byte	$EE
	.byte	$EF
	.byte	$96
	.byte	$97
	.byte	$0F
	.byte	$0E
	.byte	$11
	.byte	$88
	.byte	$89
	.byte	$8C
	.byte	$8D
	.byte	$EC
	.byte	$ED
	.byte	$90
	.byte	$91
	.byte	$94
	.byte	$95
	.byte	$F0
	.byte	$F1
	.byte	$98
	.byte	$0F
	.byte	$0E
	.byte	$10
	.byte	$99
	.byte	$9A
	.byte	$9D
	.byte	$0F
	.byte	$0E
	.byte	$02
	.byte	$9E
	.byte	$9F
	.byte	$A2
	.byte	$A3
	.byte	$0F
	.byte	$A6
	.byte	$A9
	.byte	$AA
	.byte	$F4
	.byte	$F5
	.byte	$F7
	.byte	$0F
	.byte	$0E
	.byte	$0E
	.byte	$9B
	.byte	$9C
	.byte	$0F
	.byte	$0F
	.byte	$F2
	.byte	$F3
	.byte	$A0
	.byte	$A1
	.byte	$A4
	.byte	$A5
	.byte	$A7
	.byte	$A8
	.byte	$AB
	.byte	$0F
	.byte	$0F
	.byte	$F6
	.byte	$F8
	.byte	$F9
	.byte	$0F
	.byte	$0E
	.byte	$0D
	.byte	$AC
	.byte	$AD
	.byte	$0F
	.byte	$0E
	.byte	$03
	.byte	$B4
	.byte	$B5
	.byte	$B8
	.byte	$B9
	.byte	$FA
	.byte	$0F
	.byte	$0E
	.byte	$03
	.byte	$FD
	.byte	$FE
	.byte	$FF
	.byte	$0F
	.byte	$0E
	.byte	$0D
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B6
	.byte	$B7
	.byte	$BA
	.byte	$BB
	.byte	$FB
	.byte	$FC
	.byte	$0F
	.byte	$0E
	.byte	$14
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$C0
	.byte	$C1
	.byte	$C4
	.byte	$C5
	.byte	$C8
	.byte	$C9
	.byte	$CC
	.byte	$CD
	.byte	$0F
	.byte	$0E
	.byte	$15
	.byte	$2F
	.byte	$BF
	.byte	$C2
	.byte	$C3
	.byte	$C6
	.byte	$C7
	.byte	$CA
	.byte	$CB
	.byte	$CE
	.byte	$CF
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$0F
	.byte	$0E
	.byte	$13
	.byte	$D3
	.byte	$D5
	.byte	$D6
	.byte	$D2
	.byte	$0F
	.byte	$0F
	.byte	$D9
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$E1
	.byte	$0F
	.byte	$0E
	.byte	$13
	.byte	$D4
	.byte	$0F
	.byte	$0F
	.byte	$D7
	.byte	$D8
	.byte	$DA
	.byte	$DB
	.byte	$98
	.byte	$0F
	.byte	$0F
	.byte	$E0
	.byte	$E2
	.byte	$0F
	.byte	$0E
	.byte	$2D
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$04
	.byte	$07
	.byte	$08
	.byte	$0F
	.byte	$0E
	.byte	$05
	.byte	$09
	.byte	$08
	.byte	$0A
	.byte	$0F
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$08
	.byte	$0F
	.byte	$0E
	.byte	$43
	.byte	$00
	.byte	$0E
	.byte	$08
	.byte	$B3
	.byte	$A2
	.byte	$A0
	.byte	$0E
	.byte	$03
	.byte	$00
	.byte	$0E
	.byte	$02
	.byte	$50
	.byte	$50
	.byte	$10
	.byte	$00
	.byte	$0E
	.byte	$04
	.byte	$A5
	.byte	$55
	.byte	$55
	.byte	$91
	.byte	$00
	.byte	$0E
	.byte	$02
	.byte	$40
	.byte	$58
	.byte	$56
	.byte	$55
	.byte	$59
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$55
	.byte	$0E
	.byte	$03
	.byte	$11
	.byte	$00
	.byte	$0E
	.byte	$02
	.byte	$05
	.byte	$0E
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$0E
	.byte	$07
	.byte	$00
	.byte	$0E
	.byte	$00
_bombable:
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$A0
	.byte	$81
	.byte	$03
	.byte	$1C
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$02
	.byte	$03
	.byte	$1A
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$07
	.byte	$01
	.byte	$03
	.byte	$19
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$03
	.byte	$18
	.byte	$07
	.byte	$01
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$03
	.byte	$1A
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$07
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$17
	.byte	$17
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$03
	.byte	$0D
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$17
	.byte	$17
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$03
	.byte	$0D
	.byte	$17
	.byte	$17
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$17
	.byte	$17
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$17
	.byte	$17
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$07
	.byte	$01
	.byte	$03
	.byte	$07
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$17
	.byte	$17
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$03
	.byte	$09
	.byte	$17
	.byte	$17
	.byte	$01
	.byte	$01
	.byte	$17
	.byte	$17
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$17
	.byte	$17
	.byte	$01
	.byte	$03
	.byte	$11
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$17
	.byte	$17
	.byte	$01
	.byte	$03
	.byte	$11
	.byte	$17
	.byte	$17
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$01
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$17
	.byte	$17
	.byte	$0A
	.byte	$0B
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$03
	.byte	$1A
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$03
	.byte	$0E
	.byte	$07
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$01
	.byte	$03
	.byte	$1A
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$12
	.byte	$03
	.byte	$1A
	.byte	$81
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$81
	.byte	$03
	.byte	$1C
	.byte	$00
	.byte	$03
	.byte	$21
	.byte	$FF
	.byte	$03
	.byte	$07
	.byte	$55
	.byte	$03
	.byte	$06
	.byte	$11
	.byte	$55
	.byte	$45
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$45
	.byte	$51
	.byte	$55
	.byte	$44
	.byte	$44
	.byte	$05
	.byte	$05
	.byte	$45
	.byte	$44
	.byte	$15
	.byte	$55
	.byte	$44
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$44
	.byte	$44
	.byte	$11
	.byte	$55
	.byte	$04
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$44
	.byte	$51
	.byte	$55
	.byte	$03
	.byte	$07
	.byte	$05
	.byte	$03
	.byte	$06
	.byte	$01
	.byte	$03
	.byte	$00
_altar:
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$2A
	.byte	$8F
	.byte	$01
	.byte	$02
	.byte	$09
	.byte	$8D
	.byte	$01
	.byte	$01
	.byte	$8E
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$8F
	.byte	$01
	.byte	$02
	.byte	$09
	.byte	$8D
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$9D
	.byte	$9E
	.byte	$01
	.byte	$01
	.byte	$8D
	.byte	$01
	.byte	$02
	.byte	$0E
	.byte	$9F
	.byte	$01
	.byte	$02
	.byte	$09
	.byte	$9F
	.byte	$01
	.byte	$02
	.byte	$0C
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AF
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AF
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$01
	.byte	$02
	.byte	$25
	.byte	$9B
	.byte	$9C
	.byte	$01
	.byte	$02
	.byte	$19
	.byte	$9B
	.byte	$9C
	.byte	$01
	.byte	$01
	.byte	$89
	.byte	$8A
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$84
	.byte	$94
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$89
	.byte	$8A
	.byte	$01
	.byte	$01
	.byte	$99
	.byte	$9A
	.byte	$01
	.byte	$02
	.byte	$0A
	.byte	$B3
	.byte	$A4
	.byte	$B9
	.byte	$B4
	.byte	$01
	.byte	$02
	.byte	$0A
	.byte	$99
	.byte	$9A
	.byte	$01
	.byte	$01
	.byte	$A9
	.byte	$AA
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$B1
	.byte	$01
	.byte	$01
	.byte	$B1
	.byte	$01
	.byte	$01
	.byte	$B1
	.byte	$8B
	.byte	$8C
	.byte	$B1
	.byte	$01
	.byte	$01
	.byte	$B1
	.byte	$01
	.byte	$01
	.byte	$B1
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$A9
	.byte	$AA
	.byte	$01
	.byte	$01
	.byte	$AB
	.byte	$AC
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$B2
	.byte	$01
	.byte	$01
	.byte	$B2
	.byte	$01
	.byte	$01
	.byte	$B2
	.byte	$01
	.byte	$01
	.byte	$B2
	.byte	$01
	.byte	$01
	.byte	$B2
	.byte	$01
	.byte	$01
	.byte	$B2
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$AB
	.byte	$AC
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$A2
	.byte	$A3
	.byte	$B1
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$30
	.byte	$81
	.byte	$82
	.byte	$81
	.byte	$82
	.byte	$81
	.byte	$82
	.byte	$01
	.byte	$02
	.byte	$18
	.byte	$80
	.byte	$91
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$93
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$16
	.byte	$80
	.byte	$A0
	.byte	$81
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$83
	.byte	$90
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$15
	.byte	$90
	.byte	$A0
	.byte	$91
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$92
	.byte	$A0
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$15
	.byte	$A0
	.byte	$B0
	.byte	$A1
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$82
	.byte	$B0
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$15
	.byte	$B0
	.byte	$00
	.byte	$91
	.byte	$93
	.byte	$91
	.byte	$93
	.byte	$91
	.byte	$93
	.byte	$00
	.byte	$B0
	.byte	$01
	.byte	$02
	.byte	$17
	.byte	$00
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$BA
	.byte	$BB
	.byte	$BB
	.byte	$BD
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$BE
	.byte	$BE
	.byte	$01
	.byte	$02
	.byte	$13
	.byte	$BE
	.byte	$BE
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$BF
	.byte	$BF
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$BF
	.byte	$BF
	.byte	$01
	.byte	$02
	.byte	$09
	.byte	$BE
	.byte	$BE
	.byte	$01
	.byte	$02
	.byte	$0F
	.byte	$BE
	.byte	$BE
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$BF
	.byte	$BF
	.byte	$00
	.byte	$02
	.byte	$0F
	.byte	$BF
	.byte	$BF
	.byte	$01
	.byte	$02
	.byte	$0D
	.byte	$BE
	.byte	$02
	.byte	$0F
	.byte	$01
	.byte	$02
	.byte	$0F
	.byte	$BF
	.byte	$02
	.byte	$0F
	.byte	$01
	.byte	$02
	.byte	$47
	.byte	$00
	.byte	$8A
	.byte	$88
	.byte	$30
	.byte	$20
	.byte	$C8
	.byte	$22
	.byte	$20
	.byte	$F0
	.byte	$0F
	.byte	$02
	.byte	$04
	.byte	$0B
	.byte	$F0
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$75
	.byte	$55
	.byte	$02
	.byte	$03
	.byte	$D5
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$F5
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$00
.segment	"BANK3"
_farm:
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$A0
	.byte	$D0
	.byte	$D1
	.byte	$03
	.byte	$03
	.byte	$C2
	.byte	$D1
	.byte	$03
	.byte	$05
	.byte	$C2
	.byte	$D1
	.byte	$03
	.byte	$04
	.byte	$C2
	.byte	$D2
	.byte	$D1
	.byte	$03
	.byte	$03
	.byte	$C2
	.byte	$D1
	.byte	$03
	.byte	$03
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$C0
	.byte	$E0
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$04
	.byte	$11
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$E0
	.byte	$11
	.byte	$03
	.byte	$0F
	.byte	$E2
	.byte	$C0
	.byte	$E0
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$11
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$E0
	.byte	$11
	.byte	$08
	.byte	$03
	.byte	$0E
	.byte	$E2
	.byte	$C0
	.byte	$E0
	.byte	$11
	.byte	$18
	.byte	$03
	.byte	$04
	.byte	$11
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$E0
	.byte	$11
	.byte	$08
	.byte	$03
	.byte	$0E
	.byte	$E2
	.byte	$C0
	.byte	$E0
	.byte	$11
	.byte	$18
	.byte	$03
	.byte	$04
	.byte	$11
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$E0
	.byte	$11
	.byte	$08
	.byte	$03
	.byte	$0E
	.byte	$E2
	.byte	$C0
	.byte	$E0
	.byte	$11
	.byte	$18
	.byte	$03
	.byte	$04
	.byte	$11
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$E0
	.byte	$11
	.byte	$03
	.byte	$0F
	.byte	$E2
	.byte	$C0
	.byte	$E0
	.byte	$11
	.byte	$18
	.byte	$18
	.byte	$08
	.byte	$18
	.byte	$18
	.byte	$11
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$8D
	.byte	$03
	.byte	$03
	.byte	$8E
	.byte	$8D
	.byte	$03
	.byte	$02
	.byte	$E0
	.byte	$11
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$11
	.byte	$E2
	.byte	$D2
	.byte	$E0
	.byte	$11
	.byte	$18
	.byte	$03
	.byte	$04
	.byte	$11
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$8E
	.byte	$8D
	.byte	$03
	.byte	$06
	.byte	$E0
	.byte	$11
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$11
	.byte	$11
	.byte	$E1
	.byte	$11
	.byte	$03
	.byte	$07
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$8D
	.byte	$03
	.byte	$02
	.byte	$8E
	.byte	$8D
	.byte	$03
	.byte	$03
	.byte	$E0
	.byte	$11
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$11
	.byte	$03
	.byte	$06
	.byte	$E1
	.byte	$11
	.byte	$03
	.byte	$02
	.byte	$E1
	.byte	$11
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$8D
	.byte	$03
	.byte	$05
	.byte	$8E
	.byte	$8D
	.byte	$E0
	.byte	$11
	.byte	$05
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$11
	.byte	$E2
	.byte	$D2
	.byte	$D1
	.byte	$03
	.byte	$03
	.byte	$C2
	.byte	$D1
	.byte	$03
	.byte	$05
	.byte	$D0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$F2
	.byte	$C5
	.byte	$F2
	.byte	$F2
	.byte	$C5
	.byte	$F2
	.byte	$C5
	.byte	$F2
	.byte	$E0
	.byte	$11
	.byte	$05
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$11
	.byte	$03
	.byte	$02
	.byte	$E2
	.byte	$C0
	.byte	$02
	.byte	$03
	.byte	$08
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$10
	.byte	$E3
	.byte	$E4
	.byte	$10
	.byte	$10
	.byte	$C3
	.byte	$C4
	.byte	$10
	.byte	$E0
	.byte	$11
	.byte	$05
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$11
	.byte	$03
	.byte	$02
	.byte	$E2
	.byte	$D2
	.byte	$11
	.byte	$03
	.byte	$06
	.byte	$E1
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$9F
	.byte	$F3
	.byte	$F4
	.byte	$9F
	.byte	$9F
	.byte	$D3
	.byte	$D4
	.byte	$9F
	.byte	$E0
	.byte	$11
	.byte	$05
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$11
	.byte	$03
	.byte	$06
	.byte	$E1
	.byte	$01
	.byte	$01
	.byte	$11
	.byte	$03
	.byte	$02
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$8C
	.byte	$03
	.byte	$04
	.byte	$D3
	.byte	$D4
	.byte	$8C
	.byte	$E0
	.byte	$11
	.byte	$05
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$11
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$01
	.byte	$11
	.byte	$03
	.byte	$02
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$01
	.byte	$03
	.byte	$04
	.byte	$E0
	.byte	$E2
	.byte	$01
	.byte	$E0
	.byte	$11
	.byte	$03
	.byte	$0A
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$11
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$E0
	.byte	$E1
	.byte	$11
	.byte	$03
	.byte	$11
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$11
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$E0
	.byte	$11
	.byte	$03
	.byte	$08
	.byte	$E1
	.byte	$11
	.byte	$11
	.byte	$E1
	.byte	$11
	.byte	$03
	.byte	$05
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$11
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$E0
	.byte	$11
	.byte	$03
	.byte	$12
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$11
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$E0
	.byte	$11
	.byte	$03
	.byte	$0E
	.byte	$E1
	.byte	$11
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$11
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$E0
	.byte	$11
	.byte	$03
	.byte	$08
	.byte	$E1
	.byte	$11
	.byte	$03
	.byte	$03
	.byte	$E1
	.byte	$E1
	.byte	$11
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$11
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$E0
	.byte	$E1
	.byte	$11
	.byte	$03
	.byte	$0B
	.byte	$E1
	.byte	$03
	.byte	$04
	.byte	$11
	.byte	$03
	.byte	$06
	.byte	$E1
	.byte	$E2
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$D0
	.byte	$12
	.byte	$03
	.byte	$1B
	.byte	$D2
	.byte	$00
	.byte	$00
	.byte	$92
	.byte	$03
	.byte	$0F
	.byte	$F8
	.byte	$91
	.byte	$F9
	.byte	$92
	.byte	$03
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$0F
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$01
	.byte	$03
	.byte	$0A
	.byte	$00
	.byte	$03
	.byte	$08
	.byte	$AA
	.byte	$03
	.byte	$04
	.byte	$EA
	.byte	$FA
	.byte	$AA
	.byte	$03
	.byte	$08
	.byte	$66
	.byte	$55
	.byte	$99
	.byte	$FF
	.byte	$AB
	.byte	$AA
	.byte	$03
	.byte	$05
	.byte	$FF
	.byte	$AA
	.byte	$AA
	.byte	$BA
	.byte	$AA
	.byte	$03
	.byte	$05
	.byte	$EE
	.byte	$FF
	.byte	$AA
	.byte	$03
	.byte	$06
	.byte	$AF
	.byte	$AA
	.byte	$0A
	.byte	$03
	.byte	$06
	.byte	$0A
	.byte	$03
	.byte	$00
_town_ruins:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$9F
	.byte	$8D
	.byte	$02
	.byte	$05
	.byte	$8E
	.byte	$8D
	.byte	$02
	.byte	$05
	.byte	$8E
	.byte	$8D
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$E0
	.byte	$E2
	.byte	$F1
	.byte	$01
	.byte	$01
	.byte	$F1
	.byte	$01
	.byte	$01
	.byte	$F1
	.byte	$8D
	.byte	$8E
	.byte	$8D
	.byte	$02
	.byte	$03
	.byte	$8E
	.byte	$8D
	.byte	$02
	.byte	$04
	.byte	$8E
	.byte	$8D
	.byte	$02
	.byte	$08
	.byte	$01
	.byte	$E0
	.byte	$E2
	.byte	$01
	.byte	$8D
	.byte	$02
	.byte	$0A
	.byte	$9D
	.byte	$9E
	.byte	$8D
	.byte	$9D
	.byte	$9E
	.byte	$8D
	.byte	$9D
	.byte	$9E
	.byte	$8D
	.byte	$02
	.byte	$05
	.byte	$8E
	.byte	$8D
	.byte	$8D
	.byte	$01
	.byte	$E0
	.byte	$E2
	.byte	$01
	.byte	$8D
	.byte	$02
	.byte	$06
	.byte	$9D
	.byte	$9E
	.byte	$8D
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$BC
	.byte	$AD
	.byte	$AE
	.byte	$BC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$C5
	.byte	$02
	.byte	$07
	.byte	$8D
	.byte	$8D
	.byte	$8E
	.byte	$8D
	.byte	$8D
	.byte	$8E
	.byte	$8D
	.byte	$02
	.byte	$03
	.byte	$BC
	.byte	$AD
	.byte	$AE
	.byte	$BC
	.byte	$C5
	.byte	$BD
	.byte	$BE
	.byte	$F2
	.byte	$BD
	.byte	$BE
	.byte	$C5
	.byte	$BD
	.byte	$BE
	.byte	$F2
	.byte	$8F
	.byte	$E3
	.byte	$E4
	.byte	$8F
	.byte	$C3
	.byte	$C4
	.byte	$F2
	.byte	$F2
	.byte	$8E
	.byte	$8D
	.byte	$02
	.byte	$07
	.byte	$8E
	.byte	$C5
	.byte	$BD
	.byte	$BE
	.byte	$F2
	.byte	$BF
	.byte	$02
	.byte	$09
	.byte	$9F
	.byte	$F3
	.byte	$F4
	.byte	$9F
	.byte	$D3
	.byte	$D4
	.byte	$9F
	.byte	$9F
	.byte	$01
	.byte	$E0
	.byte	$E2
	.byte	$F1
	.byte	$BF
	.byte	$02
	.byte	$09
	.byte	$8F
	.byte	$E3
	.byte	$E4
	.byte	$8F
	.byte	$C3
	.byte	$C4
	.byte	$9C
	.byte	$E3
	.byte	$E4
	.byte	$8F
	.byte	$8C
	.byte	$02
	.byte	$03
	.byte	$D3
	.byte	$D4
	.byte	$8C
	.byte	$8C
	.byte	$01
	.byte	$E0
	.byte	$E2
	.byte	$01
	.byte	$8F
	.byte	$C3
	.byte	$C4
	.byte	$8F
	.byte	$E3
	.byte	$E4
	.byte	$9C
	.byte	$E3
	.byte	$E4
	.byte	$8F
	.byte	$9F
	.byte	$F3
	.byte	$F4
	.byte	$9F
	.byte	$D3
	.byte	$D4
	.byte	$9F
	.byte	$F3
	.byte	$F4
	.byte	$9F
	.byte	$F1
	.byte	$F1
	.byte	$01
	.byte	$F1
	.byte	$E0
	.byte	$E2
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$E0
	.byte	$E2
	.byte	$01
	.byte	$9F
	.byte	$D3
	.byte	$D4
	.byte	$9F
	.byte	$F3
	.byte	$F4
	.byte	$9F
	.byte	$F3
	.byte	$F4
	.byte	$9F
	.byte	$8C
	.byte	$02
	.byte	$03
	.byte	$D3
	.byte	$D4
	.byte	$8C
	.byte	$02
	.byte	$03
	.byte	$F1
	.byte	$01
	.byte	$E0
	.byte	$11
	.byte	$02
	.byte	$06
	.byte	$E2
	.byte	$01
	.byte	$8C
	.byte	$D3
	.byte	$D4
	.byte	$8C
	.byte	$02
	.byte	$06
	.byte	$F1
	.byte	$C1
	.byte	$E5
	.byte	$E6
	.byte	$E0
	.byte	$E2
	.byte	$E5
	.byte	$E6
	.byte	$F1
	.byte	$01
	.byte	$E0
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$11
	.byte	$02
	.byte	$04
	.byte	$E2
	.byte	$F1
	.byte	$E0
	.byte	$E2
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$E5
	.byte	$E6
	.byte	$C0
	.byte	$01
	.byte	$01
	.byte	$C1
	.byte	$F5
	.byte	$F6
	.byte	$E0
	.byte	$E2
	.byte	$F5
	.byte	$F6
	.byte	$E0
	.byte	$11
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$11
	.byte	$02
	.byte	$0A
	.byte	$E2
	.byte	$F5
	.byte	$F6
	.byte	$C0
	.byte	$01
	.byte	$01
	.byte	$C1
	.byte	$E0
	.byte	$11
	.byte	$02
	.byte	$12
	.byte	$04
	.byte	$04
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$E2
	.byte	$F1
	.byte	$F1
	.byte	$C0
	.byte	$01
	.byte	$01
	.byte	$C1
	.byte	$E0
	.byte	$11
	.byte	$02
	.byte	$0A
	.byte	$E2
	.byte	$01
	.byte	$01
	.byte	$E0
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$11
	.byte	$02
	.byte	$04
	.byte	$E2
	.byte	$C0
	.byte	$01
	.byte	$01
	.byte	$C1
	.byte	$E0
	.byte	$11
	.byte	$04
	.byte	$04
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$E1
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$E2
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$8B
	.byte	$E0
	.byte	$11
	.byte	$02
	.byte	$05
	.byte	$E1
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$E2
	.byte	$C0
	.byte	$01
	.byte	$C2
	.byte	$D0
	.byte	$E0
	.byte	$11
	.byte	$04
	.byte	$04
	.byte	$11
	.byte	$02
	.byte	$05
	.byte	$E2
	.byte	$01
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$01
	.byte	$E0
	.byte	$11
	.byte	$02
	.byte	$08
	.byte	$E2
	.byte	$C0
	.byte	$01
	.byte	$11
	.byte	$02
	.byte	$07
	.byte	$04
	.byte	$04
	.byte	$11
	.byte	$11
	.byte	$E2
	.byte	$01
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$01
	.byte	$E0
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$E2
	.byte	$C0
	.byte	$01
	.byte	$11
	.byte	$02
	.byte	$07
	.byte	$04
	.byte	$04
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$E2
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$E0
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$E1
	.byte	$11
	.byte	$04
	.byte	$04
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$E2
	.byte	$C0
	.byte	$01
	.byte	$11
	.byte	$02
	.byte	$06
	.byte	$E1
	.byte	$11
	.byte	$02
	.byte	$05
	.byte	$E2
	.byte	$01
	.byte	$01
	.byte	$E0
	.byte	$11
	.byte	$02
	.byte	$09
	.byte	$E1
	.byte	$E2
	.byte	$C0
	.byte	$01
	.byte	$11
	.byte	$02
	.byte	$1C
	.byte	$E2
	.byte	$C0
	.byte	$01
	.byte	$D1
	.byte	$D0
	.byte	$11
	.byte	$02
	.byte	$15
	.byte	$E1
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$E2
	.byte	$C0
	.byte	$01
	.byte	$01
	.byte	$C1
	.byte	$11
	.byte	$02
	.byte	$1A
	.byte	$E2
	.byte	$C0
	.byte	$01
	.byte	$01
	.byte	$C1
	.byte	$10
	.byte	$02
	.byte	$1B
	.byte	$C0
	.byte	$01
	.byte	$01
	.byte	$C1
	.byte	$D5
	.byte	$02
	.byte	$1B
	.byte	$C0
	.byte	$01
	.byte	$01
	.byte	$C1
	.byte	$D1
	.byte	$02
	.byte	$09
	.byte	$C2
	.byte	$D1
	.byte	$02
	.byte	$0A
	.byte	$C2
	.byte	$D1
	.byte	$02
	.byte	$04
	.byte	$C0
	.byte	$01
	.byte	$02
	.byte	$20
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$55
	.byte	$02
	.byte	$03
	.byte	$99
	.byte	$6A
	.byte	$5A
	.byte	$55
	.byte	$AA
	.byte	$02
	.byte	$04
	.byte	$A6
	.byte	$A5
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$6A
	.byte	$AA
	.byte	$02
	.byte	$04
	.byte	$9A
	.byte	$AA
	.byte	$EA
	.byte	$BA
	.byte	$A6
	.byte	$AA
	.byte	$02
	.byte	$03
	.byte	$A9
	.byte	$AE
	.byte	$AB
	.byte	$AA
	.byte	$A9
	.byte	$AA
	.byte	$6A
	.byte	$5A
	.byte	$02
	.byte	$05
	.byte	$9A
	.byte	$0A
	.byte	$02
	.byte	$06
	.byte	$0A
	.byte	$02
	.byte	$00
.segment	"BANK4"
.segment	"BANK5"
.segment	"BANK6"
.segment	"BANK7"
.segment	"BANK8"
.segment	"BANK9"
.segment	"BANK10"
.segment	"BANK11"
.segment	"BANK12"
.segment	"CODE"

.segment	"BSS"

_bankLevel:
	.res	1,$00
_bankBuffer:
	.res	10,$00
.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_pad_index:
	.res	1,$00
_temp_y_col:
	.res	1,$00
_temp_x_col:
	.res	1,$00
_chr_4_index:
	.res	1,$00
_chr_5_index:
	.res	1,$00
_i:
	.res	1,$00
_j:
	.res	1,$00
_draw_index:
	.res	1,$00
_param1:
	.res	1,$00
_param2:
	.res	1,$00
_param3:
	.res	1,$00
_param4:
	.res	1,$00
_temp:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_is_first:
	.res	1,$00
_temp_speed:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_backup_col_type:
	.res	1,$00
_skull_launched:
	.res	1,$00
_p1_health:
	.res	1,$00
_p1_max_health:
	.res	1,$00
_brick_counter:
	.res	1,$00
_wait_timer:
	.res	1,$00
_level_condition1:
	.res	1,$00
_level_condition2:
	.res	1,$00
_level_bank:
	.res	1,$00
_game_state:
	.res	1,$00
_current_level:
	.res	1,$00
_paddle_count:
	.res	1,$00
_story_step:
	.res	1,$00
_story_counter:
	.res	1,$00
_animation_index:
	.res	1,$00
_frame_count:
	.res	1,$00
_show_face:
	.res	1,$00
_show_item:
	.res	1,$00
_current_item:
	.res	1,$00
_current_selection:
	.res	1,$00
_map_x:
	.res	1,$00
_map_y:
	.res	1,$00
_map_lvl_name_x:
	.res	1,$00
_map_lvl_name_y:
	.res	1,$00
_NECROMANCER:
	.res	1,$00
_GHOST:
	.res	1,$00
_LIGHTNING:
	.res	1,$00
_DEVIL:
	.res	1,$00
_SKELETON1:
	.res	1,$00
_SKELETON2:
	.res	1,$00
_DOOR1:
	.res	1,$00
_DOOR2:
	.res	1,$00
_DOOR3:
	.res	1,$00
_STARS:
	.res	1,$00
_CROW:
	.res	1,$00
_GATE:
	.res	1,$00
_CRATE1:
	.res	1,$00
_CRATE2:
	.res	1,$00
_CRATE3:
	.res	1,$00
_HERO:
	.res	1,$00
_STILL_DECORATION:
	.res	1,$00
_SORCERER:
	.res	1,$00
_TRIGGER:
	.res	1,$00
_TRIGGER2:
	.res	1,$00
_SPECIAL_ITEM:
	.res	1,$00
_animation_array:
	.res	2,$00
_collision_index:
	.res	2,$00
_backup_col_index:
	.res	2,$00
_backup_nt_index:
	.res	2,$00
_scroll_index_y:
	.res	2,$00
.segment	"XRAM"
_wram_array:
	.res	8192,$00
.segment	"BSS"
_c_map:
	.res	368,$00
_current_nametable:
	.res	2,$00
_current_collision_map:
	.res	2,$00
_current_background_palette:
	.res	2,$00
_current_sprite_palette:
	.res	2,$00
_items:
	.res	18,$00
_actors:
	.res	308,$00
_levels:
	.res	128,$00

; ---------------------------------------------------------------
; void __near__ set_animation_info (void)
; ---------------------------------------------------------------

.segment	"BANK0"

.proc	_set_animation_info: near

.segment	"BANK0"

;
; j = actors.state[draw_index] << 1;
;
	ldy     _draw_index
	lda     _actors+266,y
	asl     a
	sta     _j
;
; switch (actors.type[draw_index]) {
;
	ldy     _draw_index
	lda     _actors+280,y
;
; }
;
	cmp     #$01
	jeq     L0006
	cmp     #$02
	jeq     L0009
	cmp     #$03
	jeq     L004A
	cmp     #$04
	jeq     L000D
	cmp     #$05
	jeq     L0010
	cmp     #$06
	jeq     L0013
	cmp     #$07
	jeq     L0016
	cmp     #$08
	jeq     L0019
	cmp     #$09
	jeq     L004B
	cmp     #$0A
	jeq     L001D
	cmp     #$0B
	jeq     L004C
	cmp     #$0C
	jeq     L0021
	cmp     #$0D
	jeq     L0024
	cmp     #$0E
	jeq     L0027
	cmp     #$0F
	jeq     L002A
	cmp     #$10
	jeq     L002D
	cmp     #$11
	jeq     L0030
	cmp     #$12
	jeq     L0033
	cmp     #$13
	jeq     L0036
	cmp     #$14
	jeq     L004D
	cmp     #$15
	jeq     L003A
	cmp     #$17
	jeq     L003D
	cmp     #$1C
	jeq     L0044
	cmp     #$1F
	jeq     L0040
	cmp     #$20
	jeq     L004E
	cmp     #$21
	jeq     L004F
	cmp     #$22
	jeq     L004F
	rts
;
; animation_index = skeleton_animation_index[j];
;
L0006:	ldy     _j
	lda     _skeleton_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = skeleton_animation_index[j];
;
	ldy     _j
	lda     _skeleton_animation_index,y
	sta     _frame_count
;
; animation_array = skeleton_animation;
;
	lda     #>(_skeleton_animation)
	sta     _animation_array+1
	lda     #<(_skeleton_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = glass_animation_index[j];
;
L0009:	ldy     _j
	lda     _glass_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = glass_animation_index[j];
;
	ldy     _j
	lda     _glass_animation_index,y
	sta     _frame_count
;
; animation_array = glass_animation;
;
	lda     #>(_glass_animation)
	sta     _animation_array+1
	lda     #<(_glass_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = 0;
;
L004A:	lda     #$00
	sta     _animation_index
;
; frame_count = 1;
;
	lda     #$01
	sta     _frame_count
;
; animation_array = crate_animation;
;
	lda     #>(_crate_animation)
	sta     _animation_array+1
	lda     #<(_crate_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = house_door_animation_index[j];
;
L000D:	ldy     _j
	lda     _house_door_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = house_door_animation_index[j];
;
	ldy     _j
	lda     _house_door_animation_index,y
	sta     _frame_count
;
; animation_array = house_door_animation;
;
	lda     #>(_house_door_animation)
	sta     _animation_array+1
	lda     #<(_house_door_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = crow_animation_index[j];
;
L0010:	ldy     _j
	lda     _crow_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = crow_animation_index[j];
;
	ldy     _j
	lda     _crow_animation_index,y
	sta     _frame_count
;
; animation_array = crow_animation;
;
	lda     #>(_crow_animation)
	sta     _animation_array+1
	lda     #<(_crow_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = devil_animation_index[j];
;
L0013:	ldy     _j
	lda     _devil_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = devil_animation_index[j];
;
	ldy     _j
	lda     _devil_animation_index,y
	sta     _frame_count
;
; animation_array = devil_animation;
;
	lda     #>(_devil_animation)
	sta     _animation_array+1
	lda     #<(_devil_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = skull_animation_index[j];
;
L0016:	ldy     _j
	lda     _skull_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = skull_animation_index[j];
;
	ldy     _j
	lda     _skull_animation_index,y
	sta     _frame_count
;
; animation_array = skull_animation;
;
	lda     #>(_skull_animation)
	sta     _animation_array+1
	lda     #<(_skull_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = gate_animation_index[j];
;
L0019:	ldy     _j
	lda     _gate_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = gate_animation_index[j];
;
	ldy     _j
	lda     _gate_animation_index,y
	sta     _frame_count
;
; animation_array = gate_animation;
;
	lda     #>(_gate_animation)
	sta     _animation_array+1
	lda     #<(_gate_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = 0;
;
L004B:	lda     #$00
	sta     _animation_index
;
; frame_count = 1;
;
	lda     #$01
	sta     _frame_count
;
; animation_array = tree_animation;
;
	lda     #>(_tree_animation)
	sta     _animation_array+1
	lda     #<(_tree_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = angelic_animation_index[j];
;
L001D:	ldy     _j
	lda     _angelic_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = angelic_animation_index[j];
;
	ldy     _j
	lda     _angelic_animation_index,y
	sta     _frame_count
;
; animation_array = angelic_animation;
;
	lda     #>(_angelic_animation)
	sta     _animation_array+1
	lda     #<(_angelic_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = 0;
;
L004C:	lda     #$00
	sta     _animation_index
;
; frame_count = 1;
;
	lda     #$01
	sta     _frame_count
;
; animation_array = skull_pile_animation;
;
	lda     #>(_skull_pile_animation)
	sta     _animation_array+1
	lda     #<(_skull_pile_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = lightning_animation_index[j];
;
L0021:	ldy     _j
	lda     _lightning_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = lightning_animation_index[j];
;
	ldy     _j
	lda     _lightning_animation_index,y
	sta     _frame_count
;
; animation_array = lightning_animation;
;
	lda     #>(_lightning_animation)
	sta     _animation_array+1
	lda     #<(_lightning_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = necromancer_animation_index[j];
;
L0024:	ldy     _j
	lda     _necromancer_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = necromancer_animation_index[j];
;
	ldy     _j
	lda     _necromancer_animation_index,y
	sta     _frame_count
;
; animation_array = necromancer_animation;
;
	lda     #>(_necromancer_animation)
	sta     _animation_array+1
	lda     #<(_necromancer_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = stars_animation_index[j];
;
L0027:	ldy     _j
	lda     _stars_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = stars_animation_index[j];
;
	ldy     _j
	lda     _stars_animation_index,y
	sta     _frame_count
;
; animation_array = stars_animation;
;
	lda     #>(_stars_animation)
	sta     _animation_array+1
	lda     #<(_stars_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = villager_animation_index[j];
;
L002A:	ldy     _j
	lda     _villager_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = villager_animation_index[j];
;
	ldy     _j
	lda     _villager_animation_index,y
	sta     _frame_count
;
; animation_array = villager_animation;
;
	lda     #>(_villager_animation)
	sta     _animation_array+1
	lda     #<(_villager_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = torch_animation_index[j];
;
L002D:	ldy     _j
	lda     _torch_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = torch_animation_index[j];
;
	ldy     _j
	lda     _torch_animation_index,y
	sta     _frame_count
;
; animation_array = torch_animation;
;
	lda     #>(_torch_animation)
	sta     _animation_array+1
	lda     #<(_torch_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = hero_animation_index[j];
;
L0030:	ldy     _j
	lda     _hero_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = hero_animation_index[j];
;
	ldy     _j
	lda     _hero_animation_index,y
	sta     _frame_count
;
; animation_array = hero_animation;
;
	lda     #>(_hero_animation)
	sta     _animation_array+1
	lda     #<(_hero_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = sorcerer_animation_index[j];
;
L0033:	ldy     _j
	lda     _sorcerer_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = sorcerer_animation_index[j];
;
	ldy     _j
	lda     _sorcerer_animation_index,y
	sta     _frame_count
;
; animation_array = sorcerer_animation;
;
	lda     #>(_sorcerer_animation)
	sta     _animation_array+1
	lda     #<(_sorcerer_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = fireball_animation_index[j];
;
L0036:	ldy     _j
	lda     _fireball_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = fireball_animation_index[j];
;
	ldy     _j
	lda     _fireball_animation_index,y
	sta     _frame_count
;
; animation_array = fireball_animation;
;
	lda     #>(_fireball_animation)
	sta     _animation_array+1
	lda     #<(_fireball_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = 0;
;
L004D:	lda     #$00
	sta     _animation_index
;
; frame_count = 1;
;
	lda     #$01
	sta     _frame_count
;
; animation_array = skeleton_king_animation;
;
	lda     #>(_skeleton_king_animation)
	sta     _animation_array+1
	lda     #<(_skeleton_king_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = skull_door_animation_index[j];
;
L003A:	ldy     _j
	lda     _skull_door_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = skull_door_animation_index[j];
;
	ldy     _j
	lda     _skull_door_animation_index,y
	sta     _frame_count
;
; animation_array = skull_door_animation;
;
	lda     #>(_skull_door_animation)
	sta     _animation_array+1
	lda     #<(_skull_door_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = bomb_animation_index[j];
;
L003D:	ldy     _j
	lda     _bomb_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = bomb_animation_index[j];
;
	ldy     _j
	lda     _bomb_animation_index,y
	sta     _frame_count
;
; animation_array = bomb_animation;
;
	lda     #>(_bomb_animation)
	sta     _animation_array+1
	lda     #<(_bomb_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = cursor_animation_index[j];
;
L0040:	ldy     _j
	lda     _cursor_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = cursor_animation_index[j];
;
	ldy     _j
	lda     _cursor_animation_index,y
	sta     _frame_count
;
; animation_array = cursor_animation;
;
	lda     #>(_cursor_animation)
	sta     _animation_array+1
	lda     #<(_cursor_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = 0;
;
L004E:	lda     #$00
	sta     _animation_index
;
; frame_count = 1;
;
	lda     #$01
	sta     _frame_count
;
; animation_array = scarecrow_animation;
;
	lda     #>(_scarecrow_animation)
	sta     _animation_array+1
	lda     #<(_scarecrow_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = pumpkin_animation_index[j];
;
L0044:	ldy     _j
	lda     _pumpkin_animation_index,y
	sta     _animation_index
;
; ++j;
;
	inc     _j
;
; frame_count = pumpkin_animation_index[j];
;
	ldy     _j
	lda     _pumpkin_animation_index,y
	sta     _frame_count
;
; animation_array = pumpkin_animation;
;
	lda     #>(_pumpkin_animation)
	sta     _animation_array+1
	lda     #<(_pumpkin_animation)
;
; break;
;
	jmp     L0049
;
; animation_index = 0;
;
L004F:	lda     #$00
	sta     _animation_index
;
; frame_count = 1;
;
	lda     #$01
	sta     _frame_count
;
; animation_array = trigger_animation;
;
	lda     #>(_trigger_animation)
	sta     _animation_array+1
	lda     #<(_trigger_animation)
L0049:	sta     _animation_array
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; signed char __near__ get_x_speed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_x_speed: near

.segment	"CODE"

;
; temp_speed = actors.xSpeed[param1] >> 7;                       // Divided by 128
;
	ldy     _param1
	lda     _actors+112,y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp_speed
;
; actors.xRemain[param1] += actors.xSpeed[param1] & 0b01111111;  // MODULO 128
;
	lda     #<(_actors+140)
	ldx     #>(_actors+140)
	clc
	adc     _param1
	bcc     L0003
	inx
L0003:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     _param1
	lda     _actors+112,y
	and     #$7F
	clc
	adc     ptr1
	ldy     #$00
	sta     (sreg),y
;
; temp = 0;
;
	tya
	sta     _temp
;
; temp2 = 0;
;
	sta     _temp2
;
; if (actors.xRemain[param1] > 127) {
;
	ldy     _param1
	lda     _actors+140,y
	cmp     #$80
	bcc     L0005
;
; actors.xRemain[param1] &= 0b01111111;
;
	lda     #<(_actors+140)
	ldx     #>(_actors+140)
	clc
	adc     _param1
	bcc     L0007
	inx
L0007:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$7F
	sta     (ptr1),y
;
; temp = 1;
;
	lda     #$01
	sta     _temp
;
; temp2 = ((actors.xVelocity[param1] > 40) || (actors.xVelocity[param1] % 2)) ? 1 : 0;
;
L0005:	ldy     _param1
	lda     _actors+168,y
	cmp     #$29
	bcs     L0017
	ldy     _param1
	lda     _actors+168,y
	and     #$01
	beq     L0019
L0017:	lda     #$01
L0019:	sta     _temp2
;
; if (actors.xVelocity[param1]) {
;
	ldy     _param1
	ldx     #$00
	lda     _actors+168,y
	beq     L001A
;
; --actors.xVelocity[param1];
;
	lda     #<(_actors+168)
	ldx     #>(_actors+168)
	clc
	adc     _param1
	bcc     L0010
	inx
L0010:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; return (temp_speed + temp + temp2) * actors.xDir[param1];
;
	ldx     #$00
L001A:	lda     _temp_speed
	clc
	adc     _temp
	bcc     L0016
	inx
	clc
L0016:	adc     _temp2
	bcc     L0014
	inx
L0014:	jsr     pushax
	lda     #<(_actors+84)
	ldx     #>(_actors+84)
	clc
	adc     _param1
	bcc     L0011
	inx
L0011:	ldy     #$00
	jsr     ldaidx
	jsr     tosmulax
	ldx     #$00
	cmp     #$80
	bcc     L0001
	dex
;
; }
;
L0001:	rts

.endproc

; ---------------------------------------------------------------
; signed char __near__ get_y_speed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_y_speed: near

.segment	"CODE"

;
; temp_speed = actors.ySpeed[param1] >> 7;                       // Divided by 128
;
	ldy     _param1
	lda     _actors+126,y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp_speed
;
; actors.yRemain[param1] += actors.ySpeed[param1] & 0b01111111;  // MODULO 128
;
	lda     #<(_actors+154)
	ldx     #>(_actors+154)
	clc
	adc     _param1
	bcc     L0003
	inx
L0003:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     _param1
	lda     _actors+126,y
	and     #$7F
	clc
	adc     ptr1
	ldy     #$00
	sta     (sreg),y
;
; temp = 0;
;
	tya
	sta     _temp
;
; temp2 = 0;
;
	sta     _temp2
;
; if (actors.yRemain[param1] > 127) {
;
	ldy     _param1
	lda     _actors+154,y
	cmp     #$80
	bcc     L0005
;
; actors.yRemain[param1] &= 0b01111111;
;
	lda     #<(_actors+154)
	ldx     #>(_actors+154)
	clc
	adc     _param1
	bcc     L0007
	inx
L0007:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$7F
	sta     (ptr1),y
;
; temp = 1;
;
	lda     #$01
	sta     _temp
;
; temp2 = ((actors.yVelocity[param1] > 40) || (actors.yVelocity[param1] % 2)) ? 1 : 0;
;
L0005:	ldy     _param1
	lda     _actors+182,y
	cmp     #$29
	bcs     L0017
	ldy     _param1
	lda     _actors+182,y
	and     #$01
	beq     L0019
L0017:	lda     #$01
L0019:	sta     _temp2
;
; if (actors.yVelocity[param1]) {
;
	ldy     _param1
	ldx     #$00
	lda     _actors+182,y
	beq     L001A
;
; --actors.yVelocity[param1];
;
	lda     #<(_actors+182)
	ldx     #>(_actors+182)
	clc
	adc     _param1
	bcc     L0010
	inx
L0010:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; return (temp_speed + temp + temp2) * actors.yDir[param1];
;
	ldx     #$00
L001A:	lda     _temp_speed
	clc
	adc     _temp
	bcc     L0016
	inx
	clc
L0016:	adc     _temp2
	bcc     L0014
	inx
L0014:	jsr     pushax
	lda     #<(_actors+98)
	ldx     #>(_actors+98)
	clc
	adc     _param1
	bcc     L0011
	inx
L0011:	ldy     #$00
	jsr     ldaidx
	jsr     tosmulax
	ldx     #$00
	cmp     #$80
	bcc     L0001
	dex
;
; }
;
L0001:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ set_torch (unsigned char p_index, unsigned char p_x, unsigned char p_y)
; ---------------------------------------------------------------

.segment	"BANK6"

.proc	_set_torch: near

.segment	"BANK6"

;
; void set_torch(unsigned char p_index, unsigned char p_x, unsigned char p_y) {
;
	jsr     pusha
;
; actors.x[p_index] = p_x;
;
	ldy     #$02
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     _actors,x
;
; actors.y[p_index] = p_y;
;
	iny
	lda     (sp),y
	tax
	ldy     #$00
	lda     (sp),y
	sta     _actors+14,x
;
; actors.animation_delay[p_index] = 8;
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$08
	sta     _actors+238,y
;
; actors.state[p_index] = IDLE;
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$00
	sta     _actors+266,y
;
; actors.type[p_index] = TYPE_TORCHES;
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$10
	sta     _actors+280,y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ do_skull_tile_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_skull_tile_collision: near

.segment	"CODE"

;
; switch (backup_col_type) {
;
	lda     _backup_col_type
;
; }
;
	cmp     #$01
	bne     L0039
;
; }
;
	rts
;
; }
;
L0039:	cmp     #$02
	beq     L0005
	cmp     #$03
	beq     L002F
	cmp     #$04
	jeq     L0030
	cmp     #$05
	jeq     L0032
	cmp     #$06
	jeq     L0033
	cmp     #$07
	jeq     L0013
	cmp     #$08
	jeq     L0023
	cmp     #$09
	jeq     L0026
	cmp     #$0A
	jeq     L0027
	cmp     #$0B
	bne     L003A
;
; }
;
	rts
;
; }
;
L003A:	cmp     #$0C
	bne     L003B
;
; }
;
	rts
;
; }
;
L003B:	cmp     #$0D
	bne     L003C
;
; }
;
	rts
;
; }
;
L003C:	cmp     #$0E
	bne     L003D
;
; }
;
	rts
;
; }
;
L003D:	cmp     #$0F
	bne     L003E
;
; }
;
	rts
;
; }
;
L003E:	rts
;
; if (p1_health) {
;
L0005:	lda     _p1_health
	beq     L0006
;
; --p1_health;
;
	dec     _p1_health
;
; update_health();
;
L0006:	jmp     _update_health
;
; remove_brick(TILE_BACK);
;
L002F:	lda     #$01
	jsr     _remove_brick
;
; backup_nt_index % 2 ? --backup_nt_index : ++backup_nt_index;
;
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	stx     tmp1
	ora     tmp1
	beq     L0008
	lda     _backup_nt_index
	sec
	sbc     #$01
	sta     _backup_nt_index
	bcs     L002D
	dec     _backup_nt_index+1
	jmp     L002D
L0008:	inc     _backup_nt_index
	bne     L002D
	inc     _backup_nt_index+1
;
; hit_brick(TILE_BACK);
;
L002D:	lda     #$01
	jsr     _hit_brick
;
; add_xp(1, HUNDREDS);
;
	lda     #$01
	jsr     pusha
	lda     #$05
	jmp     _add_xp
;
; remove_brick(TILE_BACK);
;
L0030:	lda     #$01
	jsr     _remove_brick
;
; temp = temp_y_col >> 3;
;
	lda     _temp_y_col
	lsr     a
	lsr     a
	lsr     a
	sta     _temp
;
; if (temp % 2) {
;
	and     #$01
	beq     L0031
;
; temp -= 1;
;
	dec     _temp
;
; backup_col_index -= 16;
;
	lda     _backup_col_index
	sec
	sbc     #$10
	sta     _backup_col_index
	bcs     L0010
	dec     _backup_col_index+1
;
; } else {
;
	jmp     L0010
;
; temp += 1;
;
L0031:	inc     _temp
;
; backup_col_index += 16;
;
	lda     #$10
	clc
	adc     _backup_col_index
	sta     _backup_col_index
	bcc     L0010
	inc     _backup_col_index+1
;
; backup_nt_index = NTADR_A(temp_x_col >> 3, temp);
;
L0010:	ldx     #$00
	lda     _temp
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	sta     ptr1
	stx     ptr1+1
	lda     _temp_x_col
	lsr     a
	lsr     a
	lsr     a
	ora     ptr1
	sta     _backup_nt_index
	lda     ptr1+1
	ora     #$20
	sta     _backup_nt_index+1
;
; hit_brick(TILE_BACK);
;
	lda     #$01
	jsr     _hit_brick
;
; add_xp(1, HUNDREDS);
;
	lda     #$01
	jsr     pusha
	lda     #$05
	jmp     _add_xp
;
; hit_brick(TILE_BACK);
;
L0032:	lda     #$01
	jsr     _hit_brick
;
; add_xp(5, TENS);
;
	lda     #$05
	jsr     pusha
	lda     #$06
	jmp     _add_xp
;
; hit_brick(TILE_BACK_GRASS);
;
L0033:	lda     #$18
	jmp     _hit_brick
;
; c_map[backup_col_index] = 0x11;
;
L0013:	lda     _backup_col_index
	clc
	adc     #<(_c_map)
	tay
	lda     _backup_col_index+1
	adc     #>(_c_map)
	tax
	tya
	jsr     pushax
	lda     #$11
	ldy     #$00
	jsr     staspidx
;
; temp = 0b01010101;
;
	lda     #$55
	sta     _temp
;
; if (((temp_y_col >> 3) - 5) % 2) {
;
	ldx     #$00
	lda     _temp_y_col
	lsr     a
	lsr     a
	lsr     a
	sec
	sbc     #$05
	bcs     L0015
	dex
L0015:	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	stx     tmp1
	ora     tmp1
	beq     L0014
;
; if (backup_col_index == 182 || backup_col_index == 185) {
;
	lda     _backup_col_index+1
	bne     L0035
	lda     _backup_col_index
	cmp     #$B6
	beq     L0018
L0035:	lda     _backup_col_index+1
	bne     L0016
	lda     _backup_col_index
	cmp     #$B9
	bne     L0016
;
; temp = 0b10100101;
;
L0018:	lda     #$A5
	sta     _temp
;
; backup_col_index += 16;
;
L0016:	lda     #$10
	clc
	adc     _backup_col_index
	sta     _backup_col_index
	bcc     L0022
	inc     _backup_col_index+1
;
; } else {
;
	jmp     L0022
;
; if (backup_col_index == 198 || backup_col_index == 201) {
;
L0014:	lda     _backup_col_index+1
	bne     L0037
	lda     _backup_col_index
	cmp     #$C6
	beq     L001F
L0037:	lda     _backup_col_index+1
	bne     L001D
	lda     _backup_col_index
	cmp     #$C9
	bne     L001D
;
; temp = 0b10100101;
;
L001F:	lda     #$A5
	sta     _temp
;
; backup_col_index -= 16;
;
L001D:	lda     _backup_col_index
	sec
	sbc     #$10
	sta     _backup_col_index
	bcs     L0022
	dec     _backup_col_index+1
;
; c_map[backup_col_index] = 0x11;
;
L0022:	lda     _backup_col_index
	clc
	adc     #<(_c_map)
	sta     ptr1
	lda     _backup_col_index+1
	adc     #>(_c_map)
	sta     ptr1+1
	lda     #$11
	ldy     #$00
	sta     (ptr1),y
;
; one_vram_buffer(temp, (backup_nt_index & 0x2C00) | 0x3C0 | ((backup_nt_index >> 4) & 0x38) | ((backup_nt_index >> 2) & 0x07));
;
	lda     _temp
	jsr     pusha
	lda     _backup_nt_index+1
	and     #$2C
	tax
	lda     #$C0
	sta     ptr1
	txa
	ora     #$03
	sta     ptr1+1
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     asrax4
	and     #$38
	ora     ptr1
	sta     ptr1
	lda     ptr1+1
	sta     ptr1+1
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     asrax2
	and     #$07
	ora     ptr1
	ldx     ptr1+1
	jsr     _one_vram_buffer
;
; brick_counter -= 4;  // TODO Dynamic tombstone size to allow more design ideas...
;
	lda     _brick_counter
	sec
	sbc     #$04
	sta     _brick_counter
;
; break;
;
	rts
;
; if (actors.counter[SKULL]) {
;
L0023:	lda     _actors+229
	beq     L0034
;
; temp = TILE_BACK;
;
	lda     #$01
;
; } else {
;
	jmp     L002E
;
; temp = TILE_BACK_GRASS;
;
L0034:	lda     #$18
L002E:	sta     _temp
;
; hit_brick(temp);
;
	jmp     _hit_brick
;
; first_hit_long();
;
L0026:	jsr     _first_hit_long
;
; add_xp(1, HUNDREDS);
;
	lda     #$01
	jsr     pusha
	lda     #$05
	jmp     _add_xp
;
; first_hit_small();
;
L0027:	jsr     _first_hit_small
;
; add_xp(5, TENS);
;
	lda     #$05
	jsr     pusha
	lda     #$06
	jmp     _add_xp

.endproc

; ---------------------------------------------------------------
; void __near__ banked_call (unsigned char bankId, void (*method)(void))
; ---------------------------------------------------------------

.segment	"STARTUP"

.proc	_banked_call: near

.segment	"STARTUP"

;
; void banked_call(unsigned char bankId, void (*method)(void)) {
;
	jsr     pushax
;
; bank_push(bankId);
;
	ldy     #$02
	lda     (sp),y
	jsr     _bank_push
;
; (*method)();
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     callax
;
; bank_pop();
;
	jsr     _bank_pop
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ bank_push (unsigned char bankId)
; ---------------------------------------------------------------

.segment	"STARTUP"

.proc	_bank_push: near

.segment	"STARTUP"

;
; void bank_push(unsigned char bankId) {
;
	jsr     pusha
;
; bankBuffer[bankLevel] = bankId;
;
	ldy     #$00
	lda     (sp),y
	ldy     _bankLevel
	sta     _bankBuffer,y
;
; ++bankLevel;
;
	inc     _bankLevel
;
; set_prg_8000(bankId);
;
	ldy     #$00
	lda     (sp),y
	jsr     _set_prg_8000
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ bank_pop (void)
; ---------------------------------------------------------------

.segment	"STARTUP"

.proc	_bank_pop: near

.segment	"STARTUP"

;
; --bankLevel;
;
	dec     _bankLevel
;
; if (bankLevel > 0) {
;
	lda     _bankLevel
	beq     L0005
;
; set_prg_8000(bankBuffer[bankLevel-1]);
;
	ldx     #$00
	lda     _bankLevel
	sec
	sbc     #$01
	bcs     L0003
	dex
L0003:	sta     ptr1
	txa
	clc
	adc     #>(_bankBuffer)
	sta     ptr1+1
	ldy     #<(_bankBuffer)
	lda     (ptr1),y
;
; set_prg_8000(0);
;
L0005:	jmp     _set_prg_8000

.endproc

; ---------------------------------------------------------------
; void __near__ init_paddles (void)
; ---------------------------------------------------------------

.segment	"BANK0"

.proc	_init_paddles: near

.segment	"BANK0"

;
; for (i = 0; i < paddle_count; ++i) {
;
	lda     #$00
	sta     _i
L0012:	lda     _i
	cmp     _paddle_count
	bcs     L0003
;
; if (actors.type[i] == TYPE_PAD_HORZ) {
;
	ldy     _i
	lda     _actors+280,y
	bne     L0006
;
; actors.width[i] = actors.state[i];  // State is PAD_SHORT 16 or PAD_LONG 32
;
	lda     #<(_actors+28)
	ldx     #>(_actors+28)
	clc
	adc     _i
	bcc     L0008
	inx
L0008:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _actors+266,y
	ldy     #$00
	sta     (ptr1),y
;
; actors.height[i] = 0x04;            // 4
;
	ldy     _i
	lda     #$04
	sta     _actors+42,y
;
; actors.bbox_y[i] = 0x02;
;
	ldy     _i
	lda     #$02
	sta     _actors+70,y
;
; } else {
;
	jmp     L000C
;
; actors.width[i] = 0x04;
;
L0006:	ldy     _i
	lda     #$04
	sta     _actors+28,y
;
; actors.height[i] = actors.state[i];
;
	lda     #<(_actors+42)
	ldx     #>(_actors+42)
	clc
	adc     _i
	bcc     L000E
	inx
L000E:	sta     ptr1
	stx     ptr1+1
	ldy     _i
	lda     _actors+266,y
	ldy     #$00
	sta     (ptr1),y
;
; actors.bbox_x[i] = 0x02;
;
	ldy     _i
	lda     #$02
	sta     _actors+56,y
;
; actors.maxSpeed[i] = 250;
;
L000C:	ldy     _i
	lda     #$FA
	sta     _actors+210,y
;
; for (i = 0; i < paddle_count; ++i) {
;
	inc     _i
	jmp     L0012
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_skull (void)
; ---------------------------------------------------------------

.segment	"BANK0"

.proc	_init_skull: near

.segment	"BANK0"

;
; actors.width[SKULL] = 6;
;
	lda     #$06
	sta     _actors+33
;
; actors.height[SKULL] = 6;
;
	sta     _actors+47
;
; actors.bbox_x[SKULL] = 1;
;
	lda     #$01
	sta     _actors+61
;
; actors.bbox_y[SKULL] = 1;
;
	sta     _actors+75
;
; actors.xDir[SKULL] = RIGHT;
;
	sta     _actors+89
;
; actors.yDir[SKULL] = UP;
;
	lda     #$FF
	sta     _actors+103
;
; actors.xSpeed[SKULL] = 100;
;
	lda     #$64
	sta     _actors+117
;
; actors.ySpeed[SKULL] = 100;
;
	sta     _actors+131
;
; actors.minSpeed[SKULL] = 64;
;
	lda     #$40
	sta     _actors+201
;
; actors.maxSpeed[SKULL] = 250;
;
	lda     #$FA
	sta     _actors+215
;
; actors.animation_delay[SKULL] = 8;
;
	lda     #$08
	sta     _actors+243
;
; actors.type[SKULL] = TYPE_SKULL;
;
	lda     #$07
	sta     _actors+285
;
; actors.state[SKULL] = INACTIVE;
;
	lda     #$80
	sta     _actors+271
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hide_map (void)
; ---------------------------------------------------------------

.segment	"BANK1"

.proc	_hide_map: near

.segment	"BANK1"

;
; pal_bg(current_background_palette);
;
	lda     _current_background_palette
	ldx     _current_background_palette+1
	jsr     _pal_bg
;
; set_chr_mode_4(chr_4_index);
;
	lda     _chr_4_index
	jsr     _set_chr_mode_4
;
; set_chr_mode_5(chr_5_index);
;
	lda     _chr_5_index
	jsr     _set_chr_mode_5
;
; set_scroll_y(255);
;
	ldx     #$00
	lda     #$FF
	jmp     _set_scroll_y

.endproc

; ---------------------------------------------------------------
; void __near__ load_map (void)
; ---------------------------------------------------------------

.segment	"BANK1"

.proc	_load_map: near

.segment	"BANK1"

;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_C);
;
	ldx     #$28
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(map);
;
	lda     #<(_map)
	ldx     #>(_map)
	jsr     _vram_unrle
;
; multi_vram_buffer_horz(level_names[current_level], sizeof(level_names[current_level]), NTADR_C(8, 26));
;
	jsr     decsp3
	ldx     #$00
	lda     _current_level
	jsr     aslax4
	clc
	adc     #<(_level_names)
	tay
	txa
	adc     #>(_level_names)
	tax
	tya
	ldy     #$01
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$2B
	lda     #$48
	jsr     _multi_vram_buffer_horz
;
; set_chr_mode_4(8);
;
	lda     #$08
	jsr     _set_chr_mode_4
;
; set_chr_mode_5(9);
;
	lda     #$09
	jsr     _set_chr_mode_5
;
; pal_bg(pal_map);
;
	lda     #<(_pal_map)
	ldx     #>(_pal_map)
	jsr     _pal_bg
;
; set_scroll_y(239);    
;
	ldx     #$00
	lda     #$EF
	jsr     _set_scroll_y
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ load_inventory (void)
; ---------------------------------------------------------------

.segment	"BANK1"

.proc	_load_inventory: near

.segment	"BANK1"

;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_C);
;
	ldx     #$28
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(inventory);
;
	lda     #<(_inventory)
	ldx     #>(_inventory)
	jsr     _vram_unrle
;
; set_chr_mode_4(8);
;
	lda     #$08
	jsr     _set_chr_mode_4
;
; set_chr_mode_5(9);
;
	lda     #$09
	jsr     _set_chr_mode_5
;
; pal_bg(pal_map);
;
	lda     #<(_pal_map)
	ldx     #>(_pal_map)
	jsr     _pal_bg
;
; set_scroll_y(239);    
;
	ldx     #$00
	lda     #$EF
	jsr     _set_scroll_y
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ manage_inventory (void)
; ---------------------------------------------------------------

.segment	"BANK1"

.proc	_manage_inventory: near

.segment	"BANK1"

;
; for (i = 0; i < ITEM_NUMBER; ++i) {
;
	lda     #$00
	sta     _i
	tax
L0028:	lda     _i
	cmp     #$06
	bcs     L002A
;
; temp3 = 69 + i * 24;
;
	jsr     pusha0
	lda     #$18
	jsr     tosumula0
	clc
	adc     #$45
	sta     _temp3
;
; if (items.is_active[i]) {
;
	ldy     _i
	ldx     #$00
	lda     _items+6,y
	beq     L0029
;
; oam_spr(temp3, 44, items.sprite[i], 0x00);
;
	jsr     decsp3
	lda     _temp3
	ldy     #$02
	sta     (sp),y
	lda     #$2C
	dey
	sta     (sp),y
	ldy     _i
	lda     _items+12,y
	ldy     #$00
	sta     (sp),y
	txa
	jsr     _oam_spr
;
; for (i = 0; i < ITEM_NUMBER; ++i) {
;
	ldx     #$00
L0029:	inc     _i
	jmp     L0028
;
; if (actors.y[CURSOR] == SAVE_BUTTON_Y) {
;
L002A:	lda     _actors+27
	cmp     #$68
	bne     L002B
;
; if (pad1_new & PAD_A) {
;
	lda     _pad1_new
	and     #$80
	stx     tmp1
	ora     tmp1
;
; if (pad1_new & PAD_UP) {
;
	lda     _pad1_new
	and     #$08
	jeq     L0024
;
; actors.state[CURSOR] = CURSOR_SMALL;
;
	stx     _actors+279
;
; temp3 = current_selection * 24;
;
	lda     _current_selection
	jsr     pusha0
	lda     #$18
	jsr     tosumula0
	sta     _temp3
;
; actors.x[CURSOR] = 56 + temp3;
;
	clc
	adc     #$38
	sta     _actors+13
;
; actors.y[CURSOR] = INVENTORY_ITEM_Y;
;
	lda     #$20
	sta     _actors+27
;
; } else {
;
	jmp     L0024
;
; temp3 = current_selection * 24;
;
L002B:	lda     _current_selection
	jsr     pusha0
	lda     #$18
	jsr     tosumula0
	sta     _temp3
;
; actors.x[CURSOR] = 56 + temp3;
;
	clc
	adc     #$38
	sta     _actors+13
;
; if (pad1_new & PAD_LEFT) {
;
	lda     _pad1_new
	and     #$02
	beq     L002E
;
; if (current_selection == 0) {
;
	lda     _current_selection
	bne     L002D
;
; current_selection = 5;
;
	lda     #$05
	sta     _current_selection
;
; } else {
;
	jmp     L0015
;
; --current_selection;
;
L002D:	dec     _current_selection
;
; while (!items.is_active[current_selection]) {
;
L0015:	ldy     _current_selection
	lda     _items+6,y
	beq     L002D
;
; if (pad1_new & PAD_RIGHT) {
;
L002E:	lda     _pad1_new
	and     #$01
	beq     L0032
;
; if (current_selection == 5) {
;
	lda     _current_selection
	cmp     #$05
	bne     L0031
;
; current_selection = 0;
;
	lda     #$00
	sta     _current_selection
;
; } else {
;
	jmp     L001F
;
; if (current_selection == 5) {
;
L0030:	lda     _current_selection
	cmp     #$05
	bne     L0031
;
; current_selection = 0;
;
	lda     #$00
	sta     _current_selection
;
; } else {
;
	jmp     L001F
;
; ++current_selection;
;
L0031:	inc     _current_selection
;
; while (!items.is_active[current_selection]) {
;
L001F:	ldy     _current_selection
	lda     _items+6,y
	beq     L0030
;
; if ((pad1_new & PAD_A)  || (pad1_new & PAD_SELECT) || (pad1_new & PAD_START)) {
;
L0032:	lda     _pad1_new
	and     #$80
	bne     L0033
	lda     _pad1_new
	and     #$20
	bne     L0033
	lda     _pad1_new
	and     #$10
	beq     L0034
;
; current_item = current_selection;
;
L0033:	lda     _current_selection
	sta     _current_item
;
; exit_inventory = TRUE;
;
	lda     #$01
	sta     _exit_inventory
;
; if (pad1_new & PAD_B) {
;
L0034:	lda     _pad1_new
	and     #$40
	beq     L0035
;
; exit_inventory = TRUE;
;
	lda     #$01
	sta     _exit_inventory
;
; if (pad1_new & PAD_DOWN) {
;
L0035:	lda     _pad1_new
	and     #$04
	beq     L0024
;
; actors.x[CURSOR] = SAVE_BUTTON_X;
;
	lda     #$28
	sta     _actors+13
;
; actors.y[CURSOR] = SAVE_BUTTON_Y;
;
	lda     #$68
	sta     _actors+27
;
; actors.state[CURSOR] = CURSOR_LARGE;
;
	lda     #$02
	sta     _actors+279
;
; if (exit_inventory) {
;
L0024:	lda     _exit_inventory
	beq     L0025
;
; hide_map();
;
	jsr     _hide_map
;
; actors.state[CURSOR] = INACTIVE;
;
	lda     #$80
	sta     _actors+279
;
; exit_inventory = FALSE;
;
	lda     #$00
	sta     _exit_inventory
;
; game_state = MAIN;
;
	sta     _game_state
;
; }
;
L0025:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ reset_actors (void)
; ---------------------------------------------------------------

.segment	"BANK1"

.proc	_reset_actors: near

.segment	"BANK1"

;
; for (i = 0; i < ACTOR_NUMBER; ++i) {
;
	lda     #$00
	sta     _i
L001B:	lda     _i
	cmp     #$0E
	bcc     L001C
;
; }
;
	rts
;
; actors.state[i] = INACTIVE;
;
L001C:	ldy     _i
	lda     #$80
	sta     _actors+266,y
;
; actors.x[i] = 255;
;
	ldy     _i
	lda     #$FF
	sta     _actors,y
;
; actors.y[i] = 240;
;
	ldy     _i
	lda     #$F0
	sta     _actors+14,y
;
; actors.xDir[i] = LEFT;
;
	ldy     _i
	lda     #$FF
	sta     _actors+84,y
;
; actors.yDir[i] = UP;
;
	ldy     _i
	sta     _actors+98,y
;
; actors.width[i] = NULL;
;
	ldy     _i
	lda     #$00
	sta     _actors+28,y
;
; actors.height[i] = NULL;
;
	ldy     _i
	sta     _actors+42,y
;
; actors.bbox_x[i] = NULL;
;
	ldy     _i
	sta     _actors+56,y
;
; actors.bbox_y[i] = NULL;
;
	ldy     _i
	sta     _actors+70,y
;
; actors.xSpeed[i] = NULL;
;
	ldy     _i
	sta     _actors+112,y
;
; actors.ySpeed[i] = NULL;
;
	ldy     _i
	sta     _actors+126,y
;
; actors.xRemain[i] = NULL;
;
	ldy     _i
	sta     _actors+140,y
;
; actors.yRemain[i] = NULL;
;
	ldy     _i
	sta     _actors+154,y
;
; actors.xVelocity[i] = NULL;
;
	ldy     _i
	sta     _actors+168,y
;
; actors.yVelocity[i] = NULL;
;
	ldy     _i
	sta     _actors+182,y
;
; actors.minSpeed[i] = NULL;
;
	ldy     _i
	sta     _actors+196,y
;
; actors.maxSpeed[i] = NULL;
;
	ldy     _i
	sta     _actors+210,y
;
; actors.counter[i] = NULL;
;
	ldy     _i
	sta     _actors+224,y
;
; actors.animation_delay[i] = NULL;
;
	ldy     _i
	sta     _actors+238,y
;
; actors.current_frame[i] = NULL;
;
	ldy     _i
	sta     _actors+252,y
;
; actors.type[i] = NULL;
;
	ldy     _i
	sta     _actors+280,y
;
; for (i = 0; i < ACTOR_NUMBER; ++i) {
;
	inc     _i
	jmp     L001B

.endproc

; ---------------------------------------------------------------
; void __near__ set_skeleton (unsigned char p_index, unsigned char p_x, unsigned char p_y)
; ---------------------------------------------------------------

.segment	"BANK6"

.proc	_set_skeleton: near

.segment	"BANK6"

;
; void set_skeleton(unsigned char p_index, unsigned char p_x, unsigned char p_y) {
;
	jsr     pusha
;
; actors.x[p_index] = p_x;
;
	ldy     #$02
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     _actors,x
;
; actors.y[p_index] = p_y;
;
	iny
	lda     (sp),y
	tax
	ldy     #$00
	lda     (sp),y
	sta     _actors+14,x
;
; actors.width[p_index] = 0x04;
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$04
	sta     _actors+28,y
;
; actors.height[p_index] = 0x14;
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$14
	sta     _actors+42,y
;
; actors.bbox_x[p_index] = 0x01;
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$01
	sta     _actors+56,y
;
; actors.bbox_y[p_index] = 0x02;
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$02
	sta     _actors+70,y
;
; actors.xSpeed[p_index] = 10;
;
	tay
	lda     (sp),y
	tay
	lda     #$0A
	sta     _actors+112,y
;
; actors.maxSpeed[p_index] = 20;
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$14
	sta     _actors+210,y
;
; actors.animation_delay[p_index] = 16;
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$10
	sta     _actors+238,y
;
; actors.state[p_index] = DEAD;
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$04
	sta     _actors+266,y
;
; actors.type[p_index] = TYPE_SKELETON;
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$01
	sta     _actors+280,y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ set_crow (unsigned char p_x, unsigned char p_y)
; ---------------------------------------------------------------

.segment	"BANK6"

.proc	_set_crow: near

.segment	"BANK6"

;
; void set_crow(unsigned char p_x, unsigned char p_y) {
;
	jsr     pusha
;
; actors.x[CROW] = p_x;
;
	ldy     #$01
	lda     (sp),y
	ldy     _CROW
	sta     _actors,y
;
; actors.y[CROW] = p_y;
;
	ldy     #$00
	lda     (sp),y
	ldy     _CROW
	sta     _actors+14,y
;
; actors.state[CROW] = IDLE2;  // IDLE state of crow is 2... don't ask!
;
	ldy     _CROW
	lda     #$02
	sta     _actors+266,y
;
; actors.animation_delay[CROW] = 64;
;
	ldy     _CROW
	lda     #$40
	sta     _actors+238,y
;
; actors.xSpeed[CROW] = 128;
;
	ldy     _CROW
	lda     #$80
	sta     _actors+112,y
;
; actors.ySpeed[CROW] = 32;
;
	ldy     _CROW
	lda     #$20
	sta     _actors+126,y
;
; actors.type[CROW] = TYPE_CROW;
;
	ldy     _CROW
	lda     #$05
	sta     _actors+280,y
;
; actors.width[CROW] = 16;
;
	ldy     _CROW
	lda     #$10
	sta     _actors+28,y
;
; actors.height[CROW] = 16;
;
	ldy     _CROW
	sta     _actors+42,y
;
; }
;
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ set_stars (void)
; ---------------------------------------------------------------

.segment	"BANK6"

.proc	_set_stars: near

.segment	"BANK6"

;
; actors.x[STARS] = ITEM_X + 2;
;
	ldy     _STARS
	lda     #$BE
	sta     _actors,y
;
; actors.y[STARS] = ITEM_Y + 2;
;
	ldy     _STARS
	lda     #$17
	sta     _actors+14,y
;
; actors.animation_delay[STARS] = 8;
;
	ldy     _STARS
	lda     #$08
	sta     _actors+238,y
;
; actors.state[STARS] = INACTIVE;
;
	ldy     _STARS
	lda     #$80
	sta     _actors+266,y
;
; actors.type[STARS] = TYPE_STARS;
;
	ldy     _STARS
	lda     #$0E
	sta     _actors+280,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_level_specifics (void)
; ---------------------------------------------------------------

.segment	"BANK6"

.proc	_init_level_specifics: near

.segment	"BANK6"

;
; level_bank = 2;
;
	lda     #$02
	sta     _level_bank
;
; switch (current_level) {
;
	lda     _current_level
;
; }
;
	beq     L0004
	cmp     #$01
	jeq     L0014
	cmp     #$02
	jeq     L0025
	cmp     #$03
	jeq     L003F
	cmp     #$04
	jeq     L0040
	cmp     #$05
	jeq     L0046
	cmp     #$06
	jeq     L004C
	cmp     #$07
	jeq     L007E
	cmp     #$F0
	jeq     L0096
	rts
;
; current_nametable = altar;
;
L0004:	lda     #>(_altar)
	sta     _current_nametable+1
	lda     #<(_altar)
	sta     _current_nametable
;
; current_collision_map = cemetery_col;
;
	lda     #>(_cemetery_col)
	sta     _current_collision_map+1
	lda     #<(_cemetery_col)
	sta     _current_collision_map
;
; current_background_palette = pal_altar_bg;
;
	lda     #>(_pal_altar_bg)
	sta     _current_background_palette+1
	lda     #<(_pal_altar_bg)
	sta     _current_background_palette
;
; current_sprite_palette = pal_altar_spr;
;
	lda     #>(_pal_altar_spr)
	sta     _current_sprite_palette+1
	lda     #<(_pal_altar_spr)
	sta     _current_sprite_palette
;
; chr_4_index = 2;
;
	lda     #$02
	sta     _chr_4_index
;
; actors.x[SKULL] = 125;
;
	lda     #$7D
	sta     _actors+5
;
; actors.y[SKULL] = 130;
;
	lda     #$82
	sta     _actors+19
;
; actors.state[SKULL] = INACTIVE;
;
	lda     #$80
	sta     _actors+271
;
; LIGHTNING = 12;
;
	lda     #$0C
	sta     _LIGHTNING
;
; actors.x[LIGHTNING] = 128;
;
	ldy     _LIGHTNING
	lda     #$80
	sta     _actors,y
;
; actors.y[LIGHTNING] = 108;
;
	ldy     _LIGHTNING
	lda     #$6C
	sta     _actors+14,y
;
; actors.animation_delay[LIGHTNING] = 8;
;
	ldy     _LIGHTNING
	lda     #$08
	sta     _actors+238,y
;
; actors.type[LIGHTNING] = TYPE_LIGHTNING;
;
	ldy     _LIGHTNING
	lda     #$0C
	sta     _actors+280,y
;
; actors.state[LIGHTNING] = IDLE;
;
	ldy     _LIGHTNING
	lda     #$00
	sta     _actors+266,y
;
; set_torch(7, 64, 72);
;
	jsr     decsp2
	lda     #$07
	ldy     #$01
	sta     (sp),y
	lda     #$40
	dey
	sta     (sp),y
	lda     #$48
	jsr     _set_torch
;
; set_torch(8, 88, 72);
;
	jsr     decsp2
	lda     #$08
	ldy     #$01
	sta     (sp),y
	lda     #$58
	dey
	sta     (sp),y
	lda     #$48
	jsr     _set_torch
;
; set_torch(9, 160, 72);
;
	jsr     decsp2
	lda     #$09
	ldy     #$01
	sta     (sp),y
	lda     #$A0
	dey
	sta     (sp),y
	lda     #$48
	jsr     _set_torch
;
; set_torch(10, 184, 72);
;
	jsr     decsp2
	lda     #$0A
	ldy     #$01
	sta     (sp),y
	lda     #$B8
	dey
	sta     (sp),y
	lda     #$48
	jsr     _set_torch
;
; NECROMANCER = 6;
;
	lda     #$06
	sta     _NECROMANCER
;
; actors.x[NECROMANCER] = 120;
;
	ldy     _NECROMANCER
	lda     #$78
	sta     _actors,y
;
; actors.y[NECROMANCER] = 142;
;
	ldy     _NECROMANCER
	lda     #$8E
	sta     _actors+14,y
;
; actors.animation_delay[NECROMANCER] = 20;
;
	ldy     _NECROMANCER
	lda     #$14
	sta     _actors+238,y
;
; actors.state[NECROMANCER] = IDLE;
;
	ldy     _NECROMANCER
	lda     #$00
	sta     _actors+266,y
;
; actors.type[NECROMANCER] = TYPE_NECROMANCER;
;
	ldy     _NECROMANCER
	lda     #$0D
	sta     _actors+280,y
;
; HERO = 11;
;
	lda     #$0B
	sta     _HERO
;
; actors.animation_delay[HERO] = 1;
;
	ldy     _HERO
	lda     #$01
	sta     _actors+238,y
;
; actors.x[HERO] = 120;
;
	ldy     _HERO
	lda     #$78
	sta     _actors,y
;
; actors.y[HERO] = 72;
;
	ldy     _HERO
	lda     #$48
	sta     _actors+14,y
;
; actors.state[HERO] = IDLE;
;
	ldy     _HERO
	lda     #$00
	sta     _actors+266,y
;
; actors.type[HERO] = TYPE_HERO;
;
	ldy     _HERO
	lda     #$11
	sta     _actors+280,y
;
; break;
;
	rts
;
; current_nametable = cemetery;
;
L0014:	lda     #>(_cemetery)
	sta     _current_nametable+1
	lda     #<(_cemetery)
	sta     _current_nametable
;
; current_collision_map = cemetery_col;
;
	lda     #>(_cemetery_col)
	sta     _current_collision_map+1
	lda     #<(_cemetery_col)
	sta     _current_collision_map
;
; current_background_palette = pal_cemetery_bg;
;
	lda     #>(_pal_cemetery_bg)
	sta     _current_background_palette+1
	lda     #<(_pal_cemetery_bg)
	sta     _current_background_palette
;
; current_sprite_palette = pal_cemetery_spr;
;
	lda     #>(_pal_cemetery_spr)
	sta     _current_sprite_palette+1
	lda     #<(_pal_cemetery_spr)
	sta     _current_sprite_palette
;
; chr_4_index = 2;
;
	lda     #$02
	sta     _chr_4_index
;
; chr_5_index = 3;
;
	lda     #$03
	sta     _chr_5_index
;
; actors.x[0] = 0x70;
;
	lda     #$70
	sta     _actors
;
; actors.y[0] = 0xD0;
;
	lda     #$D0
	sta     _actors+14
;
; actors.state[0] = PAD_LONG;
;
	lda     #$20
	sta     _actors+266
;
; actors.type[0] = TYPE_PAD_HORZ;
;
	lda     #$00
	sta     _actors+280
;
; CROW = 6;
;
	lda     #$06
	sta     _CROW
;
; set_crow(207, 117);
;
	lda     #$CF
	jsr     pusha
	lda     #$75
	jsr     _set_crow
;
; SKELETON1 = 7;
;
	lda     #$07
	sta     _SKELETON1
;
; SKELETON2 = 8;
;
	lda     #$08
	sta     _SKELETON2
;
; set_skeleton(SKELETON1, 40, 72);
;
	jsr     decsp2
	lda     _SKELETON1
	ldy     #$01
	sta     (sp),y
	lda     #$28
	dey
	sta     (sp),y
	lda     #$48
	jsr     _set_skeleton
;
; actors.xDir[SKELETON1] = LEFT;
;
	ldy     _SKELETON1
	lda     #$FF
	sta     _actors+84,y
;
; set_skeleton(SKELETON2, 160, 104);
;
	jsr     decsp2
	lda     _SKELETON2
	ldy     #$01
	sta     (sp),y
	lda     #$A0
	dey
	sta     (sp),y
	lda     #$68
	jsr     _set_skeleton
;
; actors.xDir[SKELETON2] = RIGHT;
;
	ldy     _SKELETON2
	lda     #$01
	sta     _actors+84,y
;
; GATE = 9;
;
	lda     #$09
	sta     _GATE
;
; actors.x[GATE] = 120;
;
	ldy     _GATE
	lda     #$78
	sta     _actors,y
;
; actors.y[GATE] = 48;
;
	ldy     _GATE
	lda     #$30
	sta     _actors+14,y
;
; actors.animation_delay[GATE] = 16;
;
	ldy     _GATE
	lda     #$10
	sta     _actors+238,y
;
; actors.type[GATE] = TYPE_GATE;
;
	ldy     _GATE
	lda     #$08
	sta     _actors+280,y
;
; actors.state[GATE] = IDLE;
;
	ldy     _GATE
	lda     #$00
	sta     _actors+266,y
;
; STILL_DECORATION = 10;
;
	lda     #$0A
	sta     _STILL_DECORATION
;
; actors.x[STILL_DECORATION] = 219;
;
	ldy     _STILL_DECORATION
	lda     #$DB
	sta     _actors,y
;
; actors.y[STILL_DECORATION] = 61;
;
	ldy     _STILL_DECORATION
	lda     #$3D
	sta     _actors+14,y
;
; actors.state[STILL_DECORATION] = IDLE;
;
	ldy     _STILL_DECORATION
	lda     #$00
	sta     _actors+266,y
;
; actors.type[STILL_DECORATION] = TYPE_TREE;
;
	ldy     _STILL_DECORATION
	lda     #$09
	sta     _actors+280,y
;
; GHOST = 11;
;
	lda     #$0B
	sta     _GHOST
;
; actors.x[GHOST] = 120;
;
	ldy     _GHOST
	lda     #$78
	sta     _actors,y
;
; actors.y[GHOST] = 92;
;
	ldy     _GHOST
	lda     #$5C
	sta     _actors+14,y
;
; actors.animation_delay[GHOST] = 16;
;
	ldy     _GHOST
	lda     #$10
	sta     _actors+238,y
;
; actors.state[GHOST] = IDLE;
;
	ldy     _GHOST
	lda     #$00
	sta     _actors+266,y
;
; actors.type[GHOST] = TYPE_ANGELIC;
;
	ldy     _GHOST
	lda     #$0A
	sta     _actors+280,y
;
; break;
;
	rts
;
; current_nametable = temple;
;
L0025:	lda     #>(_temple)
	sta     _current_nametable+1
	lda     #<(_temple)
	sta     _current_nametable
;
; current_collision_map = temple_col;
;
	lda     #>(_temple_col)
	sta     _current_collision_map+1
	lda     #<(_temple_col)
	sta     _current_collision_map
;
; current_background_palette = pal_temple_bg;
;
	lda     #>(_pal_temple_bg)
	sta     _current_background_palette+1
	lda     #<(_pal_temple_bg)
	sta     _current_background_palette
;
; current_sprite_palette = pal_temple_spr;
;
	lda     #>(_pal_temple_spr)
	sta     _current_sprite_palette+1
	lda     #<(_pal_temple_spr)
	sta     _current_sprite_palette
;
; chr_4_index = 0x0A;
;
	lda     #$0A
	sta     _chr_4_index
;
; chr_5_index = 0x0B;
;
	lda     #$0B
	sta     _chr_5_index
;
; actors.x[0] = 0x70;  // 14
;
	lda     #$70
	sta     _actors
;
; actors.y[0] = 0xD0;  // 26
;
	lda     #$D0
	sta     _actors+14
;
; actors.state[0] = PAD_LONG;
;
	lda     #$20
	sta     _actors+266
;
; actors.type[0] = TYPE_PAD_HORZ;
;
	lda     #$00
	sta     _actors+280
;
; actors.x[6] = 96;
;
	lda     #$60
	sta     _actors+6
;
; actors.x[7] = 120;
;
	lda     #$78
	sta     _actors+7
;
; actors.x[8] = 144;
;
	lda     #$90
	sta     _actors+8
;
; for (i = 6; i < 9; ++i) {
;
	lda     #$06
	sta     _i
L0098:	lda     _i
	cmp     #$09
	bcs     L0099
;
; actors.animation_delay[i] = 12;
;
	ldy     _i
	lda     #$0C
	sta     _actors+238,y
;
; actors.y[i] = 32;
;
	ldy     _i
	lda     #$20
	sta     _actors+14,y
;
; actors.type[i] = TYPE_GLASS;
;
	ldy     _i
	lda     #$02
	sta     _actors+280,y
;
; actors.width[i] = 16;
;
	ldy     _i
	lda     #$10
	sta     _actors+28,y
;
; actors.height[i] = 50;
;
	ldy     _i
	lda     #$32
	sta     _actors+42,y
;
; actors.state[i] = IDLE;
;
	ldy     _i
	lda     #$00
	sta     _actors+266,y
;
; for (i = 6; i < 9; ++i) {
;
	inc     _i
	jmp     L0098
;
; STILL_DECORATION = 10;
;
L0099:	lda     #$0A
	sta     _STILL_DECORATION
;
; actors.x[STILL_DECORATION] = 184;
;
	ldy     _STILL_DECORATION
	lda     #$B8
	sta     _actors,y
;
; actors.y[STILL_DECORATION] = 82;
;
	ldy     _STILL_DECORATION
	lda     #$52
	sta     _actors+14,y
;
; actors.width[STILL_DECORATION] = 16;
;
	ldy     _STILL_DECORATION
	lda     #$10
	sta     _actors+28,y
;
; actors.height[STILL_DECORATION] = 8;
;
	ldy     _STILL_DECORATION
	lda     #$08
	sta     _actors+42,y
;
; actors.state[STILL_DECORATION] = IDLE;
;
	ldy     _STILL_DECORATION
	lda     #$00
	sta     _actors+266,y
;
; actors.type[STILL_DECORATION] = TYPE_SKULL_PILE;
;
	ldy     _STILL_DECORATION
	lda     #$0B
	sta     _actors+280,y
;
; SORCERER = 9;
;
	lda     #$09
	sta     _SORCERER
;
; actors.x[SORCERER] = actors.x[STILL_DECORATION] + 8;
;
	lda     #<(_actors)
	ldx     #>(_actors)
	clc
	adc     _SORCERER
	bcc     L0036
	inx
L0036:	sta     ptr1
	stx     ptr1+1
	ldy     _STILL_DECORATION
	lda     _actors,y
	clc
	adc     #$08
	ldy     #$00
	sta     (ptr1),y
;
; actors.y[SORCERER] = actors.y[STILL_DECORATION] - 20;
;
	lda     #<(_actors+14)
	ldx     #>(_actors+14)
	clc
	adc     _SORCERER
	bcc     L0039
	inx
L0039:	sta     ptr1
	stx     ptr1+1
	ldy     _STILL_DECORATION
	lda     _actors+14,y
	sec
	sbc     #$14
	ldy     #$00
	sta     (ptr1),y
;
; actors.animation_delay[SORCERER] = 12;
;
	ldy     _SORCERER
	lda     #$0C
	sta     _actors+238,y
;
; actors.state[SORCERER] = DEAD;
;
	ldy     _SORCERER
	lda     #$04
	sta     _actors+266,y
;
; actors.type[SORCERER] = TYPE_SORCERER;
;
	ldy     _SORCERER
	lda     #$12
	sta     _actors+280,y
;
; break;
;
	rts
;
; current_nametable = temple2;
;
L003F:	lda     #>(_temple2)
	sta     _current_nametable+1
	lda     #<(_temple2)
	sta     _current_nametable
;
; current_collision_map = temple2_col;
;
	lda     #>(_temple2_col)
	sta     _current_collision_map+1
	lda     #<(_temple2_col)
	sta     _current_collision_map
;
; current_background_palette = pal_temple_bg;
;
	lda     #>(_pal_temple_bg)
	sta     _current_background_palette+1
	lda     #<(_pal_temple_bg)
	sta     _current_background_palette
;
; current_sprite_palette = pal_temple_spr;
;
	lda     #>(_pal_temple_spr)
	sta     _current_sprite_palette+1
	lda     #<(_pal_temple_spr)
	sta     _current_sprite_palette
;
; chr_4_index = 0x0A;
;
	lda     #$0A
	sta     _chr_4_index
;
; chr_5_index = 0x0B;
;
	lda     #$0B
	sta     _chr_5_index
;
; actors.x[0] = 14 * 8;
;
	lda     #$70
	sta     _actors
;
; actors.y[0] = 24 * 8;
;
	lda     #$C0
	sta     _actors+14
;
; actors.state[0] = PAD_LONG;
;
	lda     #$20
	sta     _actors+266
;
; actors.type[0] = TYPE_PAD_HORZ;
;
	lda     #$00
	sta     _actors+280
;
; actors.x[1] = 14 * 8;
;
	lda     #$70
	sta     _actors+1
;
; actors.y[1] = 9 * 8;
;
	lda     #$48
;
; break;
;
	jmp     L009D
;
; current_nametable = temple3;
;
L0040:	lda     #>(_temple3)
	sta     _current_nametable+1
	lda     #<(_temple3)
	sta     _current_nametable
;
; current_collision_map = temple3_col;
;
	lda     #>(_temple3_col)
	sta     _current_collision_map+1
	lda     #<(_temple3_col)
	sta     _current_collision_map
;
; current_background_palette = pal_temple_bg;
;
	lda     #>(_pal_temple_bg)
	sta     _current_background_palette+1
	lda     #<(_pal_temple_bg)
	sta     _current_background_palette
;
; current_sprite_palette = pal_temple_spr;
;
	lda     #>(_pal_temple_spr)
	sta     _current_sprite_palette+1
	lda     #<(_pal_temple_spr)
	sta     _current_sprite_palette
;
; chr_4_index = 0x0A;
;
	lda     #$0A
	sta     _chr_4_index
;
; chr_5_index = 0x0B;
;
	lda     #$0B
	sta     _chr_5_index
;
; actors.x[0] = 15 * 8;
;
	lda     #$78
	sta     _actors
;
; actors.y[0] = 12 * 8;
;
	lda     #$60
	sta     _actors+14
;
; actors.state[0] = PAD_SHORT;
;
	lda     #$10
	sta     _actors+266
;
; actors.type[0] = TYPE_PAD_HORZ;
;
	lda     #$00
	sta     _actors+280
;
; actors.x[1] = 15 * 8;
;
	lda     #$78
	sta     _actors+1
;
; actors.y[1] = 21 * 8;
;
	lda     #$A8
	sta     _actors+15
;
; actors.state[1] = PAD_SHORT;
;
	lda     #$10
	sta     _actors+267
;
; actors.type[1] = TYPE_PAD_HORZ;
;
	lda     #$00
	sta     _actors+281
;
; actors.x[2] = 8 * 8;
;
	lda     #$40
	sta     _actors+2
;
; actors.y[2] = 16 * 8;
;
	lda     #$80
	sta     _actors+16
;
; actors.state[2] = PAD_SHORT;
;
	lda     #$10
	sta     _actors+268
;
; actors.type[2] = TYPE_PAD_VERT;
;
	lda     #$01
	sta     _actors+282
;
; actors.x[3] = 23 * 8;
;
	lda     #$B8
	sta     _actors+3
;
; actors.y[3] = 16 * 8;
;
	lda     #$80
	sta     _actors+17
;
; actors.state[3] = PAD_SHORT;
;
	lda     #$10
	sta     _actors+269
;
; actors.type[3] = TYPE_PAD_VERT;
;
	lda     #$01
	sta     _actors+283
;
; DOOR1 = 6;
;
	lda     #$06
	sta     _DOOR1
;
; actors.x[DOOR1] = 120;
;
	ldy     _DOOR1
	lda     #$78
	sta     _actors,y
;
; actors.y[DOOR1] = 21;
;
	ldy     _DOOR1
	lda     #$15
	sta     _actors+14,y
;
; actors.type[DOOR1] = TYPE_SKULL_DOOR;
;
	ldy     _DOOR1
	sta     _actors+280,y
;
; actors.state[DOOR1] = IDLE;
;
	ldy     _DOOR1
	lda     #$00
	sta     _actors+266,y
;
; actors.animation_delay[DOOR1] = 32;
;
	ldy     _DOOR1
	lda     #$20
	sta     _actors+238,y
;
; set_torch(7, 104, 32);
;
	jsr     decsp2
	lda     #$07
	ldy     #$01
	sta     (sp),y
	lda     #$68
	dey
	sta     (sp),y
	lda     #$20
	jsr     _set_torch
;
; set_torch(8, 144, 32);
;
	jsr     decsp2
	lda     #$08
	ldy     #$01
	sta     (sp),y
	lda     #$90
	dey
	sta     (sp),y
	lda     #$20
	jmp     _set_torch
;
; current_nametable = temple4;
;
L0046:	lda     #>(_temple4)
	sta     _current_nametable+1
	lda     #<(_temple4)
	sta     _current_nametable
;
; current_collision_map = temple4_col;
;
	lda     #>(_temple4_col)
	sta     _current_collision_map+1
	lda     #<(_temple4_col)
	sta     _current_collision_map
;
; current_background_palette = pal_temple_bg;
;
	lda     #>(_pal_temple_bg)
	sta     _current_background_palette+1
	lda     #<(_pal_temple_bg)
	sta     _current_background_palette
;
; current_sprite_palette = pal_temple_spr;
;
	lda     #>(_pal_temple_spr)
	sta     _current_sprite_palette+1
	lda     #<(_pal_temple_spr)
	sta     _current_sprite_palette
;
; chr_4_index = 0x0A;
;
	lda     #$0A
	sta     _chr_4_index
;
; chr_5_index = 0x0B;
;
	lda     #$0B
	sta     _chr_5_index
;
; actors.x[0] = 14 * 8;
;
	lda     #$70
	sta     _actors
;
; actors.y[0] = 26 * 8;
;
	lda     #$D0
	sta     _actors+14
;
; actors.state[0] = PAD_LONG;
;
	lda     #$20
	sta     _actors+266
;
; actors.type[0] = TYPE_PAD_HORZ;
;
	lda     #$00
	sta     _actors+280
;
; actors.x[1] = 9 * 8;
;
	lda     #$48
	sta     _actors+1
;
; actors.y[1] = 12 * 8;
;
	lda     #$60
	sta     _actors+15
;
; actors.state[1] = PAD_SHORT;
;
	lda     #$10
	sta     _actors+267
;
; actors.type[1] = TYPE_PAD_HORZ;
;
	lda     #$00
	sta     _actors+281
;
; actors.x[2] = 21 * 8;
;
	lda     #$A8
	sta     _actors+2
;
; actors.y[2] = 12 * 8;
;
	lda     #$60
	sta     _actors+16
;
; actors.state[2] = PAD_SHORT;
;
	lda     #$10
	sta     _actors+268
;
; actors.type[2] = TYPE_PAD_HORZ;
;
	lda     #$00
	sta     _actors+282
;
; DOOR1 = 6;
;
	lda     #$06
	sta     _DOOR1
;
; actors.x[DOOR1] = 120;
;
	ldy     _DOOR1
	lda     #$78
	sta     _actors,y
;
; actors.y[DOOR1] = 21;
;
	ldy     _DOOR1
	lda     #$15
	sta     _actors+14,y
;
; actors.type[DOOR1] = TYPE_SKULL_DOOR;
;
	ldy     _DOOR1
	sta     _actors+280,y
;
; actors.state[DOOR1] = IDLE;
;
	ldy     _DOOR1
	lda     #$00
	sta     _actors+266,y
;
; actors.animation_delay[DOOR1] = 32;
;
	ldy     _DOOR1
	lda     #$20
	sta     _actors+238,y
;
; set_torch(7, 104, 32);
;
	jsr     decsp2
	lda     #$07
	ldy     #$01
	sta     (sp),y
	lda     #$68
	dey
	sta     (sp),y
	lda     #$20
	jsr     _set_torch
;
; set_torch(8, 144, 32);
;
	jsr     decsp2
	lda     #$08
	ldy     #$01
	sta     (sp),y
	lda     #$90
	dey
	sta     (sp),y
	lda     #$20
	jmp     _set_torch
;
; current_nametable = town_ruins;
;
L004C:	lda     #>(_town_ruins)
	sta     _current_nametable+1
	lda     #<(_town_ruins)
	sta     _current_nametable
;
; current_collision_map = town_col;
;
	lda     #>(_town_col)
	sta     _current_collision_map+1
	lda     #<(_town_col)
	sta     _current_collision_map
;
; current_background_palette = pal_town_bg;
;
	lda     #>(_pal_town_bg)
	sta     _current_background_palette+1
	lda     #<(_pal_town_bg)
	sta     _current_background_palette
;
; current_sprite_palette = pal_town_spr;
;
	lda     #>(_pal_town_spr)
	sta     _current_sprite_palette+1
	lda     #<(_pal_town_spr)
	sta     _current_sprite_palette
;
; chr_4_index = 0x0a;
;
	lda     #$0A
	sta     _chr_4_index
;
; chr_5_index = 0x0b;
;
	lda     #$0B
	sta     _chr_5_index
;
; actors.x[0] = 0x70;
;
	lda     #$70
	sta     _actors
;
; actors.y[0] = 0xD0;
;
	lda     #$D0
	sta     _actors+14
;
; DOOR1 = 6;
;
	lda     #$06
	sta     _DOOR1
;
; DOOR2 = 7;
;
	lda     #$07
	sta     _DOOR2
;
; DOOR3 = 8;
;
	lda     #$08
	sta     _DOOR3
;
; actors.x[DOOR1] = 30;
;
	ldy     _DOOR1
	lda     #$1E
	sta     _actors,y
;
; actors.y[DOOR1] = 87;
;
	ldy     _DOOR1
	lda     #$57
	sta     _actors+14,y
;
; actors.width[DOOR1] = 16;
;
	ldy     _DOOR1
	lda     #$10
	sta     _actors+28,y
;
; actors.height[DOOR1] = 50;
;
	ldy     _DOOR1
	lda     #$32
	sta     _actors+42,y
;
; actors.state[DOOR1] = IDLE;
;
	ldy     _DOOR1
	lda     #$00
	sta     _actors+266,y
;
; actors.type[DOOR1] = TYPE_HOUSE_DOOR;
;
	ldy     _DOOR1
	lda     #$04
	sta     _actors+280,y
;
; actors.x[DOOR2] = 110;
;
	ldy     _DOOR2
	lda     #$6E
	sta     _actors,y
;
; actors.y[DOOR2] = 71;
;
	ldy     _DOOR2
	lda     #$47
	sta     _actors+14,y
;
; actors.width[DOOR2] = 16;
;
	ldy     _DOOR2
	lda     #$10
	sta     _actors+28,y
;
; actors.height[DOOR2] = 50;
;
	ldy     _DOOR2
	lda     #$32
	sta     _actors+42,y
;
; actors.state[DOOR2] = IDLE;
;
	ldy     _DOOR2
	lda     #$00
	sta     _actors+266,y
;
; actors.type[DOOR2] = TYPE_HOUSE_DOOR;
;
	ldy     _DOOR2
	lda     #$04
	sta     _actors+280,y
;
; actors.x[DOOR3] = 182;
;
	ldy     _DOOR3
	lda     #$B6
	sta     _actors,y
;
; actors.y[DOOR3] = 87;
;
	ldy     _DOOR3
	lda     #$57
	sta     _actors+14,y
;
; actors.width[DOOR3] = 16;
;
	ldy     _DOOR3
	lda     #$10
	sta     _actors+28,y
;
; actors.height[DOOR3] = 50;
;
	ldy     _DOOR3
	lda     #$32
	sta     _actors+42,y
;
; actors.state[DOOR3] = IDLE;
;
	ldy     _DOOR3
	lda     #$00
	sta     _actors+266,y
;
; actors.type[DOOR3] = TYPE_HOUSE_DOOR;
;
	ldy     _DOOR3
	lda     #$04
	sta     _actors+280,y
;
; CRATE1 = 9;
;
	lda     #$09
	sta     _CRATE1
;
; CRATE2 = 10;
;
	lda     #$0A
	sta     _CRATE2
;
; CRATE3 = 11;
;
	lda     #$0B
	sta     _CRATE3
;
; actors.x[CRATE1] = 16;
;
	ldy     _CRATE1
	lda     #$10
	sta     _actors,y
;
; actors.y[CRATE1] = 112;
;
	ldy     _CRATE1
	lda     #$70
	sta     _actors+14,y
;
; actors.x[CRATE2] = 48;
;
	ldy     _CRATE2
	lda     #$30
	sta     _actors,y
;
; actors.y[CRATE2] = 112;
;
	ldy     _CRATE2
	lda     #$70
	sta     _actors+14,y
;
; actors.x[CRATE3] = 224;
;
	ldy     _CRATE3
	lda     #$E0
	sta     _actors,y
;
; actors.y[CRATE3] = 112;
;
	ldy     _CRATE3
	lda     #$70
	sta     _actors+14,y
;
; temp = 15;
;
	lda     #$0F
	sta     _temp
;
; actors.width[CRATE1] = temp;
;
	ldy     _CRATE1
	lda     _temp
	sta     _actors+28,y
;
; actors.width[CRATE2] = temp;
;
	ldy     _CRATE2
	lda     _temp
	sta     _actors+28,y
;
; actors.width[CRATE3] = temp;
;
	ldy     _CRATE3
	lda     _temp
	sta     _actors+28,y
;
; actors.height[CRATE1] = temp;
;
	ldy     _CRATE1
	lda     _temp
	sta     _actors+42,y
;
; actors.height[CRATE2] = temp;
;
	ldy     _CRATE2
	lda     _temp
	sta     _actors+42,y
;
; actors.height[CRATE3] = temp;
;
	ldy     _CRATE3
	lda     _temp
	sta     _actors+42,y
;
; temp = 1;
;
	lda     #$01
	sta     _temp
;
; actors.bbox_x[CRATE1] = temp;
;
	ldy     _CRATE1
	lda     _temp
	sta     _actors+56,y
;
; actors.bbox_y[CRATE1] = temp;
;
	ldy     _CRATE1
	lda     _temp
	sta     _actors+70,y
;
; actors.bbox_x[CRATE2] = temp;
;
	ldy     _CRATE2
	lda     _temp
	sta     _actors+56,y
;
; actors.bbox_y[CRATE2] = temp;
;
	ldy     _CRATE2
	lda     _temp
	sta     _actors+70,y
;
; actors.bbox_x[CRATE3] = temp;
;
	ldy     _CRATE3
	lda     _temp
	sta     _actors+56,y
;
; actors.bbox_y[CRATE3] = temp;
;
	ldy     _CRATE3
	lda     _temp
	sta     _actors+70,y
;
; actors.state[CRATE1] = IDLE;
;
	ldy     _CRATE1
	lda     #$00
	sta     _actors+266,y
;
; actors.state[CRATE2] = IDLE;
;
	ldy     _CRATE2
	sta     _actors+266,y
;
; actors.state[CRATE3] = IDLE;
;
	ldy     _CRATE3
	sta     _actors+266,y
;
; actors.type[CRATE1] = TYPE_CRATE;
;
	ldy     _CRATE1
	lda     #$03
	sta     _actors+280,y
;
; actors.type[CRATE2] = TYPE_CRATE;
;
	ldy     _CRATE2
	sta     _actors+280,y
;
; actors.type[CRATE3] = TYPE_CRATE;
;
	ldy     _CRATE3
	sta     _actors+280,y
;
; DEVIL = 12;
;
	lda     #$0C
	sta     _DEVIL
;
; actors.x[DEVIL] = 12;
;
	ldy     _DEVIL
	sta     _actors,y
;
; actors.y[DEVIL] = 152;
;
	ldy     _DEVIL
	lda     #$98
	sta     _actors+14,y
;
; actors.width[DEVIL] = 15;
;
	ldy     _DEVIL
	lda     #$0F
	sta     _actors+28,y
;
; actors.height[DEVIL] = 15;
;
	ldy     _DEVIL
	sta     _actors+42,y
;
; actors.animation_delay[DEVIL] = 16;
;
	ldy     _DEVIL
	lda     #$10
	sta     _actors+238,y
;
; actors.state[DEVIL] = IDLE;
;
	ldy     _DEVIL
	lda     #$00
	sta     _actors+266,y
;
; actors.type[DEVIL] = TYPE_DEVIL;
;
	ldy     _DEVIL
	lda     #$06
	sta     _actors+280,y
;
; break;
;
	rts
;
; current_nametable = farm;
;
L007E:	lda     #>(_farm)
	sta     _current_nametable+1
	lda     #<(_farm)
	sta     _current_nametable
;
; current_collision_map = farm_col;
;
	lda     #>(_farm_col)
	sta     _current_collision_map+1
	lda     #<(_farm_col)
	sta     _current_collision_map
;
; current_background_palette = pal_town_bg2;
;
	lda     #>(_pal_town_bg2)
	sta     _current_background_palette+1
	lda     #<(_pal_town_bg2)
	sta     _current_background_palette
;
; current_sprite_palette = pal_town_spr2;
;
	lda     #>(_pal_town_spr2)
	sta     _current_sprite_palette+1
	lda     #<(_pal_town_spr2)
	sta     _current_sprite_palette
;
; chr_4_index = 0x0a;
;
	lda     #$0A
	sta     _chr_4_index
;
; chr_5_index = 0x0b;
;
	lda     #$0B
	sta     _chr_5_index
;
; level_condition1 = FALSE;
;
	lda     #$00
	sta     _level_condition1
;
; actors.x[0] = 6 * 8;
;
	lda     #$30
	sta     _actors
;
; actors.y[0] = 26 * 8;
;
	lda     #$D0
	sta     _actors+14
;
; actors.state[0] = PAD_LONG;
;
	lda     #$20
	sta     _actors+266
;
; actors.type[0] = TYPE_PAD_HORZ;
;
	lda     #$00
	sta     _actors+280
;
; actors.x[1] = 9 * 8;
;
	lda     #$48
	sta     _actors+1
;
; actors.y[1] = 7 * 8;
;
	lda     #$38
	sta     _actors+15
;
; actors.state[1] = PAD_LONG;
;
	lda     #$20
	sta     _actors+267
;
; actors.type[1] = TYPE_PAD_HORZ;
;
	lda     #$00
	sta     _actors+281
;
; actors.x[2] = 23 * 8;
;
	lda     #$B8
	sta     _actors+2
;
; actors.y[2] = 17 * 8;
;
	lda     #$88
	sta     _actors+16
;
; actors.state[2] = PAD_SHORT;
;
	lda     #$10
	sta     _actors+268
;
; actors.type[2] = TYPE_PAD_HORZ;
;
	lda     #$00
	sta     _actors+282
;
; STILL_DECORATION = 4;
;
	lda     #$04
	sta     _STILL_DECORATION
;
; actors.x[STILL_DECORATION] = 24 * 8;
;
	ldy     _STILL_DECORATION
	lda     #$C0
	sta     _actors,y
;
; actors.y[STILL_DECORATION] = 8 * 8;
;
	ldy     _STILL_DECORATION
	lda     #$40
	sta     _actors+14,y
;
; actors.state[STILL_DECORATION] = IDLE;
;
	ldy     _STILL_DECORATION
	lda     #$00
	sta     _actors+266,y
;
; actors.type[STILL_DECORATION] = TYPE_SCARECROW;
;
	ldy     _STILL_DECORATION
	lda     #$20
	sta     _actors+280,y
;
; STARS = 6;
;
	lda     #$06
	sta     _STARS
;
; set_stars();
;
	jsr     _set_stars
;
; DOOR1 = 7;
;
	lda     #$07
	sta     _DOOR1
;
; actors.x[DOOR1] = 56;
;
	ldy     _DOOR1
	lda     #$38
	sta     _actors,y
;
; actors.y[DOOR1] = 136;
;
	ldy     _DOOR1
	lda     #$88
	sta     _actors+14,y
;
; actors.width[DOOR1] = 16;
;
	ldy     _DOOR1
	lda     #$10
	sta     _actors+28,y
;
; actors.height[DOOR1] = 27;
;
	ldy     _DOOR1
	lda     #$1B
	sta     _actors+42,y
;
; actors.animation_delay[DOOR1] = 16;
;
	ldy     _DOOR1
	lda     #$10
	sta     _actors+238,y
;
; actors.state[DOOR1] = IDLE;
;
	ldy     _DOOR1
	lda     #$00
	sta     _actors+266,y
;
; actors.type[DOOR1] = TYPE_HOUSE_DOOR;
;
	ldy     _DOOR1
	lda     #$04
	sta     _actors+280,y
;
; CROW = 8;
;
	lda     #$08
	sta     _CROW
;
; set_crow(192, 60);
;
	lda     #$C0
	jsr     pusha
	lda     #$3C
	jsr     _set_crow
;
; TRIGGER = 10;
;
	lda     #$0A
	sta     _TRIGGER
;
; actors.x[TRIGGER] = 20 * 8;
;
	ldy     _TRIGGER
	lda     #$A0
	sta     _actors,y
;
; actors.y[TRIGGER] = 13 * 8;
;
	ldy     _TRIGGER
	lda     #$68
	sta     _actors+14,y
;
; actors.state[TRIGGER] = IDLE;
;
	ldy     _TRIGGER
	lda     #$00
	sta     _actors+266,y
;
; actors.type[TRIGGER] = TYPE_TRIGGER;
;
	ldy     _TRIGGER
	lda     #$21
	sta     _actors+280,y
;
; actors.width[TRIGGER] = 8;
;
	ldy     _TRIGGER
	lda     #$08
	sta     _actors+28,y
;
; actors.height[TRIGGER] = 16;
;
	ldy     _TRIGGER
	lda     #$10
	sta     _actors+42,y
;
; TRIGGER2 = 11;
;
	lda     #$0B
	sta     _TRIGGER2
;
; actors.x[TRIGGER2] = 4 * 8;
;
	ldy     _TRIGGER2
	lda     #$20
	sta     _actors,y
;
; actors.y[TRIGGER2] = 8 * 8;
;
	ldy     _TRIGGER2
	lda     #$40
	sta     _actors+14,y
;
; actors.state[TRIGGER2] = IDLE;
;
	ldy     _TRIGGER2
	lda     #$00
	sta     _actors+266,y
;
; actors.type[TRIGGER2] = TYPE_TRIGGER2;
;
	ldy     _TRIGGER2
	lda     #$22
	sta     _actors+280,y
;
; actors.width[TRIGGER2] = 15 * 8;
;
	ldy     _TRIGGER2
	lda     #$78
	sta     _actors+28,y
;
; actors.height[TRIGGER2] = 3 * 8;
;
	ldy     _TRIGGER2
	lda     #$18
	sta     _actors+42,y
;
; break;
;
	rts
;
; current_nametable = bombable;
;
L0096:	lda     #>(_bombable)
	sta     _current_nametable+1
	lda     #<(_bombable)
	sta     _current_nametable
;
; current_collision_map = bombable_test;
;
	lda     #>(_bombable_test)
	sta     _current_collision_map+1
	lda     #<(_bombable_test)
	sta     _current_collision_map
;
; current_background_palette = pal_temple_bg;
;
	lda     #>(_pal_temple_bg)
	sta     _current_background_palette+1
	lda     #<(_pal_temple_bg)
	sta     _current_background_palette
;
; current_sprite_palette = pal_temple_spr;
;
	lda     #>(_pal_temple_spr)
	sta     _current_sprite_palette+1
	lda     #<(_pal_temple_spr)
	sta     _current_sprite_palette
;
; chr_4_index = 0x0A;
;
	lda     #$0A
	sta     _chr_4_index
;
; chr_5_index = 0x0B;
;
	lda     #$0B
	sta     _chr_5_index
;
; actors.x[0] = 14 * 8;
;
	lda     #$70
	sta     _actors
;
; actors.y[0] = 26 * 8;
;
	lda     #$D0
	sta     _actors+14
;
; actors.state[0] = PAD_LONG;
;
	lda     #$20
	sta     _actors+266
;
; actors.type[0] = TYPE_PAD_HORZ;
;
	lda     #$00
	sta     _actors+280
;
; actors.x[1] = 14 * 8;
;
	lda     #$70
	sta     _actors+1
;
; actors.y[1] = 7 * 8;
;
	lda     #$38
L009D:	sta     _actors+15
;
; actors.state[1] = PAD_LONG;
;
	lda     #$20
	sta     _actors+267
;
; actors.type[1] = TYPE_PAD_HORZ;
;
	lda     #$00
	sta     _actors+281
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ debug (unsigned char value)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_debug: near

.segment	"CODE"

;
; void debug(unsigned char value) {
;
	jsr     pusha
;
; one_vram_buffer(value, NTADR_A(1, 1));
;
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	ldx     #$20
	lda     #$21
	jsr     _one_vram_buffer
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ update_health (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_health: near

.segment	"CODE"

;
; if (p1_health > 0) {
;
	lda     _p1_health
	beq     L000E
;
; for (i = 0; i < p1_max_health; ++i) {
;
	lda     #$00
	sta     _i
L000B:	lda     _i
	cmp     _p1_max_health
	bcs     L000A
;
; one_vram_buffer((i < p1_health) ? TILE_HEART_FULL : TILE_HEART_EMPTY, NTADR_A(i + 2, 2));
;
	cmp     _p1_health
	bcs     L000C
	lda     #$5B
	jmp     L000D
L000C:	lda     #$5C
L000D:	jsr     pusha
	ldx     #$00
	lda     _i
	clc
	adc     #$02
	bcc     L0009
	inx
L0009:	ora     #$40
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; for (i = 0; i < p1_max_health; ++i) {
;
	inc     _i
	jmp     L000B
;
; one_vram_buffer(TILE_HEART_EMPTY, NTADR_A(2, 2));
;
L000E:	lda     #$5C
	jsr     pusha
	ldx     #$20
	lda     #$42
	jmp     _one_vram_buffer
;
; }
;
L000A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_xp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_xp: near

.segment	"CODE"

;
; multi_vram_buffer_horz(exp, sizeof(exp), NTADR_A(12, 2));
;
	jsr     decsp3
	lda     #<(_exp)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_exp)
	sta     (sp),y
	lda     #$09
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$4C
	jmp     _multi_vram_buffer_horz

.endproc

; ---------------------------------------------------------------
; void __near__ add_xp (unsigned char value, unsigned char pos)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_xp: near

.segment	"CODE"

;
; void add_xp(unsigned char value, unsigned char pos) {
;
	jsr     pusha
;
; unsigned char result = exp[pos] + value - 0x30;
;
	ldy     #$00
	lda     (sp),y
	tay
	lda     _exp,y
	sta     ptr1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	sec
	sbc     #$30
	jsr     pusha
;
; if (result > 9) {
;
	ldy     #$00
	lda     (sp),y
	cmp     #$0A
	bcc     L0004
;
; if (pos == TEN_MILLIONS) {
;
	iny
	lda     (sp),y
	bne     L000C
;
; result = 9;
;
	lda     #$09
	dey
;
; } else {
;
	jmp     L000B
;
; add_xp(1, pos - 1);
;
L000C:	tya
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$01
	jsr     _add_xp
;
; result -= 10;
;
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$0A
L000B:	sta     (sp),y
;
; exp[pos] = 0x30 + result;
;
L0004:	lda     #<(_exp)
	ldx     #>(_exp)
	iny
	clc
	adc     (sp),y
	bcc     L0008
	inx
L0008:	sta     ptr1
	stx     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     #$30
	sta     (ptr1),y
;
; update_xp();
;
	jsr     _update_xp
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ show_HUD (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_HUD: near

.segment	"CODE"

;
; update_health();
;
	jsr     _update_health
;
; update_xp();
;
	jsr     _update_xp
;
; one_vram_buffer(0x5d, NTADR_A(22, 2));
;
	lda     #$5D
	jsr     pusha
	ldx     #$20
	lda     #$56
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x5e, NTADR_A(23, 2));
;
	lda     #$5E
	jsr     pusha
	ldx     #$20
	lda     #$57
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x5f, NTADR_A(24, 2));
;
	lda     #$5F
	jsr     pusha
	ldx     #$20
	lda     #$58
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x7e, NTADR_A(23, 3));
;
	lda     #$7E
	jsr     pusha
	ldx     #$20
	lda     #$77
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x7f, NTADR_A(24, 3));
;
	lda     #$7F
	jsr     pusha
	ldx     #$20
	lda     #$78
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ hide_HUD (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hide_HUD: near

.segment	"CODE"

;
; for (i = 0; i < p1_max_health; ++i) {
;
	lda     #$00
	sta     _i
L0007:	lda     _i
	cmp     _p1_max_health
	bcs     L0003
;
; one_vram_buffer(0x00, NTADR_A(i + 2, 2));
;
	lda     #$00
	jsr     pusha
	tax
	lda     _i
	clc
	adc     #$02
	bcc     L0006
	inx
L0006:	ora     #$40
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; for (i = 0; i < p1_max_health; ++i) {
;
	inc     _i
	jmp     L0007
;
; multi_vram_buffer_horz(empty_line, sizeof(empty_line), NTADR_A(7, 2));
;
L0003:	jsr     decsp3
	lda     #<(_empty_line)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_line)
	sta     (sp),y
	lda     #$18
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$47
	jsr     _multi_vram_buffer_horz
;
; one_vram_buffer(0x00, NTADR_A(22, 2));
;
	lda     #$00
	jsr     pusha
	ldx     #$20
	lda     #$56
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x00, NTADR_A(23, 2));
;
	lda     #$00
	jsr     pusha
	ldx     #$20
	lda     #$57
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x00, NTADR_A(24, 2));
;
	lda     #$00
	jsr     pusha
	ldx     #$20
	lda     #$58
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x00, NTADR_A(23, 3));
;
	lda     #$00
	jsr     pusha
	ldx     #$20
	lda     #$77
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x00, NTADR_A(24, 3));
;
	lda     #$00
	jsr     pusha
	ldx     #$20
	lda     #$78
	jsr     _one_vram_buffer
;
; ppu_wait_nmi();
;
	jmp     _ppu_wait_nmi

.endproc

; ---------------------------------------------------------------
; void __near__ show_game_over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_game_over: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_black_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_black_level: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(black_level);
;
	lda     #<(_black_level)
	ldx     #>(_black_level)
	jsr     _vram_unrle
;
; pal_bg(pal_cemetery_bg);
;
	lda     #<(_pal_cemetery_bg)
	ldx     #>(_pal_cemetery_bg)
	jsr     _pal_bg
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ load_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_collision: near

.segment	"CODE"

;
; collision_index = 0;
;
	lda     #$00
	sta     _collision_index
	sta     _collision_index+1
;
; is_first = TRUE;
;
	lda     #$01
	sta     _is_first
;
; i = 0;
;
	lda     #$00
	sta     _i
;
; while (temp < 255) {
;
	jmp     L0019
;
; ++i;
;
L0011:	inc     _i
;
; temp2 = current_collision_map[i];
;
	lda     _current_collision_map
	ldx     _current_collision_map+1
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp2
;
; for (j = 0; j < temp; ++j) {
;
	lda     #$00
	sta     _j
L0012:	lda     _j
	cmp     _temp
	bcs     L0013
;
; if (is_first) {
;
	lda     _is_first
	beq     L0009
;
; temp3 = temp2 << 4;
;
	lda     _temp2
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _temp3
;
; is_first = FALSE;
;
	lda     #$00
;
; } else {
;
	jmp     L0010
;
; c_map[collision_index] = temp3 | temp2;
;
L0009:	lda     _collision_index
	clc
	adc     #<(_c_map)
	sta     ptr1
	lda     _collision_index+1
	adc     #>(_c_map)
	sta     ptr1+1
	lda     _temp2
	ora     _temp3
	ldy     #$00
	sta     (ptr1),y
;
; ++collision_index;
;
	inc     _collision_index
	bne     L000B
	inc     _collision_index+1
;
; is_first = TRUE;
;
L000B:	lda     #$01
L0010:	sta     _is_first
;
; for (j = 0; j < temp; ++j) {
;
	inc     _j
	jmp     L0012
;
; ++i;
;
L0013:	inc     _i
;
; temp = current_collision_map[i];
;
L0019:	lda     _current_collision_map
	ldx     _current_collision_map+1
	ldy     _i
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp
;
; while (temp < 255) {
;
	cmp     #$FF
	bcc     L0011
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_level: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; banked_call(1, reset_actors);
;
	lda     #$01
	jsr     pusha
	lda     #<(_reset_actors)
	ldx     #>(_reset_actors)
	jsr     _banked_call
;
; banked_call(6, init_level_specifics);
;
	lda     #$06
	jsr     pusha
	lda     #<(_init_level_specifics)
	ldx     #>(_init_level_specifics)
	jsr     _banked_call
;
; banked_call(0, init_skull);
;
	lda     #$00
	jsr     pusha
	lda     #<(_init_skull)
	ldx     #>(_init_skull)
	jsr     _banked_call
;
; paddle_count = NULL;
;
	lda     #$00
	sta     _paddle_count
;
; for (i = 0; i < 4; ++i){
;
	sta     _i
L0017:	lda     _i
	cmp     #$04
	bcs     L0019
;
; if (actors.state[i] < INACTIVE) {
;
	ldy     _i
	lda     _actors+266,y
	cmp     #$80
	bcs     L0018
;
; ++paddle_count;
;
	inc     _paddle_count
;
; for (i = 0; i < 4; ++i){
;
L0018:	inc     _i
	jmp     L0017
;
; banked_call(0, init_paddles);
;
L0019:	lda     #$00
	jsr     pusha
	lda     #<(_init_paddles)
	ldx     #>(_init_paddles)
	jsr     _banked_call
;
; bank_push(level_bank);
;
	lda     _level_bank
	jsr     _bank_push
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(current_nametable);
;
	lda     _current_nametable
	ldx     _current_nametable+1
	jsr     _vram_unrle
;
; bank_pop();
;
	jsr     _bank_pop
;
; pal_bg(current_background_palette);
;
	lda     _current_background_palette
	ldx     _current_background_palette+1
	jsr     _pal_bg
;
; pal_spr(current_sprite_palette);
;
	lda     _current_sprite_palette
	ldx     _current_sprite_palette+1
	jsr     _pal_spr
;
; load_collision();
;
	jsr     _load_collision
;
; brick_counter = 0;
;
	lda     #$00
	sta     _brick_counter
;
; for (collision_index = 0; collision_index < 368; ++collision_index) {
;
	sta     _collision_index
	sta     _collision_index+1
L0008:	lda     _collision_index
	cmp     #$70
	lda     _collision_index+1
	sbc     #$01
	bvc     L000C
	eor     #$80
L000C:	bpl     L0020
;
; temp = c_map[collision_index] >> 4;
;
	lda     _collision_index
	sta     ptr1
	lda     _collision_index+1
	clc
	adc     #>(_c_map)
	sta     ptr1+1
	ldy     #<(_c_map)
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp
;
; if (temp > 2 && temp < 11) {
;
	cmp     #$03
	bcc     L000E
	lda     _temp
	cmp     #$0B
	bcs     L000E
;
; ++brick_counter;
;
	inc     _brick_counter
;
; temp = c_map[collision_index] & 0x0F;
;
L000E:	lda     _collision_index
	sta     ptr1
	lda     _collision_index+1
	clc
	adc     #>(_c_map)
	sta     ptr1+1
	ldy     #<(_c_map)
	lda     (ptr1),y
	and     #$0F
	sta     _temp
;
; if (temp > 2 && temp < 11) {
;
	cmp     #$03
	bcc     L000A
	lda     _temp
	cmp     #$0B
	bcs     L000A
;
; ++brick_counter;
;
	inc     _brick_counter
;
; for (collision_index = 0; collision_index < 368; ++collision_index) {
;
L000A:	inc     _collision_index
	bne     L0008
	inc     _collision_index+1
	jmp     L0008
;
; set_chr_mode_4(chr_4_index);
;
L0020:	lda     _chr_4_index
	jsr     _set_chr_mode_4
;
; set_chr_mode_5(chr_5_index);
;
	lda     _chr_5_index
	jsr     _set_chr_mode_5
;
; skull_launched = FALSE;
;
	lda     #$00
	sta     _skull_launched
;
; if (game_state == MAIN) {
;
	lda     _game_state
	bne     L0021
;
; show_HUD();
;
	jsr     _show_HUD
;
; pal_bright(0);
;
L0021:	lda     #$00
	jsr     _pal_bright
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ load_title_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_title_screen: near

.segment	"CODE"

;
; set_chr_mode_1(0x0C);  // Sprite staff & lightning
;
	lda     #$0C
	jsr     _set_chr_mode_1
;
; set_chr_mode_2(0x0E);
;
	lda     #$0E
	jsr     _set_chr_mode_2
;
; set_chr_mode_3(0x0F);
;
	lda     #$0F
	jsr     _set_chr_mode_3
;
; set_chr_mode_4(0x10);
;
	lda     #$10
	jsr     _set_chr_mode_4
;
; set_chr_mode_5(0x11);
;
	lda     #$11
	jsr     _set_chr_mode_5
;
; pal_bg((const char*)pal_title);
;
	lda     #<(_pal_title)
	ldx     #>(_pal_title)
	jsr     _pal_bg
;
; pal_col(0x11, 0x21);
;
	lda     #$11
	jsr     pusha
	lda     #$21
	jsr     _pal_col
;
; pal_col(0x12, 0x18);
;
	lda     #$12
	jsr     pusha
	lda     #$18
	jsr     _pal_col
;
; pal_col(0x13, 0x0c);
;
	lda     #$13
	jsr     pusha
	lda     #$0C
	jsr     _pal_col
;
; bank_push(2);
;
	lda     #$02
	jsr     _bank_push
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; vram_adr(NAMETABLE_C);
;
	ldx     #$28
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(story);
;
	lda     #<(_story)
	ldx     #>(_story)
	jsr     _vram_unrle
;
; bank_pop();
;
	jsr     _bank_pop
;
; game_state = TITLE;
;
	lda     #$05
	sta     _game_state
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ remove_brick (char tile_type)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_remove_brick: near

.segment	"CODE"

;
; void remove_brick(char tile_type) {
;
	jsr     pusha
;
; one_vram_buffer(tile_type, backup_nt_index);
;
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     _one_vram_buffer
;
; c_map[backup_col_index] &= backup_nt_index % 2 ? 0b11110000 : 0b00001111;
;
	lda     _backup_col_index
	clc
	adc     #<(_c_map)
	tay
	lda     _backup_col_index+1
	adc     #>(_c_map)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	stx     tmp1
	ora     tmp1
	beq     L0002
	lda     #$F0
	jmp     L0003
L0002:	lda     #$0F
L0003:	jsr     tosanda0
	ldy     #$00
	jsr     staspidx
;
; --brick_counter;
;
	dec     _brick_counter
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ first_hit_long (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_first_hit_long: near

.segment	"CODE"

;
; if (backup_nt_index % 2) {
;
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	stx     tmp1
	ora     tmp1
	beq     L0002
;
; --backup_nt_index;
;
	lda     _backup_nt_index
	sec
	sbc     #$01
	sta     _backup_nt_index
	bcs     L0002
	dec     _backup_nt_index+1
;
; one_vram_buffer(0x0a, backup_nt_index);
;
L0002:	lda     #$0A
	jsr     pusha
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     _one_vram_buffer
;
; ++backup_nt_index;
;
	inc     _backup_nt_index
	bne     L0004
	inc     _backup_nt_index+1
;
; one_vram_buffer(0x0b, backup_nt_index);
;
L0004:	lda     #$0B
	jsr     pusha
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     _one_vram_buffer
;
; c_map[backup_col_index] = 0b00110011;
;
	lda     _backup_col_index
	clc
	adc     #<(_c_map)
	sta     ptr1
	lda     _backup_col_index+1
	adc     #>(_c_map)
	sta     ptr1+1
	lda     #$33
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ first_hit_small (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_first_hit_small: near

.segment	"CODE"

;
; one_vram_buffer(0x17, backup_nt_index);
;
	lda     #$17
	jsr     pusha
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     _one_vram_buffer
;
; if (backup_nt_index % 2) {
;
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	stx     tmp1
	ora     tmp1
	beq     L0002
;
; temp = c_map[backup_col_index] & 0b11110000;
;
	lda     _backup_col_index
	sta     ptr1
	lda     _backup_col_index+1
	clc
	adc     #>(_c_map)
	sta     ptr1+1
	ldy     #<(_c_map)
	lda     (ptr1),y
	and     #$F0
	sta     _temp
;
; c_map[backup_col_index] = temp + 0b00000101;
;
	lda     _backup_col_index
	clc
	adc     #<(_c_map)
	sta     ptr1
	lda     _backup_col_index+1
	adc     #>(_c_map)
	sta     ptr1+1
	lda     _temp
	clc
	adc     #$05
;
; } else {
;
	jmp     L0007
;
; temp = c_map[backup_col_index] & 0b00001111;
;
L0002:	lda     _backup_col_index
	sta     ptr1
	lda     _backup_col_index+1
	clc
	adc     #>(_c_map)
	sta     ptr1+1
	ldy     #<(_c_map)
	lda     (ptr1),y
	and     #$0F
	sta     _temp
;
; c_map[backup_col_index] = temp + 0b01010000;
;
	lda     _backup_col_index
	clc
	adc     #<(_c_map)
	sta     ptr1
	lda     _backup_col_index+1
	adc     #>(_c_map)
	sta     ptr1+1
	lda     _temp
	clc
	adc     #$50
L0007:	ldy     #$00
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hit_brick (char tile_type)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hit_brick: near

.segment	"CODE"

;
; void hit_brick(char tile_type) {
;
	jsr     pusha
;
; remove_brick(tile_type);
;
	ldy     #$00
	lda     (sp),y
	jsr     _remove_brick
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ add_x_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_x_speed: near

.segment	"CODE"

;
; void add_x_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = actors.xSpeed[param1];
;
	ldy     _param1
	lda     _actors+112,y
	sta     _temp
;
; actors.xSpeed[param1] += val;
;
	lda     #<(_actors+112)
	ldx     #>(_actors+112)
	clc
	adc     _param1
	bcc     L0003
	inx
L0003:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	lda     (sp),y
	clc
	adc     ptr1
	sta     (sreg),y
;
; if (actors.xSpeed[param1] > actors.maxSpeed[param1] || actors.xSpeed[param1] < temp) {
;
	ldy     _param1
	lda     _actors+112,y
	ldy     _param1
	cmp     _actors+210,y
	beq     L000D
	bcs     L000E
L000D:	ldy     _param1
	lda     _actors+112,y
	cmp     _temp
	bcs     L0004
;
; actors.xSpeed[param1] = actors.maxSpeed[param1];
;
L000E:	lda     #<(_actors+112)
	ldx     #>(_actors+112)
	clc
	adc     _param1
	bcc     L000A
	inx
L000A:	sta     ptr1
	stx     ptr1+1
	ldy     _param1
	lda     _actors+210,y
	ldy     #$00
	sta     (ptr1),y
;
; }
;
L0004:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ subtract_x_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_subtract_x_speed: near

.segment	"CODE"

;
; void subtract_x_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = actors.xSpeed[param1];
;
	ldy     _param1
	lda     _actors+112,y
	sta     _temp
;
; actors.xSpeed[param1] -= val;
;
	lda     #<(_actors+112)
	ldx     #>(_actors+112)
	clc
	adc     _param1
	bcc     L0003
	inx
L0003:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     (sp),y
	sta     (sreg),y
;
; if (actors.xSpeed[param1] < actors.minSpeed[param1] || actors.xSpeed[param1] > temp) {
;
	ldy     _param1
	lda     _actors+112,y
	ldy     _param1
	cmp     _actors+196,y
	bcc     L000E
	lda     _actors+112,y
	cmp     _temp
	beq     L0004
	bcc     L0004
;
; actors.xSpeed[param1] = actors.minSpeed[param1];
;
L000E:	lda     #<(_actors+112)
	ldx     #>(_actors+112)
	clc
	adc     _param1
	bcc     L000A
	inx
L000A:	sta     ptr1
	stx     ptr1+1
	ldy     _param1
	lda     _actors+196,y
	ldy     #$00
	sta     (ptr1),y
;
; }
;
L0004:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ add_y_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_y_speed: near

.segment	"CODE"

;
; void add_y_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = actors.ySpeed[param1];
;
	ldy     _param1
	lda     _actors+126,y
	sta     _temp
;
; actors.ySpeed[param1] += val;
;
	lda     #<(_actors+126)
	ldx     #>(_actors+126)
	clc
	adc     _param1
	bcc     L0003
	inx
L0003:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	lda     (sp),y
	clc
	adc     ptr1
	sta     (sreg),y
;
; if (actors.ySpeed[param1] > actors.maxSpeed[param1] || actors.ySpeed[param1] < temp) {
;
	ldy     _param1
	lda     _actors+126,y
	ldy     _param1
	cmp     _actors+210,y
	beq     L000D
	bcs     L000E
L000D:	ldy     _param1
	lda     _actors+126,y
	cmp     _temp
	bcs     L0004
;
; actors.ySpeed[param1] = actors.maxSpeed[param1];
;
L000E:	lda     #<(_actors+126)
	ldx     #>(_actors+126)
	clc
	adc     _param1
	bcc     L000A
	inx
L000A:	sta     ptr1
	stx     ptr1+1
	ldy     _param1
	lda     _actors+210,y
	ldy     #$00
	sta     (ptr1),y
;
; }
;
L0004:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ subtract_y_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_subtract_y_speed: near

.segment	"CODE"

;
; void subtract_y_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = actors.ySpeed[param1];
;
	ldy     _param1
	lda     _actors+126,y
	sta     _temp
;
; actors.ySpeed[param1] -= val;
;
	lda     #<(_actors+126)
	ldx     #>(_actors+126)
	clc
	adc     _param1
	bcc     L0003
	inx
L0003:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     (sp),y
	sta     (sreg),y
;
; if (actors.ySpeed[param1] < actors.minSpeed[param1] || actors.ySpeed[param1] > temp) {
;
	ldy     _param1
	lda     _actors+126,y
	ldy     _param1
	cmp     _actors+196,y
	bcc     L000E
	lda     _actors+126,y
	cmp     _temp
	beq     L0004
	bcc     L0004
;
; actors.ySpeed[param1] = actors.minSpeed[param1];
;
L000E:	lda     #<(_actors+126)
	ldx     #>(_actors+126)
	clc
	adc     _param1
	bcc     L000A
	inx
L000A:	sta     ptr1
	stx     ptr1+1
	ldy     _param1
	lda     _actors+196,y
	ldy     #$00
	sta     (ptr1),y
;
; }
;
L0004:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; char __near__ has_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_has_collision: near

.segment	"CODE"

;
; return (actors.x[draw_index] + actors.bbox_x[draw_index] < actors.x[pad_index] + actors.width[pad_index] + actors.bbox_x[pad_index] &&
;
	ldy     _draw_index
	ldx     #$00
	lda     _actors+56,y
	clc
	ldy     _draw_index
	adc     _actors,y
	bcc     L0019
	inx
L0019:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+28,y
	clc
	ldy     _pad_index
	adc     _actors,y
	bcc     L001A
	inx
L001A:	sta     ptr1
	stx     ptr1+1
	ldy     _pad_index
	lda     _actors+56,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L001B
	inx
L001B:	jsr     tosicmp
	jpl     L0007
;
; actors.x[draw_index] + actors.bbox_x[draw_index] + actors.width[draw_index] > actors.x[pad_index] + actors.bbox_x[pad_index] &&
;
	ldy     _draw_index
	ldx     #$00
	lda     _actors+56,y
	clc
	ldy     _draw_index
	adc     _actors,y
	bcc     L001C
	inx
L001C:	sta     ptr1
	stx     ptr1+1
	ldy     _draw_index
	lda     _actors+28,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L001D
	inx
L001D:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+56,y
	clc
	ldy     _pad_index
	adc     _actors,y
	bcc     L001E
	inx
L001E:	jsr     tosicmp
	jmi     L0007
	jeq     L0007
;
; actors.y[draw_index] + actors.bbox_y[draw_index] < actors.y[pad_index] + actors.height[pad_index] + actors.bbox_y[pad_index] &&
;
	ldy     _draw_index
	ldx     #$00
	lda     _actors+70,y
	clc
	ldy     _draw_index
	adc     _actors+14,y
	bcc     L001F
	inx
L001F:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+42,y
	clc
	ldy     _pad_index
	adc     _actors+14,y
	bcc     L0020
	inx
L0020:	sta     ptr1
	stx     ptr1+1
	ldy     _pad_index
	lda     _actors+70,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0021
	inx
L0021:	jsr     tosicmp
	bpl     L0007
;
; actors.y[draw_index] + actors.bbox_y[draw_index] + actors.height[draw_index] > actors.y[pad_index] + actors.bbox_y[pad_index]);
;
	ldy     _draw_index
	ldx     #$00
	lda     _actors+70,y
	clc
	ldy     _draw_index
	adc     _actors+14,y
	bcc     L0022
	inx
L0022:	sta     ptr1
	stx     ptr1+1
	ldy     _draw_index
	lda     _actors+42,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0023
	inx
L0023:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+70,y
	clc
	ldy     _pad_index
	adc     _actors+14,y
	bcc     L0024
	inx
L0024:	jsr     tosicmp
	beq     L0007
	bpl     L0017
L0007:	ldx     #$00
	txa
	rts
L0017:	lda     #$01
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_collision_type (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_collision_type: near

.segment	"CODE"

;
; collision_index = (temp_x_col >> 4) + (((temp_y_col >> 3) - 5) * 16);
;
	lda     _temp_x_col
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha0
	lda     _temp_y_col
	lsr     a
	lsr     a
	lsr     a
	sec
	sbc     #$05
	bcs     L0002
	ldx     #$FF
L0002:	jsr     aslax4
	jsr     tosaddax
	sta     _collision_index
	stx     _collision_index+1
;
; return (temp_x_col >> 3) % 2 ? c_map[collision_index] & 0x0F : c_map[collision_index] >> 4;
;
	lda     _temp_x_col
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha0
	lda     #$02
	jsr     tosmoda0
	stx     tmp1
	ora     tmp1
	beq     L0003
	lda     _collision_index
	sta     ptr1
	lda     _collision_index+1
	clc
	adc     #>(_c_map)
	sta     ptr1+1
	ldy     #<(_c_map)
	lda     (ptr1),y
	ldx     #$00
	and     #$0F
	rts
L0003:	lda     _collision_index
	sta     ptr1
	lda     _collision_index+1
	clc
	adc     #>(_c_map)
	sta     ptr1+1
	ldy     #<(_c_map)
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ set_collision_data (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_collision_data: near

.segment	"CODE"

;
; backup_nt_index = NTADR_A((temp_x_col >> 3), (temp_y_col >> 3));
;
	ldx     #$00
	lda     _temp_y_col
	lsr     a
	lsr     a
	lsr     a
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	sta     ptr1
	stx     ptr1+1
	lda     _temp_x_col
	lsr     a
	lsr     a
	lsr     a
	ora     ptr1
	sta     _backup_nt_index
	lda     ptr1+1
	ora     #$20
	sta     _backup_nt_index+1
;
; backup_col_type = get_collision_type();
;
	jsr     _get_collision_type
	sta     _backup_col_type
;
; backup_col_index = collision_index;
;
	lda     _collision_index+1
	sta     _backup_col_index+1
	lda     _collision_index
	sta     _backup_col_index
;
; return backup_col_type;
;
	ldx     #$00
	lda     _backup_col_type
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ animate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_animate: near

.segment	"CODE"

;
; banked_call(0, set_animation_info);
;
	lda     #$00
	jsr     pusha
	lda     #<(_set_animation_info)
	ldx     #>(_set_animation_info)
	jsr     _banked_call
;
; if (actors.counter[draw_index] == actors.animation_delay[draw_index]) {
;
	ldy     _draw_index
	lda     _actors+224,y
	ldy     _draw_index
	cmp     _actors+238,y
	jne     L0002
;
; if ((actors.state[draw_index] % 2 != 0) && actors.current_frame[draw_index] == frame_count - 1) {
;
	lda     _actors+266,y
	and     #$01
	beq     L0005
	ldy     _draw_index
	lda     _actors+252,y
	jsr     pusha0
	lda     _frame_count
	sec
	sbc     #$01
	bcs     L000A
	ldx     #$FF
L000A:	jsr     tosicmp
	bne     L0005
;
; ++actors.state[draw_index];
;
	lda     #<(_actors+266)
	ldx     #>(_actors+266)
	clc
	adc     _draw_index
	bcc     L000D
	inx
L000D:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; banked_call(0, set_animation_info);
;
	tya
	jsr     pusha
	lda     #<(_set_animation_info)
	ldx     #>(_set_animation_info)
	jsr     _banked_call
;
; actors.current_frame[draw_index] = 0;
;
	ldy     _draw_index
	lda     #$00
	sta     _actors+252,y
;
; } else {
;
	jmp     L000F
;
; actors.current_frame[draw_index] = ++actors.current_frame[draw_index] % frame_count;
;
L0005:	lda     #<(_actors+252)
	ldx     #>(_actors+252)
	clc
	adc     _draw_index
	bcc     L0010
	inx
L0010:	jsr     pushax
	lda     #<(_actors+252)
	ldx     #>(_actors+252)
	clc
	adc     _draw_index
	bcc     L0011
	inx
L0011:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
	jsr     pusha0
	lda     _frame_count
	jsr     tosumoda0
	ldy     #$00
	jsr     staspidx
;
; actors.counter[draw_index] = 0;
;
L000F:	ldy     _draw_index
	lda     #$00
	sta     _actors+224,y
;
; ++actors.counter[draw_index];
;
L0002:	lda     #<(_actors+224)
	ldx     #>(_actors+224)
	clc
	adc     _draw_index
	bcc     L0013
	inx
L0013:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; animation_index += actors.current_frame[draw_index];
;
	ldy     _draw_index
	lda     _actors+252,y
	clc
	adc     _animation_index
	sta     _animation_index
;
; if (actors.xDir[draw_index] == RIGHT) {
;
	lda     #<(_actors+84)
	ldx     #>(_actors+84)
	clc
	adc     _draw_index
	bcc     L0016
	inx
L0016:	ldy     #$00
	jsr     ldaidx
	cmp     #$01
	bne     L0015
;
; animation_index += frame_count;
;
	lda     _frame_count
	clc
	adc     _animation_index
	sta     _animation_index
;
; oam_meta_spr(actors.x[draw_index], actors.y[draw_index], animation_array[animation_index]);
;
L0015:	jsr     decsp2
	ldy     _draw_index
	lda     _actors,y
	ldy     #$01
	sta     (sp),y
	ldy     _draw_index
	lda     _actors+14,y
	ldy     #$00
	sta     (sp),y
	ldx     #$00
	lda     _animation_index
	asl     a
	bcc     L001A
	inx
	clc
L001A:	adc     _animation_array
	sta     ptr1
	txa
	adc     _animation_array+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_inactive_actor_index (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_inactive_actor_index: near

.segment	"CODE"

;
; for (i = 6; i < ACTOR_NUMBER; ++i) {
;
	lda     #$06
	sta     _i
	ldx     #$00
L0008:	lda     _i
	cmp     #$0E
	bcs     L000A
;
; if (actors.state[i] == INACTIVE) {
;
	ldy     _i
	lda     _actors+266,y
	cmp     #$80
	bne     L0009
;
; return i;
;
	lda     _i
	rts
;
; for (i = 6; i < ACTOR_NUMBER; ++i) {
;
L0009:	inc     _i
	jmp     L0008
;
; return FALSE;
;
L000A:	lda     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ set_projectile_dir_speed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_projectile_dir_speed: near

.segment	"CODE"

;
; if (actors.x[param1] > actors.x[param2]) {
;
	ldy     _param1
	lda     _actors,y
	ldy     _param2
	cmp     _actors,y
	bcc     L0002
	beq     L0002
;
; actors.xDir[param1] = LEFT;
;
	ldy     _param1
	lda     #$FF
	sta     _actors+84,y
;
; actors.xSpeed[param1] = actors.x[param1] - actors.x[param2];
;
	lda     #<(_actors+112)
	ldx     #>(_actors+112)
	clc
	adc     _param1
	bcc     L0006
	inx
L0006:	sta     ptr1
	stx     ptr1+1
	ldy     _param1
	lda     _actors,y
	sec
	ldy     _param2
;
; } else {
;
	jmp     L001E
;
; actors.xDir[param1] = RIGHT;
;
L0002:	ldy     _param1
	lda     #$01
	sta     _actors+84,y
;
; actors.xSpeed[param1] = actors.x[param2] - actors.x[param1];
;
	lda     #<(_actors+112)
	ldx     #>(_actors+112)
	clc
	adc     _param1
	bcc     L000B
	inx
L000B:	sta     ptr1
	stx     ptr1+1
	ldy     _param2
	lda     _actors,y
	sec
	ldy     _param1
L001E:	sbc     _actors,y
	ldy     #$00
	sta     (ptr1),y
;
; if (actors.y[param1] > actors.y[param2]) {
;
	ldy     _param1
	lda     _actors+14,y
	ldy     _param2
	cmp     _actors+14,y
	bcc     L000E
	beq     L000E
;
; actors.yDir[param1] = UP;
;
	ldy     _param1
	lda     #$FF
	sta     _actors+98,y
;
; actors.ySpeed[param1] = actors.y[param1] - actors.y[param2];
;
	lda     #<(_actors+126)
	ldx     #>(_actors+126)
	clc
	adc     _param1
	bcc     L0012
	inx
L0012:	sta     ptr1
	stx     ptr1+1
	ldy     _param1
	lda     _actors+14,y
	sec
	ldy     _param2
;
; } else {
;
	jmp     L001F
;
; actors.yDir[param1] = DOWN;
;
L000E:	ldy     _param1
	lda     #$01
	sta     _actors+98,y
;
; actors.ySpeed[param1] = actors.y[param2] - actors.y[param1];
;
	lda     #<(_actors+126)
	ldx     #>(_actors+126)
	clc
	adc     _param1
	bcc     L0017
	inx
L0017:	sta     ptr1
	stx     ptr1+1
	ldy     _param2
	lda     _actors+14,y
	sec
	ldy     _param1
L001F:	sbc     _actors+14,y
	ldy     #$00
	sta     (ptr1),y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move: near

.segment	"CODE"

;
; switch (actors.type[draw_index]) {
;
	ldy     _draw_index
	lda     _actors+280,y
;
; }
;
	cmp     #$01
	beq     L00BA
	cmp     #$05
	jeq     L00C0
	cmp     #$12
	jeq     L0055
	cmp     #$13
	jeq     L00C8
	cmp     #$17
	jeq     L0074
	cmp     #$1C
	jeq     L008B
	rts
;
; param1 = draw_index;  // actor index for get_x_speed()
;
L00BA:	lda     _draw_index
	sta     _param1
;
; if (actors.state[draw_index] == DEAD) {
;
	ldy     _draw_index
	lda     _actors+266,y
	cmp     #$04
	bne     L0006
;
; if (game_state != STORY && actors.counter[draw_index] == 254) {
;
	lda     _game_state
	cmp     #$03
	beq     L0008
	ldy     _draw_index
	lda     _actors+224,y
	cmp     #$FE
	bne     L0008
;
; actors.state[draw_index] = RISING;
;
	ldy     _draw_index
	lda     #$05
	sta     _actors+266,y
;
; actors.counter[draw_index] == 0;
;
	ldy     _draw_index
	lda     _actors+224,y
	jsr     booleq
;
; actors.animation_delay[draw_index] = 16;
;
	ldy     _draw_index
	lda     #$10
	sta     _actors+238,y
;
; } else if (actors.state[draw_index] != DYING && actors.state[draw_index] != RISING) {
;
L0008:	rts
L0006:	ldy     _draw_index
	lda     _actors+266,y
	cmp     #$03
	bne     L00DC
;
; break;
;
	rts
;
; } else if (actors.state[draw_index] != DYING && actors.state[draw_index] != RISING) {
;
L00DC:	ldy     _draw_index
	lda     _actors+266,y
	cmp     #$05
	bne     L00DD
;
; break;
;
	rts
;
; temp_x = actors.x[draw_index] + get_x_speed();
;
L00DD:	ldy     _draw_index
	lda     _actors,y
	jsr     pusha0
	jsr     _get_x_speed
	jsr     tosaddax
	sta     _temp_x
;
; temp_y_col = actors.y[draw_index] + actors.height[draw_index];
;
	ldy     _draw_index
	lda     _actors+42,y
	clc
	ldy     _draw_index
	adc     _actors+14,y
	sta     _temp_y_col
;
; temp_x_col = temp_x;
;
	lda     _temp_x
	sta     _temp_x_col
;
; if (actors.xDir[draw_index] == RIGHT) {
;
	lda     #<(_actors+84)
	ldx     #>(_actors+84)
	clc
	adc     _draw_index
	bcc     L001B
	inx
L001B:	ldy     #$00
	jsr     ldaidx
	cmp     #$01
	bne     L001A
;
; temp_x_col += actors.width[draw_index];
;
	ldy     _draw_index
	lda     _actors+28,y
	clc
	adc     _temp_x_col
	sta     _temp_x_col
;
; if (get_collision_type()) {
;
L001A:	jsr     _get_collision_type
	tax
	beq     L001D
;
; actors.current_frame[draw_index] = 0;
;
	ldy     _draw_index
	lda     #$00
	sta     _actors+252,y
;
; actors.counter[draw_index] = 0;
;
	ldy     _draw_index
	sta     _actors+224,y
;
; actors.state[draw_index] = TURNING;
;
	ldy     _draw_index
	lda     #$01
	sta     _actors+266,y
;
; actors.xDir[draw_index] = -actors.xDir[draw_index];
;
	lda     #<(_actors+84)
	ldx     #>(_actors+84)
	clc
	adc     _draw_index
	bcc     L0021
	inx
L0021:	sta     sreg
	stx     sreg+1
	lda     #<(_actors+84)
	ldx     #>(_actors+84)
	clc
	adc     _draw_index
	bcc     L0022
	inx
L0022:	ldy     #$00
	jsr     ldaidx
	eor     #$FF
	clc
	adc     #$01
	cmp     #$80
	sta     (sreg),y
;
; } else {
;
	rts
;
; actors.x[draw_index] = temp_x;
;
L001D:	ldy     _draw_index
	lda     _temp_x
	sta     _actors,y
;
; break;
;
	rts
;
; param1 = CROW;
;
L00C0:	lda     _CROW
	sta     _param1
;
; switch (actors.state[CROW]) {
;
	ldy     _CROW
	lda     _actors+266,y
;
; }
;
	beq     L002A
	cmp     #$04
	beq     L00C1
	cmp     #$06
	beq     L0031
	cmp     #$08
	jeq     L003F
	jmp     L0029
;
; if (actors.x[CROW] < 6) {
;
L002A:	ldy     _CROW
	lda     _actors,y
	cmp     #$06
	jcs     L0029
;
; actors.state[CROW] = INACTIVE;
;
	ldy     _CROW
	lda     #$80
;
; break;
;
	jmp     L00B6
;
; param2 = SKULL;
;
L00C1:	lda     #$05
	sta     _param2
;
; set_projectile_dir_speed();
;
	jsr     _set_projectile_dir_speed
;
; actors.xVelocity[CROW] = 64;
;
	ldy     _CROW
	lda     #$40
	sta     _actors+168,y
;
; actors.yVelocity[CROW] = 64;
;
	ldy     _CROW
	sta     _actors+182,y
;
; break;
;
	jmp     L0029
;
; actors.x[SKULL] = actors.x[CROW] + 8;
;
L0031:	ldy     _CROW
	lda     _actors,y
	clc
	adc     #$08
	sta     _actors+5
;
; actors.y[SKULL] = actors.y[CROW] + 8;
;
	ldy     _CROW
	lda     _actors+14,y
	clc
	adc     #$08
	sta     _actors+19
;
; if (actors.y[CROW] < 72) {
;
	ldy     _CROW
	lda     _actors+14,y
	cmp     #$48
	bcs     L0036
;
; actors.ySpeed[CROW] = 0;
;
	ldy     _CROW
	lda     #$00
	sta     _actors+126,y
;
; actors.yRemain[CROW] = 0;
;
	ldy     _CROW
	sta     _actors+154,y
;
; actors.yVelocity[CROW] = 0;
;
	ldy     _CROW
	sta     _actors+182,y
;
; if (actors.x[CROW] < 80) {
;
L0036:	ldy     _CROW
	lda     _actors,y
	cmp     #$50
	bcs     L003B
;
; actors.state[CROW] = RETURNING;
;
	ldy     _CROW
	lda     #$08
	sta     _actors+266,y
;
; actors.animation_delay[CROW] = 64;
;
	ldy     _CROW
	lda     #$40
	sta     _actors+238,y
;
; actors.xVelocity[SKULL] = 32;
;
	lda     #$20
	sta     _actors+173
;
; actors.xDir[SKULL] = LEFT;
;
	lda     #$FF
	sta     _actors+89
;
; actors.state[SKULL] = ROTATE_H;
;
	lda     #$02
	sta     _actors+271
;
; param2 = STILL_DECORATION;
;
	lda     _STILL_DECORATION
	sta     _param2
;
; set_projectile_dir_speed();
;
	jsr     _set_projectile_dir_speed
;
; oam_spr(actors.x[SKULL], actors.y[SKULL], 0x00, 0x00);
;
L003B:	jsr     decsp3
	lda     _actors+5
	ldy     #$02
	sta     (sp),y
	lda     _actors+19
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; break;
;
	jmp     L0029
;
; if (actors.x[CROW] == actors.x[STILL_DECORATION]) {
;
L003F:	ldy     _CROW
	lda     _actors,y
	ldy     _STILL_DECORATION
	cmp     _actors,y
	bne     L0029
;
; actors.state[CROW] = IDLE2;
;
	ldy     _CROW
	lda     #$02
	sta     _actors+266,y
;
; actors.xDir[CROW] = LEFT;
;
	ldy     _CROW
	lda     #$FF
	sta     _actors+84,y
;
; actors.x[CROW] = 192;
;
	ldy     _CROW
	lda     #$C0
	sta     _actors,y
;
; actors.y[CROW] = 60;
;
	ldy     _CROW
	lda     #$3C
	sta     _actors+14,y
;
; actors.state[TRIGGER] = IDLE;
;
	ldy     _TRIGGER
	lda     #$00
L00B6:	sta     _actors+266,y
;
; if (actors.state[CROW] == IDLE2 || actors.state[CROW] == SKWAK) {
;
L0029:	ldy     _CROW
	lda     _actors+266,y
	cmp     #$02
	beq     L00C4
	ldy     _CROW
	lda     _actors+266,y
	cmp     #$01
	bne     L0048
;
; if (actors.y[SKULL] > 120 && actors.y[SKULL] < 132) {
;
L00C4:	lda     _actors+19
	cmp     #$79
	bcc     L004D
	cmp     #$84
	bcs     L004D
;
; actors.state[CROW] = SKWAK;
;
	ldy     _CROW
	lda     #$01
	sta     _actors+266,y
;
; } else {
;
L004D:	rts
;
; actors.x[CROW] += get_x_speed();
;
L0048:	lda     #<(_actors)
	ldx     #>(_actors)
	clc
	adc     _CROW
	bcc     L0053
	inx
L0053:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _get_x_speed
	jsr     tosaddax
	ldy     #$00
	jsr     staspidx
;
; actors.y[CROW] += get_y_speed();
;
	lda     #<(_actors+14)
	ldx     #>(_actors+14)
	clc
	adc     _CROW
	bcc     L0054
	inx
L0054:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _get_y_speed
	jsr     tosaddax
	ldy     #$00
	jmp     staspidx
;
; if (actors.state[SORCERER] == ATTACKING) {
;
L0055:	ldy     _SORCERER
	lda     _actors+266,y
	cmp     #$02
	beq     L00DE
;
; }
;
	rts
;
; ++actors.state[SORCERER];
;
L00DE:	lda     #<(_actors+266)
	ldx     #>(_actors+266)
	clc
	adc     _SORCERER
	bcc     L0058
	inx
L0058:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; temp = get_inactive_actor_index();
;
	jsr     _get_inactive_actor_index
	sta     _temp
;
; if (temp) {
;
	lda     _temp
	bne     L00DF
;
; }
;
	rts
;
; actors.x[temp] = actors.x[SORCERER] + 8;
;
L00DF:	lda     #<(_actors)
	ldx     #>(_actors)
	clc
	adc     _temp
	bcc     L005A
	inx
L005A:	sta     ptr1
	stx     ptr1+1
	ldy     _SORCERER
	lda     _actors,y
	clc
	adc     #$08
	ldy     #$00
	sta     (ptr1),y
;
; actors.y[temp] = actors.y[SORCERER] + 16;
;
	lda     #<(_actors+14)
	ldx     #>(_actors+14)
	clc
	adc     _temp
	bcc     L005D
	inx
L005D:	sta     ptr1
	stx     ptr1+1
	ldy     _SORCERER
	lda     _actors+14,y
	clc
	adc     #$10
	ldy     #$00
	sta     (ptr1),y
;
; actors.width[temp] = 8;
;
	ldy     _temp
	lda     #$08
	sta     _actors+28,y
;
; actors.height[temp] = 8;
;
	ldy     _temp
	sta     _actors+42,y
;
; actors.animation_delay[temp] = 8;
;
	ldy     _temp
	sta     _actors+238,y
;
; actors.state[temp] = APPEARING;
;
	ldy     _temp
	lda     #$01
	sta     _actors+266,y
;
; actors.type[temp] = TYPE_PARALYZER;
;
	ldy     _temp
	lda     #$13
	sta     _actors+280,y
;
; param1 = temp;
;
	lda     _temp
	sta     _param1
;
; param2 = 0;
;
	lda     #$00
	sta     _param2
;
; set_projectile_dir_speed();
;
	jmp     _set_projectile_dir_speed
;
; param1 = draw_index;
;
L00C8:	lda     _draw_index
	sta     _param1
;
; actors.x[draw_index] += get_x_speed();
;
	lda     #<(_actors)
	ldx     #>(_actors)
	clc
	adc     _draw_index
	bcc     L0066
	inx
L0066:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _get_x_speed
	jsr     tosaddax
	ldy     #$00
	jsr     staspidx
;
; actors.y[draw_index] += get_y_speed();
;
	lda     #<(_actors+14)
	ldx     #>(_actors+14)
	clc
	adc     _draw_index
	bcc     L0067
	inx
L0067:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	jsr     _get_y_speed
	jsr     tosaddax
	ldy     #$00
	jsr     staspidx
;
; if (actors.x[draw_index] < 8 || actors.x[draw_index] > 248 || actors.y[draw_index] > 240 || actors.y[draw_index] < 8) {
;
	ldy     _draw_index
	lda     _actors,y
	cmp     #$08
	bcc     L00C9
	ldy     _draw_index
	lda     _actors,y
	cmp     #$F9
	bcs     L00C9
	ldy     _draw_index
	lda     _actors+14,y
	cmp     #$F1
	bcs     L00C9
	ldy     _draw_index
	lda     _actors+14,y
	cmp     #$08
	bcs     L00CF
;
; actors.state[draw_index] = INACTIVE;
;
L00C9:	ldy     _draw_index
	lda     #$80
	sta     _actors+266,y
;
; pad_index = 0;
;
L00CF:	lda     #$00
	sta     _pad_index
;
; if (has_collision()) {
;
	jsr     _has_collision
	tax
	bne     L00E0
;
; }
;
	rts
;
; actors.counter[pad_index] = 100;
;
L00E0:	ldy     _pad_index
	lda     #$64
	sta     _actors+224,y
;
; actors.state[draw_index] = INACTIVE;
;
	ldy     _draw_index
	lda     #$80
	sta     _actors+266,y
;
; actors.state[pad_index] = PARALYZED;
;
	ldy     _pad_index
	lda     #$05
	sta     _actors+266,y
;
; break;
;
	rts
;
; ++actors.width[draw_index];
;
L0074:	lda     #<(_actors+28)
	ldx     #>(_actors+28)
	clc
	adc     _draw_index
	bcc     L0075
	inx
L0075:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (actors.width[draw_index] == BOMB_DELAY) {
;
	ldy     _draw_index
	lda     _actors+28,y
	cmp     #$20
	bne     L0076
;
; actors.counter[draw_index] = 0;
;
	ldy     _draw_index
	lda     #$00
	sta     _actors+224,y
;
; actors.state[draw_index] = APPEARING;
;
	ldy     _draw_index
	lda     #$01
	sta     _actors+266,y
;
; if (actors.state[draw_index] == 2) {
;
L0076:	ldy     _draw_index
	lda     _actors+266,y
	cmp     #$02
	beq     L00E1
;
; }
;
	rts
;
; temp_x_col = actors.x[draw_index];
;
L00E1:	ldy     _draw_index
	lda     _actors,y
	sta     _temp_x_col
;
; temp_y_col = actors.y[draw_index];
;
	ldy     _draw_index
	lda     _actors+14,y
	sta     _temp_y_col
;
; for (i = 0; i < 3; i += 8) {
;
	lda     #$00
L00B8:	sta     _i
	cmp     #$03
	bcs     L007F
;
; for (j = 0; j < 3; j += 8) {
;
	lda     #$00
L00B7:	sta     _j
	cmp     #$03
	bcs     L00CD
;
; temp_x_col += i;
;
	lda     _i
	clc
	adc     _temp_x_col
	sta     _temp_x_col
;
; temp_y_col += j;
;
	lda     _j
	clc
	adc     _temp_y_col
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L00CC
;
; if (backup_col_type == COL_TYPE_BOMBABLE) {
;
	ldx     #$00
	lda     _backup_col_type
	cmp     #$08
	bne     L00CC
;
; do_skull_tile_collision();
;
	jsr     _do_skull_tile_collision
;
; for (j = 0; j < 3; j += 8) {
;
L00CC:	lda     #$08
	clc
	adc     _j
	jmp     L00B7
;
; for (i = 0; i < 3; i += 8) {
;
L00CD:	lda     #$08
	clc
	adc     _i
	jmp     L00B8
;
; actors.counter[draw_index] = NULL;
;
L007F:	ldy     _draw_index
	lda     #$00
	sta     _actors+224,y
;
; actors.width[draw_index] = NULL;
;
	ldy     _draw_index
	sta     _actors+28,y
;
; actors.state[draw_index] = INACTIVE;
;
	ldy     _draw_index
	lda     #$80
	sta     _actors+266,y
;
; break;
;
	rts
;
; ++actors.width[draw_index]; // TIMER
;
L008B:	lda     #<(_actors+28)
	ldx     #>(_actors+28)
	clc
	adc     _draw_index
	bcc     L008C
	inx
L008C:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (actors.state[draw_index] == IDLE) {
;
	ldy     _draw_index
	lda     _actors+266,y
	bne     L008D
;
; if (actors.width[draw_index] == 250) {
;
	ldy     _draw_index
	lda     _actors+28,y
	cmp     #$FA
;
; } else if (actors.state[draw_index] == IDLE2) {
;
	jmp     L00DB
L008D:	ldy     _draw_index
	lda     _actors+266,y
	cmp     #$02
	bne     L0093
;
; if (actors.width[draw_index] == 250) {
;
	ldy     _draw_index
	lda     _actors+28,y
	cmp     #$FA
	beq     L00E2
;
; }
;
	rts
;
; actors.state[TRIGGER] = INACTIVE;
;
L00E2:	ldy     _TRIGGER
	lda     #$80
	sta     _actors+266,y
;
; actors.state[CROW] = FLYING;
;
	ldy     _CROW
	lda     #$00
	sta     _actors+266,y
;
; param1 = CROW;
;
	lda     _CROW
	sta     _param1
;
; param2 = SPECIAL_ITEM;
;
	lda     _SPECIAL_ITEM
	sta     _param2
;
; set_projectile_dir_speed();
;
	jsr     _set_projectile_dir_speed
;
; } else if (actors.state[draw_index] == 4) {
;
	jmp     L00DA
L0093:	ldy     _draw_index
	lda     _actors+266,y
	cmp     #$04
	bne     L009B
;
; if (actors.x[CROW] == actors.x[draw_index]) {
;
	ldy     _CROW
	lda     _actors,y
	ldy     _draw_index
	cmp     _actors,y
	bne     L00CE
;
; actors.state[CROW] = IDLE;
;
	ldy     _CROW
	lda     #$00
	sta     _actors+266,y
;
; actors.xSpeed[CROW] = 0;
;
	ldy     _CROW
	sta     _actors+112,y
;
; actors.ySpeed[CROW] = 0;
;
	ldy     _CROW
	sta     _actors+126,y
;
; actors.counter[CROW] = 0;
;
	ldy     _CROW
	sta     _actors+224,y
;
; actors.y[CROW] = actors.y[draw_index] - 16;
;
	lda     #<(_actors+14)
	ldx     #>(_actors+14)
	clc
	adc     _CROW
	bcc     L00A4
	inx
L00A4:	sta     ptr1
	stx     ptr1+1
	ldy     _draw_index
	lda     _actors+14,y
	sec
	sbc     #$10
	ldy     #$00
	sta     (ptr1),y
;
; if (actors.width[draw_index == 188]) {
;
L00CE:	lda     _draw_index
	cmp     #$BC
	jsr     booleq
	sta     ptr1
	clc
	lda     #>(_actors+28)
	sta     ptr1+1
	ldy     #<(_actors+28)
	lda     (ptr1),y
	beq     L00A7
;
; actors.state[CROW] = CROW_EAT;
;
	ldy     _CROW
	lda     #$09
	sta     _actors+266,y
;
; if (actors.width[draw_index] == 250) {
;
L00A7:	ldy     _draw_index
	lda     _actors+28,y
	cmp     #$FA
;
; } else if (actors.state[draw_index] == CHEWING) {
;
	jmp     L00DB
L009B:	ldy     _draw_index
	lda     _actors+266,y
	cmp     #$06
	bne     L0004
;
; actors.state[CROW] = INACTIVE;
;
	ldy     _CROW
	lda     #$80
	sta     _actors+266,y
;
; if (actors.x[CROW] == actors.x[draw_index] - 8) {
;
	ldy     _CROW
	lda     _actors,y
	jsr     pusha0
	ldy     _draw_index
	lda     _actors,y
	sec
	sbc     #$08
	bcs     L00B3
	ldx     #$FF
L00B3:	jsr     tosicmp
L00DB:	bne     L0004
;
; ++actors.state[draw_index];
;
L00DA:	lda     #<(_actors+266)
	ldx     #>(_actors+266)
	clc
	adc     _draw_index
	bcc     L00B4
	inx
L00B4:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; }
;
L0004:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ animate_actors (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_animate_actors: near

.segment	"CODE"

;
; for (draw_index = 4; draw_index < ACTOR_NUMBER; ++draw_index) {
;
	lda     #$04
	sta     _draw_index
L0008:	lda     _draw_index
	cmp     #$0E
	bcs     L0003
;
; if (actors.state[draw_index] != INACTIVE) {
;
	ldy     _draw_index
	lda     _actors+266,y
	cmp     #$80
	beq     L0009
;
; animate();
;
	jsr     _animate
;
; move();
;
	jsr     _move
;
; for (draw_index = 4; draw_index < ACTOR_NUMBER; ++draw_index) {
;
L0009:	inc     _draw_index
	jmp     L0008
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; char __near__ skull_was_beside (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_skull_was_beside: near

.segment	"CODE"

;
; return actors.x[SKULL] + 1 > actors.x[pad_index] + actors.width[pad_index] + actors.bbox_x[pad_index] ||
;
	ldx     #$00
	lda     _actors+5
	clc
	adc     #$01
	bcc     L0002
	inx
L0002:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+28,y
	clc
	ldy     _pad_index
	adc     _actors,y
	bcc     L000B
	inx
L000B:	sta     ptr1
	stx     ptr1+1
	ldy     _pad_index
	lda     _actors+56,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L000C
	inx
L000C:	jsr     tosicmp
	beq     L000E
	bpl     L0006
;
; actors.x[SKULL] + 7 < actors.x[pad_index] + actors.bbox_x[pad_index];
;
L000E:	ldx     #$00
	lda     _actors+5
	clc
	adc     #$07
	bcc     L0007
	inx
L0007:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+56,y
	clc
	ldy     _pad_index
	adc     _actors,y
	bcc     L000D
	inx
L000D:	jsr     tosicmp
	bmi     L0006
	ldx     #$00
	txa
	rts
L0006:	lda     #$01
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; char __near__ skull_was_above (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_skull_was_above: near

.segment	"CODE"

;
; return actors.y[SKULL] + 1 > actors.y[pad_index] + actors.height[pad_index] + actors.bbox_y[pad_index] ||
;
	ldx     #$00
	lda     _actors+19
	clc
	adc     #$01
	bcc     L0002
	inx
L0002:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+42,y
	clc
	ldy     _pad_index
	adc     _actors+14,y
	bcc     L000B
	inx
L000B:	sta     ptr1
	stx     ptr1+1
	ldy     _pad_index
	lda     _actors+70,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L000C
	inx
L000C:	jsr     tosicmp
	beq     L000E
	bpl     L0006
;
; actors.y[SKULL] + 7 < actors.y[pad_index] + actors.bbox_y[pad_index];
;
L000E:	ldx     #$00
	lda     _actors+19
	clc
	adc     #$07
	bcc     L0007
	inx
L0007:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+70,y
	clc
	ldy     _pad_index
	adc     _actors+14,y
	bcc     L000D
	inx
L000D:	jsr     tosicmp
	bmi     L0006
	ldx     #$00
	txa
	rts
L0006:	lda     #$01
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; char __near__ is_skull_collision_paddle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_skull_collision_paddle: near

.segment	"CODE"

;
; return (temp_x < actors.x[pad_index] + actors.width[pad_index] + actors.bbox_x[pad_index] &&
;
	lda     _temp_x
	jsr     pusha0
	ldy     _pad_index
	lda     _actors+28,y
	clc
	ldy     _pad_index
	adc     _actors,y
	bcc     L0011
	inx
L0011:	sta     ptr1
	stx     ptr1+1
	ldy     _pad_index
	lda     _actors+56,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0012
	inx
L0012:	jsr     tosicmp
	bpl     L0005
;
; temp_x + actors.width[SKULL] > actors.x[pad_index] + actors.bbox_x[pad_index] &&
;
	ldx     #$00
	lda     _temp_x
	clc
	adc     _actors+33
	bcc     L000F
	inx
L000F:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+56,y
	clc
	ldy     _pad_index
	adc     _actors,y
	bcc     L0013
	inx
L0013:	jsr     tosicmp
	bmi     L0005
	beq     L0005
;
; temp_y < actors.y[pad_index] + actors.height[pad_index] + actors.bbox_y[pad_index] &&
;
	lda     _temp_y
	jsr     pusha0
	ldy     _pad_index
	lda     _actors+42,y
	clc
	ldy     _pad_index
	adc     _actors+14,y
	bcc     L0014
	inx
L0014:	sta     ptr1
	stx     ptr1+1
	ldy     _pad_index
	lda     _actors+70,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0015
	inx
L0015:	jsr     tosicmp
	bpl     L0005
;
; temp_y + actors.height[SKULL] > actors.y[pad_index] + actors.bbox_y[pad_index]);
;
	ldx     #$00
	lda     _temp_y
	clc
	adc     _actors+47
	bcc     L0010
	inx
L0010:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+70,y
	clc
	ldy     _pad_index
	adc     _actors+14,y
	bcc     L0016
	inx
L0016:	jsr     tosicmp
	beq     L0005
	bpl     L000D
L0005:	ldx     #$00
	txa
	rts
L000D:	lda     #$01
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; char __near__ is_paddle_collision_skull (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_paddle_collision_skull: near

.segment	"CODE"

;
; return (actors.x[SKULL] + 7 > temp_x_col + actors.bbox_x[pad_index] &&
;
	ldx     #$00
	lda     _actors+5
	clc
	adc     #$07
	bcc     L0002
	inx
L0002:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+56,y
	clc
	adc     _temp_x_col
	bcc     L000F
	inx
L000F:	jsr     tosicmp
	jmi     L0004
	jeq     L0004
;
; actors.y[SKULL] + 7 > temp_y_col + actors.bbox_y[pad_index] &&
;
	ldx     #$00
	lda     _actors+19
	clc
	adc     #$07
	bcc     L0005
	inx
L0005:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+70,y
	clc
	adc     _temp_y_col
	bcc     L0010
	inx
L0010:	jsr     tosicmp
	bmi     L0004
	beq     L0004
;
; actors.x[SKULL] + 1 < temp_x_col + actors.width[pad_index] + actors.bbox_x[pad_index] &&
;
	ldx     #$00
	lda     _actors+5
	clc
	adc     #$01
	bcc     L0007
	inx
L0007:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+28,y
	clc
	adc     _temp_x_col
	bcc     L0011
	inx
L0011:	sta     ptr1
	stx     ptr1+1
	ldy     _pad_index
	lda     _actors+56,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0012
	inx
L0012:	jsr     tosicmp
	bpl     L0004
;
; actors.y[SKULL] + 1 < temp_y_col + actors.height[pad_index] + actors.bbox_y[pad_index]);
;
	ldx     #$00
	lda     _actors+19
	clc
	adc     #$01
	bcc     L000A
	inx
L000A:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+42,y
	clc
	adc     _temp_y_col
	bcc     L0013
	inx
L0013:	sta     ptr1
	stx     ptr1+1
	ldy     _pad_index
	lda     _actors+70,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0014
	inx
L0014:	jsr     tosicmp
	bmi     L000D
L0004:	ldx     #$00
	txa
	rts
L000D:	lda     #$01
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ create_item_at_skull_pos (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_create_item_at_skull_pos: near

.segment	"CODE"

;
; temp = get_inactive_actor_index();
;
	jsr     _get_inactive_actor_index
	sta     _temp
;
; if (temp) {
;
	lda     _temp
	beq     L0002
;
; actors.x[temp] = actors.x[SKULL];
;
	ldy     _temp
	lda     _actors+5
	sta     _actors,y
;
; actors.y[temp] = actors.y[SKULL];
;
	ldy     _temp
	lda     _actors+19
	sta     _actors+14,y
;
; actors.animation_delay[temp] = 8;
;
	ldy     _temp
	lda     #$08
	sta     _actors+238,y
;
; actors.width[temp] = NULL; // -> for example, serves as timer before bomb explodes!!!
;
	ldy     _temp
	lda     #$00
	sta     _actors+28,y
;
; actors.state[temp] = IDLE;
;
	ldy     _temp
	sta     _actors+266,y
;
; actors.type[temp] = items.type[current_item];
;
	lda     #<(_actors+280)
	ldx     #>(_actors+280)
	clc
	adc     _temp
	bcc     L0008
	inx
L0008:	sta     ptr1
	stx     ptr1+1
	ldy     _current_item
	lda     _items,y
	ldy     #$00
	sta     (ptr1),y
;
; return temp;
;
L0002:	ldx     #$00
	lda     _temp
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_enemy_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_enemy_collision: near

.segment	"CODE"

;
; for (i = 6; i < ACTOR_NUMBER; ++i) {
;
	lda     #$06
	sta     _i
L0050:	lda     _i
	cmp     #$0E
	bcc     L005B
;
; }
;
	rts
;
; if (actors.state[i] != INACTIVE) {
;
L005B:	ldy     _i
	lda     _actors+266,y
	cmp     #$80
	jeq     L005A
;
; pad_index = i;
;
	lda     _i
	sta     _pad_index
;
; if (is_skull_collision_paddle()) {
;
	jsr     _is_skull_collision_paddle
	tax
	jeq     L0008
;
; switch (actors.type[i]) {
;
	ldy     _i
	lda     _actors+280,y
;
; }
;
	cmp     #$01
	jeq     L001A
	cmp     #$02
	jeq     L0022
	cmp     #$03
	jeq     L0026
	cmp     #$04
	jeq     L002D
	cmp     #$05
	beq     L000C
	cmp     #$0B
	jeq     L0034
	cmp     #$21
	jeq     L0054
	cmp     #$22
	jeq     L0055
	jmp     L000B
;
; if (actors.state[i] == IDLE2) {
;
L000C:	ldy     _i
	lda     _actors+266,y
	cmp     #$02
	bne     L000D
;
; actors.counter[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _actors+224,y
;
; actors.state[i] = FLYING;
;
	ldy     _i
	sta     _actors+266,y
;
; actors.animation_delay[i] = 8;
;
	ldy     _i
	lda     #$08
	sta     _actors+238,y
;
; } else if (actors.state[i] == CHASING) {
;
	jmp     L000B
L000D:	ldy     _i
	lda     _actors+266,y
	cmp     #$04
	jne     L000B
;
; actors.xDir[i] = LEFT;
;
	ldy     _i
	lda     #$FF
	sta     _actors+84,y
;
; actors.yDir[i] = UP;
;
	ldy     _i
	sta     _actors+98,y
;
; actors.xSpeed[i] = 64;
;
	ldy     _i
	lda     #$40
	sta     _actors+112,y
;
; actors.ySpeed[i] = 4;
;
	ldy     _i
	lda     #$04
	sta     _actors+126,y
;
; actors.state[i] = KIDNAPPING;
;
	ldy     _i
	lda     #$06
	sta     _actors+266,y
;
; actors.state[SKULL] = INACTIVE;
;
	lda     #$80
	sta     _actors+271
;
; break;
;
	jmp     L000B
;
; actors.counter[i] = 0;
;
L001A:	ldy     _i
	lda     #$00
	sta     _actors+224,y
;
; actors.current_frame[i] = 0;
;
	ldy     _i
	sta     _actors+252,y
;
; actors.state[i] = DYING;
;
	ldy     _i
	lda     #$03
	sta     _actors+266,y
;
; actors.xDir[SKULL] = -actors.xDir[SKULL];
;
	lda     _actors+89
	eor     #$FF
	clc
	adc     #$01
	cmp     #$80
	sta     _actors+89
;
; actors.yDir[SKULL] = -actors.yDir[SKULL];
;
	lda     _actors+103
	eor     #$FF
	clc
	adc     #$01
	cmp     #$80
	sta     _actors+103
;
; break;
;
	jmp     L000B
;
; if (actors.state[i] == IDLE) {
;
L0022:	ldy     _i
	lda     _actors+266,y
	jne     L000B
;
; ++actors.state[i];
;
	lda     #<(_actors+266)
	ldx     #>(_actors+266)
	clc
	adc     _i
	bcc     L0025
	inx
L0025:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; break;
;
	jmp     L000B
;
; if (skull_was_beside()) {
;
L0026:	jsr     _skull_was_beside
	tax
	beq     L0051
;
; actors.xDir[SKULL] = -actors.xDir[SKULL];
;
	lda     _actors+89
	eor     #$FF
	clc
	adc     #$01
	cmp     #$80
	sta     _actors+89
;
; } else {
;
	jmp     L000B
;
; actors.yDir[SKULL] = -actors.yDir[SKULL];
;
L0051:	lda     _actors+103
	eor     #$FF
	clc
	adc     #$01
	cmp     #$80
	sta     _actors+103
;
; break;
;
	jmp     L000B
;
; if (actors.has_collision[i] == FALSE && actors.state[i] != IDLE2) {
;
L002D:	ldy     _i
	lda     _actors+294,y
	jne     L000B
	ldy     _i
	lda     _actors+266,y
	cmp     #$02
	jeq     L000B
;
; story_step = STORY_LEVEL_EVENT;
;
	lda     #$14
	sta     _story_step
;
; game_state = STORY;
;
	lda     #$03
	sta     _game_state
;
; break;
;
	jmp     L000B
;
; if (actors.state[SORCERER] == DEAD) {
;
L0034:	ldy     _SORCERER
	lda     _actors+266,y
	cmp     #$04
	jne     L000B
;
; actors.state[SORCERER] = APPEARING;
;
	ldy     _SORCERER
	lda     #$01
	sta     _actors+266,y
;
; if (actors.x[SORCERER] > actors.x[0]) {
;
	ldy     _SORCERER
	lda     _actors,y
	cmp     _actors
	bcc     L0038
	beq     L0038
;
; actors.xDir[SORCERER] = LEFT;
;
	ldy     _SORCERER
	lda     #$FF
	sta     _actors+84,y
;
; } else {
;
	jmp     L000B
;
; actors.xDir[SORCERER] = RIGHT;
;
L0038:	ldy     _SORCERER
	lda     #$01
	sta     _actors+84,y
;
; break;
;
	jmp     L000B
;
; if (current_level == LVL_FARM) {
;
L0054:	lda     _current_level
	cmp     #$07
	bne     L000B
;
; actors.state[CROW] = CHASING;
;
	ldy     _CROW
	lda     #$04
	sta     _actors+266,y
;
; actors.counter[CROW] = NULL;
;
	ldy     _CROW
	lda     #$00
	sta     _actors+224,y
;
; actors.animation_delay[CROW] = 8;
;
	ldy     _CROW
	lda     #$08
	sta     _actors+238,y
;
; level_condition1 = TRUE; // To activate grakk' second dialog
;
	lda     #$01
	sta     _level_condition1
;
; actors.state[TRIGGER] = INACTIVE;
;
	ldy     _TRIGGER
	lda     #$80
	sta     _actors+266,y
;
; break;
;
	jmp     L000B
;
; if ((pad1_new & PAD_B) && items.type[current_item] == TYPE_ITEM_SEED && items.is_active[current_item] == TRUE) {
;
L0055:	lda     _pad1_new
	and     #$40
	beq     L000B
	ldy     _current_item
	lda     _items,y
	cmp     #$1C
	bne     L000B
	ldy     _current_item
	lda     _items+6,y
	cmp     #$01
	bne     L000B
;
; SPECIAL_ITEM = create_item_at_skull_pos();                                            
;
	jsr     _create_item_at_skull_pos
	sta     _SPECIAL_ITEM
;
; actors.animation_delay[SPECIAL_ITEM] = 12;
;
	ldy     _SPECIAL_ITEM
	lda     #$0C
	sta     _actors+238,y
;
; items.is_active[current_item] = FALSE;
;
	ldy     _current_item
	lda     #$00
	sta     _items+6,y
;
; current_item = 0;
;
	sta     _current_item
;
; actors.has_collision[i] = TRUE;
;
L000B:	ldy     _i
	lda     #$01
;
; } else {
;
	jmp     L004F
;
; actors.has_collision[i] = FALSE;
;
L0008:	ldy     _i
L004F:	sta     _actors+294,y
;
; for (i = 6; i < ACTOR_NUMBER; ++i) {
;
L005A:	inc     _i
	jmp     L0050

.endproc

; ---------------------------------------------------------------
; void __near__ move_horizontal_paddle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_horizontal_paddle: near

.segment	"CODE"

;
; temp_x_col = actors.x[pad_index];
;
	ldy     _pad_index
	lda     _actors,y
	sta     _temp_x_col
;
; temp_y_col = actors.y[pad_index];
;
	ldy     _pad_index
	lda     _actors+14,y
	sta     _temp_y_col
;
; if (actors.xDir[pad_index] == LEFT) {
;
	lda     #<(_actors+84)
	ldx     #>(_actors+84)
	clc
	adc     _pad_index
	bcc     L0005
	inx
L0005:	ldy     #$00
	jsr     ldaidx
	cmp     #$FF
	bne     L0004
;
; --temp_x_col;
;
	dec     _temp_x_col
;
; if (get_collision_type()) {
;
	jsr     _get_collision_type
	tax
	beq     L000B
;
; ++temp_x_col;
;
	inc     _temp_x_col
;
; } else {
;
	jmp     L000D
;
; temp_x_col += actors.width[pad_index];
;
L0004:	ldy     _pad_index
	lda     _actors+28,y
	clc
	adc     _temp_x_col
	sta     _temp_x_col
;
; if (get_collision_type()) {
;
	jsr     _get_collision_type
	tax
	beq     L000B
;
; temp_x_col = actors.x[pad_index];
;
	ldy     _pad_index
	lda     _actors,y
;
; } else {
;
	jmp     L0018
;
; temp_x_col = actors.x[pad_index] + get_x_speed();
;
L000B:	ldy     _pad_index
	lda     _actors,y
	jsr     pusha0
	jsr     _get_x_speed
	jsr     tosaddax
L0018:	sta     _temp_x_col
;
; if (is_paddle_collision_skull()) {
;
L000D:	jsr     _is_paddle_collision_skull
	tax
	beq     L000F
;
; if (pad1 & 0b00000011 && skull_was_beside()) {
;
	lda     _pad1
	and     #$03
	beq     L0014
	jsr     _skull_was_beside
	tax
	beq     L0014
;
; actors.xVelocity[SKULL] = 70;
;
	lda     #$46
	sta     _actors+173
;
; } else {
;
	jmp     L0014
;
; actors.x[pad_index] = temp_x_col;
;
L000F:	ldy     _pad_index
	lda     _temp_x_col
	sta     _actors,y
;
; if (actors.xSpeed[pad_index]) {
;
L0014:	ldy     _pad_index
	lda     _actors+112,y
	beq     L0016
;
; subtract_x_speed(16);
;
	lda     #$10
	jmp     _subtract_x_speed
;
; }
;
L0016:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_vertical_paddle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_vertical_paddle: near

.segment	"CODE"

;
; temp_x_col = actors.x[pad_index];
;
	ldy     _pad_index
	lda     _actors,y
	sta     _temp_x_col
;
; temp_y_col = actors.y[pad_index];
;
	ldy     _pad_index
	lda     _actors+14,y
	sta     _temp_y_col
;
; if (actors.yDir[pad_index] == UP) {
;
	lda     #<(_actors+98)
	ldx     #>(_actors+98)
	clc
	adc     _pad_index
	bcc     L0005
	inx
L0005:	ldy     #$00
	jsr     ldaidx
	cmp     #$FF
	bne     L0004
;
; --temp_y_col;
;
	dec     _temp_y_col
;
; if (get_collision_type()) {
;
	jsr     _get_collision_type
	tax
	beq     L000B
;
; ++temp_y_col;
;
	inc     _temp_y_col
;
; } else {
;
	jmp     L000D
;
; temp_y_col += actors.height[pad_index];
;
L0004:	ldy     _pad_index
	lda     _actors+42,y
	clc
	adc     _temp_y_col
	sta     _temp_y_col
;
; if (get_collision_type()) {
;
	jsr     _get_collision_type
	tax
	beq     L000B
;
; temp_y_col = actors.y[pad_index];
;
	ldy     _pad_index
	lda     _actors+14,y
;
; } else {
;
	jmp     L0018
;
; temp_y_col = actors.y[pad_index] + get_y_speed();
;
L000B:	ldy     _pad_index
	lda     _actors+14,y
	jsr     pusha0
	jsr     _get_y_speed
	jsr     tosaddax
L0018:	sta     _temp_y_col
;
; if (is_paddle_collision_skull()) {
;
L000D:	jsr     _is_paddle_collision_skull
	tax
	beq     L000F
;
; if ((pad1 & 0b00001100) && skull_was_above()) {
;
	lda     _pad1
	and     #$0C
	beq     L0014
	jsr     _skull_was_above
	tax
	beq     L0014
;
; actors.yVelocity[SKULL] = 70;
;
	lda     #$46
	sta     _actors+187
;
; } else {
;
	jmp     L0014
;
; actors.y[pad_index] = temp_y_col;
;
L000F:	ldy     _pad_index
	lda     _temp_y_col
	sta     _actors+14,y
;
; if (actors.ySpeed[pad_index]) {
;
L0014:	ldy     _pad_index
	lda     _actors+126,y
	beq     L0016
;
; subtract_y_speed(16);
;
	lda     #$10
	jmp     _subtract_y_speed
;
; }
;
L0016:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_paddle_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_paddle_collision: near

.segment	"CODE"

;
; for (pad_index = 0; pad_index < paddle_count; ++pad_index) {
;
	lda     #$00
	sta     _pad_index
L003E:	lda     _pad_index
	cmp     _paddle_count
	bcc     L004B
;
; }
;
	rts
;
; if (is_skull_collision_paddle()) {
;
L004B:	jsr     _is_skull_collision_paddle
	tax
	jeq     L0044
;
; temp = actors.state[pad_index] == PAD_SHORT ? 0 : 4;
;
	ldy     _pad_index
	lda     _actors+266,y
	cmp     #$10
	bne     L003F
	lda     #$00
	jmp     L0040
L003F:	lda     #$04
L0040:	sta     _temp
;
; if (actors.type[pad_index] == TYPE_PAD_HORZ) {
;
	ldy     _pad_index
	lda     _actors+280,y
	jne     L0042
;
; if (temp_x <= actors.x[pad_index] + paddle_hit_zones[temp++]) {
;
	lda     _temp_x
	jsr     pusha0
	ldy     _pad_index
	lda     _actors,y
	sta     sreg
	lda     _temp
	inc     _temp
	sta     ptr1
	clc
	lda     #>(_paddle_hit_zones)
	sta     ptr1+1
	ldy     #<(_paddle_hit_zones)
	lda     (ptr1),y
	clc
	adc     sreg
	bcc     L002D
	inx
L002D:	jsr     tosicmp
	beq     L0037
	bpl     L000C
;
; actors.xDir[SKULL] = LEFT;
;
L0037:	lda     #$FF
	sta     _actors+89
;
; actors.xSpeed[SKULL] = 140;
;
	lda     #$8C
	sta     _actors+117
;
; actors.ySpeed[SKULL] = 60;
;
	lda     #$3C
;
; } else if (temp_x <= actors.x[pad_index] + paddle_hit_zones[temp++]) {
;
	jmp     L0035
L000C:	lda     _temp_x
	jsr     pusha0
	ldy     _pad_index
	lda     _actors,y
	sta     sreg
	lda     _temp
	inc     _temp
	sta     ptr1
	clc
	lda     #>(_paddle_hit_zones)
	sta     ptr1+1
	ldy     #<(_paddle_hit_zones)
	lda     (ptr1),y
	clc
	adc     sreg
	bcc     L002E
	inx
L002E:	jsr     tosicmp
	beq     L0038
	bpl     L000F
;
; actors.xDir[SKULL] = LEFT;
;
L0038:	lda     #$FF
;
; } else if (temp_x <= actors.x[pad_index] + paddle_hit_zones[temp++]){
;
	jmp     L0049
L000F:	lda     _temp_x
	jsr     pusha0
	ldy     _pad_index
	lda     _actors,y
	sta     sreg
	lda     _temp
	inc     _temp
	sta     ptr1
	clc
	lda     #>(_paddle_hit_zones)
	sta     ptr1+1
	ldy     #<(_paddle_hit_zones)
	lda     (ptr1),y
	clc
	adc     sreg
	bcc     L002F
	inx
L002F:	jsr     tosicmp
	beq     L0039
	bpl     L0012
;
; actors.xSpeed[SKULL] = 60;
;
L0039:	lda     #$3C
	sta     _actors+117
;
; actors.ySpeed[SKULL] = 140;
;
	lda     #$8C
;
; } else if (temp_x <= actors.x[pad_index] + paddle_hit_zones[temp++]) {
;
	jmp     L0035
L0012:	lda     _temp_x
	jsr     pusha0
	ldy     _pad_index
	lda     _actors,y
	sta     sreg
	lda     _temp
	inc     _temp
	sta     ptr1
	clc
	lda     #>(_paddle_hit_zones)
	sta     ptr1+1
	ldy     #<(_paddle_hit_zones)
	lda     (ptr1),y
	clc
	adc     sreg
	bcc     L0030
	inx
L0030:	jsr     tosicmp
	beq     L003A
	bpl     L0015
;
; actors.xDir[SKULL] = RIGHT;
;
L003A:	lda     #$01
	sta     _actors+89
;
; actors.xSpeed[SKULL] = 140;
;
	lda     #$8C
	sta     _actors+117
;
; actors.ySpeed[SKULL] = 60;
;
	lda     #$3C
;
; } else {
;
	jmp     L0035
;
; actors.xDir[SKULL] = RIGHT;
;
L0015:	lda     #$01
L0049:	sta     _actors+89
;
; actors.xSpeed[SKULL] = 100;
;
	lda     #$64
	sta     _actors+117
;
; actors.ySpeed[SKULL] = 100;
;
L0035:	sta     _actors+131
;
; actors.yDir[SKULL] = actors.y[SKULL] < actors.y[pad_index] ? UP : DOWN;
;
	lda     _actors+19
	ldy     _pad_index
	cmp     _actors+14,y
	bcs     L0041
	lda     #$FF
	jmp     L001A
L0041:	lda     #$01
L001A:	cmp     #$80
	sta     _actors+103
;
; } else {
;
	jmp     L0044
;
; if (temp_y <= actors.y[pad_index] + paddle_hit_zones[temp++]) {
;
L0042:	lda     _temp_y
	jsr     pusha0
	ldy     _pad_index
	lda     _actors+14,y
	sta     sreg
	lda     _temp
	inc     _temp
	sta     ptr1
	clc
	lda     #>(_paddle_hit_zones)
	sta     ptr1+1
	ldy     #<(_paddle_hit_zones)
	lda     (ptr1),y
	clc
	adc     sreg
	bcc     L0031
	inx
L0031:	jsr     tosicmp
	beq     L003B
	bpl     L001D
;
; actors.yDir[SKULL] = UP;
;
L003B:	lda     #$FF
	sta     _actors+103
;
; actors.xSpeed[SKULL] = 60;
;
	lda     #$3C
	sta     _actors+117
;
; actors.ySpeed[SKULL] = 140;
;
	lda     #$8C
;
; } else if (temp_y <= actors.y[pad_index] + paddle_hit_zones[temp++]) {
;
	jmp     L0036
L001D:	lda     _temp_y
	jsr     pusha0
	ldy     _pad_index
	lda     _actors+14,y
	sta     sreg
	lda     _temp
	inc     _temp
	sta     ptr1
	clc
	lda     #>(_paddle_hit_zones)
	sta     ptr1+1
	ldy     #<(_paddle_hit_zones)
	lda     (ptr1),y
	clc
	adc     sreg
	bcc     L0032
	inx
L0032:	jsr     tosicmp
	beq     L003C
	bpl     L0020
;
; actors.yDir[SKULL] = UP;
;
L003C:	lda     #$FF
;
; } else if (temp_y <= actors.y[pad_index] + paddle_hit_zones[temp++]) {
;
	jmp     L004A
L0020:	lda     _temp_y
	jsr     pusha0
	ldy     _pad_index
	lda     _actors+14,y
	sta     sreg
	lda     _temp
	inc     _temp
	sta     ptr1
	clc
	lda     #>(_paddle_hit_zones)
	sta     ptr1+1
	ldy     #<(_paddle_hit_zones)
	lda     (ptr1),y
	clc
	adc     sreg
	bcc     L0033
	inx
L0033:	jsr     tosicmp
	beq     L003D
	bpl     L0023
;
; actors.xSpeed[SKULL] = 140;
;
L003D:	lda     #$8C
	sta     _actors+117
;
; actors.ySpeed[SKULL] = 60;
;
	lda     #$3C
;
; } else if (temp_y >= actors.y[pad_index] + paddle_hit_zones[temp++]) {
;
	jmp     L0036
L0023:	lda     _temp_y
	jsr     pusha0
	ldy     _pad_index
	lda     _actors+14,y
	sta     sreg
	lda     _temp
	inc     _temp
	sta     ptr1
	clc
	lda     #>(_paddle_hit_zones)
	sta     ptr1+1
	ldy     #<(_paddle_hit_zones)
	lda     (ptr1),y
	clc
	adc     sreg
	bcc     L0034
	inx
L0034:	jsr     tosicmp
	bmi     L0026
;
; actors.yDir[SKULL] = DOWN;
;
	lda     #$01
	sta     _actors+103
;
; actors.xSpeed[SKULL] = 60;
;
	lda     #$3C
	sta     _actors+117
;
; actors.ySpeed[SKULL] = 140;
;
	lda     #$8C
;
; } else {
;
	jmp     L0036
;
; actors.yDir[SKULL] = DOWN;
;
L0026:	lda     #$01
L004A:	sta     _actors+103
;
; actors.xSpeed[SKULL] = 100;
;
	lda     #$64
	sta     _actors+117
;
; actors.ySpeed[SKULL] = 100;
;
L0036:	sta     _actors+131
;
; actors.xDir[SKULL] = actors.x[SKULL] < actors.x[pad_index] ? LEFT : RIGHT;
;
	lda     _actors+5
	ldy     _pad_index
	cmp     _actors,y
	bcs     L0043
	lda     #$FF
	jmp     L002B
L0043:	lda     #$01
L002B:	cmp     #$80
	sta     _actors+89
;
; for (pad_index = 0; pad_index < paddle_count; ++pad_index) {
;
L0044:	inc     _pad_index
	jmp     L003E

.endproc

; ---------------------------------------------------------------
; void __near__ check_main_input (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_main_input: near

.segment	"CODE"

;
; for (pad_index = 0; pad_index < paddle_count; ++pad_index) {
;
	lda     #$00
	sta     _pad_index
L0027:	lda     _pad_index
	cmp     _paddle_count
	jcs     L002C
;
; param1 = pad_index;
;
	sta     _param1
;
; if (actors.type[pad_index] == TYPE_PAD_HORZ) {
;
	ldy     _pad_index
	lda     _actors+280,y
	bne     L0006
;
; if (actors.counter[pad_index]) {
;
	ldy     _pad_index
	lda     _actors+224,y
	beq     L0028
;
; --actors.counter[pad_index];
;
	lda     #<(_actors+224)
	ldx     #>(_actors+224)
	clc
	adc     _pad_index
	bcc     L000A
	inx
L000A:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; } else {
;
	jmp     L000E
;
; if (pad1 & PAD_LEFT) {
;
L0028:	lda     _pad1
	and     #$02
	beq     L0029
;
; add_x_speed(80);
;
	lda     #$50
	jsr     _add_x_speed
;
; actors.xDir[pad_index] = LEFT;
;
	ldy     _pad_index
	lda     #$FF
	sta     _actors+84,y
;
; if (pad1 & PAD_RIGHT) {
;
L0029:	lda     _pad1
	and     #$01
	beq     L000E
;
; add_x_speed(80);
;
	lda     #$50
	jsr     _add_x_speed
;
; actors.xDir[pad_index] = RIGHT;
;
	ldy     _pad_index
	lda     #$01
	sta     _actors+84,y
;
; move_horizontal_paddle();
;
L000E:	jsr     _move_horizontal_paddle
;
; } else {
;
	jmp     L0004
;
; if (actors.counter[pad_index]) {
;
L0006:	ldy     _pad_index
	lda     _actors+224,y
	beq     L002A
;
; --actors.counter[pad_index];
;
	lda     #<(_actors+224)
	ldx     #>(_actors+224)
	clc
	adc     _pad_index
	bcc     L0013
	inx
L0013:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; } else {
;
	jmp     L0017
;
; if (pad1 & PAD_UP) {
;
L002A:	lda     _pad1
	and     #$08
	beq     L002B
;
; add_y_speed(80);
;
	lda     #$50
	jsr     _add_y_speed
;
; actors.yDir[pad_index] = UP;
;
	ldy     _pad_index
	lda     #$FF
	sta     _actors+98,y
;
; if (pad1 & PAD_DOWN) {
;
L002B:	lda     _pad1
	and     #$04
	beq     L0017
;
; add_y_speed(80);
;
	lda     #$50
	jsr     _add_y_speed
;
; actors.yDir[pad_index] = DOWN;
;
	ldy     _pad_index
	lda     #$01
	sta     _actors+98,y
;
; move_vertical_paddle();
;
L0017:	jsr     _move_vertical_paddle
;
; for (pad_index = 0; pad_index < paddle_count; ++pad_index) {
;
L0004:	inc     _pad_index
	jmp     L0027
;
; if (pad1_new & PAD_A) {
;
L002C:	lda     _pad1_new
	and     #$80
	beq     L002E
;
; if (skull_launched) {
;
	lda     _skull_launched
	beq     L002D
;
; actors.xVelocity[0] = PAD_VELOCITY;
;
	lda     #$50
	sta     _actors+168
;
; actors.xVelocity[1] = PAD_VELOCITY;
;
	sta     _actors+169
;
; actors.yVelocity[2] = PAD_VELOCITY;
;
	sta     _actors+184
;
; actors.yVelocity[3] = PAD_VELOCITY;
;
	sta     _actors+185
;
; } else {
;
	jmp     L002E
;
; skull_launched = TRUE;
;
L002D:	lda     #$01
	sta     _skull_launched
;
; actors.state[SKULL] = ROTATE_H;
;
	lda     #$02
	sta     _actors+271
;
; if (pad1_new & PAD_B) {
;
L002E:	lda     _pad1_new
	and     #$40
	beq     L0031
;
; switch (items.type[current_item]) {
;
	ldy     _current_item
	lda     _items,y
;
; }
;
	cmp     #$16
	beq     L002F
	cmp     #$17
	beq     L0024
	jmp     L0031
;
; actors.yDir[SKULL] = DOWN;
;
L002F:	lda     #$01
	sta     _actors+103
;
; actors.xDir[SKULL] = actors.x[SKULL] < actors.x[0] ? RIGHT : LEFT;
;
	lda     _actors+5
	cmp     _actors
	bcs     L0021
	lda     #$01
	jmp     L0030
L0021:	lda     #$FF
L0030:	cmp     #$80
	sta     _actors+89
;
; break;
;
	jmp     L0031
;
; create_item_at_skull_pos();
;
L0024:	jsr     _create_item_at_skull_pos
;
; if (pad1_new & PAD_SELECT) {
;
L0031:	lda     _pad1_new
	and     #$20
	beq     L0032
;
; game_state = INVENTORY;
;
	lda     #$01
	sta     _game_state
;
; if (pad1_new & PAD_START) {
;
L0032:	lda     _pad1_new
	and     #$10
	beq     L0026
;
; game_state = MAP;
;
	lda     #$02
	sta     _game_state
;
; }
;
L0026:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_skull (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_skull: near

.segment	"CODE"

;
; backup_col_type = NULL;
;
	ldx     #$00
	stx     _backup_col_type
;
; if (skull_launched) {
;
	lda     _skull_launched
	jeq     L0047
;
; param1 = SKULL;
;
	lda     #$05
	sta     _param1
;
; temp_x = actors.x[SKULL] + get_x_speed();
;
	lda     _actors+5
	jsr     pusha0
	jsr     _get_x_speed
	jsr     tosaddax
	sta     _temp_x
;
; temp_y = actors.y[SKULL] + get_y_speed();
;
	lda     _actors+19
	jsr     pusha0
	jsr     _get_y_speed
	jsr     tosaddax
	sta     _temp_y
;
; ++temp_x;
;
	inc     _temp_x
;
; ++temp_y;
;
	inc     _temp_y
;
; if (actors.xDir[SKULL] == RIGHT) {
;
	lda     _actors+89
	cmp     #$01
	jne     L0003
;
; if (actors.yDir[SKULL] == DOWN) {
;
	lda     _actors+103
	cmp     #$01
	jne     L0005
;
; temp_x_col = temp_x;
;
	lda     _temp_x
	sta     _temp_x_col
;
; temp_y_col = temp_y + actors.height[SKULL];
;
	lda     _temp_y
	clc
	adc     _actors+47
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L003C
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0008
;
; actors.yDir[SKULL] = UP;
;
	lda     #$FF
	sta     _actors+103
;
; temp_y -= temp_y % 8;
;
	lda     _temp_y
	and     #$07
	eor     #$FF
	sec
	adc     _temp_y
	sta     _temp_y
;
; do_skull_tile_collision();
;
L0008:	jsr     _do_skull_tile_collision
;
; temp_x_col += actors.width[SKULL];
;
L003C:	lda     _actors+33
	clc
	adc     _temp_x_col
	sta     _temp_x_col
;
; temp_y_col = temp_y;
;
	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L003D
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0031
;
; actors.xDir[SKULL] = LEFT;
;
	lda     #$FF
	sta     _actors+89
;
; temp_x -= temp_x % 8;
;
	lda     _temp_x
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0031
;
; temp_y_col += actors.height[SKULL];
;
L003D:	lda     _actors+47
	clc
	adc     _temp_y_col
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	jeq     L002E
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0031
;
; temp = temp_y_col - (temp_y_col % 8);
;
	lda     _temp_y_col
	jsr     pusha0
	lda     _temp_y_col
	and     #$07
	jsr     tossuba0
	sta     _temp
;
; temp2 = actors.y[SKULL] + 7;
;
	lda     _actors+19
	clc
	adc     #$07
	sta     _temp2
;
; temp2 -= temp2 % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp2
	sta     _temp2
;
; if (temp == temp2) {
;
	lda     _temp
	cmp     _temp2
	bne     L000F
;
; actors.xDir[SKULL] = LEFT;
;
	lda     #$FF
	sta     _actors+89
;
; temp_x = actors.x[SKULL];
;
	lda     _actors+5
	sta     _temp_x
;
; } else {
;
	jmp     L0031
;
; actors.yDir[SKULL] = UP;
;
L000F:	lda     #$FF
;
; } else {
;
	jmp     L004B
;
; temp_x_col = temp_x;
;
L0005:	lda     _temp_x
	sta     _temp_x_col
;
; temp_y_col = temp_y;
;
	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L003E
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0013
;
; actors.yDir[SKULL] = DOWN;
;
	lda     #$01
	sta     _actors+103
;
; temp_y += 8;
;
	lda     #$08
	clc
	adc     _temp_y
	sta     _temp_y
;
; temp_y -= temp_y % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_y
	sta     _temp_y
;
; do_skull_tile_collision();
;
L0013:	jsr     _do_skull_tile_collision
;
; temp_x_col = temp_x + actors.width[SKULL];
;
L003E:	lda     _temp_x
	clc
	adc     _actors+33
	sta     _temp_x_col
;
; temp_y_col = temp_y + actors.height[SKULL];
;
	lda     _temp_y
	clc
	adc     _actors+47
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L003F
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0031
;
; actors.xDir[SKULL] = LEFT;
;
	lda     #$FF
	sta     _actors+89
;
; temp_x -= temp_x % 8;
;
	lda     _temp_x
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0031
;
; temp_y_col = temp_y;
;
L003F:	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	jeq     L002E
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0031
;
; temp = temp_y_col - (temp_y_col % 8);
;
	lda     _temp_y_col
	jsr     pusha0
	lda     _temp_y_col
	and     #$07
	jsr     tossuba0
	sta     _temp
;
; temp2 = actors.y[SKULL];
;
	lda     _actors+19
	sta     _temp2
;
; ++temp2;  // BBox
;
	inc     _temp2
;
; temp2 -= temp2 % 8;
;
	lda     _temp2
	and     #$07
	eor     #$FF
	sec
	adc     _temp2
	sta     _temp2
;
; if (temp == temp2) {
;
	lda     _temp
	cmp     _temp2
	jne     L0045
;
; actors.xDir[SKULL] = LEFT;
;
	lda     #$FF
	sta     _actors+89
;
; temp_x = actors.x[SKULL];
;
	lda     _actors+5
	sta     _temp_x
;
; } else {
;
	jmp     L0031
;
; if (actors.yDir[SKULL] == DOWN) {
;
L0003:	lda     _actors+103
	cmp     #$01
	jne     L001C
;
; temp_x_col = temp_x + actors.width[SKULL];
;
	lda     _temp_x
	clc
	adc     _actors+33
	sta     _temp_x_col
;
; temp_y_col = temp_y + actors.height[SKULL];
;
	lda     _temp_y
	clc
	adc     _actors+47
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L0041
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L001F
;
; actors.yDir[SKULL] = UP;
;
	lda     #$FF
	sta     _actors+103
;
; temp_y -= temp_y % 8;
;
	lda     _temp_y
	and     #$07
	eor     #$FF
	sec
	adc     _temp_y
	sta     _temp_y
;
; do_skull_tile_collision();
;
L001F:	jsr     _do_skull_tile_collision
;
; temp_x_col = temp_x;
;
L0041:	lda     _temp_x
	sta     _temp_x_col
;
; temp_y_col = temp_y;
;
	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L0042
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0031
;
; actors.xDir[SKULL] = RIGHT;
;
	lda     #$01
	sta     _actors+89
;
; temp_x += 8;
;
	lda     #$08
	clc
	adc     _temp_x
	sta     _temp_x
;
; temp_x -= temp_x % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0031
;
; temp_x_col = temp_x;
;
L0042:	lda     _temp_x
	sta     _temp_x_col
;
; temp_y_col += actors.height[SKULL];
;
	lda     _actors+47
	clc
	adc     _temp_y_col
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	jeq     L002E
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0031
;
; temp = temp_y_col - (temp_y_col % 8);
;
	lda     _temp_y_col
	jsr     pusha0
	lda     _temp_y_col
	and     #$07
	jsr     tossuba0
	sta     _temp
;
; temp2 = actors.y[SKULL] + 7;
;
	lda     _actors+19
	clc
	adc     #$07
	sta     _temp2
;
; temp2 -= temp2 % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp2
	sta     _temp2
;
; if (temp == temp2) {
;
	lda     _temp
	cmp     _temp2
	bne     L0026
;
; actors.xDir[SKULL] = RIGHT;
;
	lda     #$01
	sta     _actors+89
;
; temp_x = actors.x[SKULL];
;
	lda     _actors+5
	sta     _temp_x
;
; } else {
;
	jmp     L0031
;
; actors.yDir[SKULL] = UP;
;
L0026:	lda     #$FF
;
; } else {
;
	jmp     L004B
;
; temp_x_col = temp_x + actors.width[SKULL];
;
L001C:	lda     _temp_x
	clc
	adc     _actors+33
	sta     _temp_x_col
;
; temp_y_col = temp_y;
;
	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L0043
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L002A
;
; actors.yDir[SKULL] = DOWN;
;
	lda     #$01
	sta     _actors+103
;
; temp_y += 8;
;
	lda     #$08
	clc
	adc     _temp_y
	sta     _temp_y
;
; temp_y -= temp_y % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_y
	sta     _temp_y
;
; do_skull_tile_collision();
;
L002A:	jsr     _do_skull_tile_collision
;
; temp_x_col = temp_x;
;
L0043:	lda     _temp_x
	sta     _temp_x_col
;
; temp_y_col = temp_y + actors.height[SKULL];
;
	lda     _temp_y
	clc
	adc     _actors+47
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L0044
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0031
;
; actors.xDir[SKULL] = RIGHT;
;
	lda     #$01
	sta     _actors+89
;
; temp_x += 8;
;
	lda     #$08
	clc
	adc     _temp_x
	sta     _temp_x
;
; temp_x -= temp_x % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0031
;
; temp_y_col = temp_y;
;
L0044:	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L002E
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0031
;
; temp = temp_y_col - (temp_y_col % 8);
;
	lda     _temp_y_col
	jsr     pusha0
	lda     _temp_y_col
	and     #$07
	jsr     tossuba0
	sta     _temp
;
; temp2 = actors.y[SKULL];
;
	lda     _actors+19
	sta     _temp2
;
; ++temp2;  // BBox
;
	inc     _temp2
;
; temp2 -= temp2 % 8;
;
	lda     _temp2
	and     #$07
	eor     #$FF
	sec
	adc     _temp2
	sta     _temp2
;
; if (temp == temp2) {
;
	lda     _temp
	cmp     _temp2
	bne     L0045
;
; actors.xDir[SKULL] = RIGHT;
;
	lda     #$01
	sta     _actors+89
;
; temp_x = actors.x[SKULL];
;
	lda     _actors+5
	sta     _temp_x
;
; } else {
;
	jmp     L0031
;
; actors.yDir[SKULL] = DOWN;
;
L0045:	lda     #$01
L004B:	sta     _actors+103
;
; temp_y = actors.y[SKULL];
;
	lda     _actors+19
	sta     _temp_y
;
; do_skull_tile_collision();
;
L0031:	jsr     _do_skull_tile_collision
;
; check_paddle_collision();
;
L002E:	jsr     _check_paddle_collision
;
; check_enemy_collision();
;
	jsr     _check_enemy_collision
;
; --temp_x;
;
	dec     _temp_x
;
; --temp_y;
;
	dec     _temp_y
;
; } else {
;
	jmp     L0048
;
; temp_x = actors.x[PADDLE] + (actors.width[PADDLE] >> 1) - (actors.width[SKULL] >> 1);
;
L0047:	lda     _actors+28
	lsr     a
	clc
	adc     _actors
	bcc     L003B
	inx
L003B:	jsr     pushax
	lda     _actors+33
	lsr     a
	jsr     tossuba0
	sta     _temp_x
;
; temp_y = actors.y[PADDLE] + actors.bbox_y[PADDLE] - actors.height[SKULL] - actors.bbox_x[SKULL];
;
	lda     _actors+14
	clc
	adc     _actors+70
	sec
	sbc     _actors+47
	sec
	sbc     _actors+61
	sta     _temp_y
;
; actors.x[SKULL] = temp_x;
;
L0048:	lda     _temp_x
	sta     _actors+5
;
; actors.y[SKULL] = temp_y;
;
	lda     _temp_y
	sta     _actors+19
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_paddles (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_paddles: near

.segment	"CODE"

;
; for (i = 0; i < paddle_count; ++i) {
;
	lda     #$00
	sta     _i
L0018:	lda     _i
	cmp     _paddle_count
	bcc     L0019
;
; }
;
	rts
;
; if (actors.type[i] == TYPE_PAD_HORZ) {
;
L0019:	ldy     _i
	lda     _actors+280,y
	bne     L0006
;
; if (actors.state[i] == PAD_SHORT) {
;
	ldy     _i
	lda     _actors+266,y
	cmp     #$10
	bne     L0008
;
; oam_meta_spr(actors.x[i], actors.y[i], HorizontalPaddleSpr_short);
;
	jsr     decsp2
	ldy     _i
	lda     _actors,y
	ldy     #$01
	sta     (sp),y
	ldy     _i
	lda     _actors+14,y
	ldy     #$00
	sta     (sp),y
	lda     #<(_HorizontalPaddleSpr_short)
	ldx     #>(_HorizontalPaddleSpr_short)
;
; } else {
;
	jmp     L0017
;
; oam_meta_spr(actors.x[i], actors.y[i], HorizontalPaddleSpr);
;
L0008:	jsr     decsp2
	ldy     _i
	lda     _actors,y
	ldy     #$01
	sta     (sp),y
	ldy     _i
	lda     _actors+14,y
	ldy     #$00
	sta     (sp),y
	lda     #<(_HorizontalPaddleSpr)
	ldx     #>(_HorizontalPaddleSpr)
;
; } else {
;
	jmp     L0017
;
; if (actors.state[i] == PAD_SHORT) {
;
L0006:	ldy     _i
	lda     _actors+266,y
	cmp     #$10
	bne     L0010
;
; oam_meta_spr(actors.x[i], actors.y[i], VerticalPaddleSpr_short);
;
	jsr     decsp2
	ldy     _i
	lda     _actors,y
	ldy     #$01
	sta     (sp),y
	ldy     _i
	lda     _actors+14,y
	ldy     #$00
	sta     (sp),y
	lda     #<(_VerticalPaddleSpr_short)
	ldx     #>(_VerticalPaddleSpr_short)
;
; } else {
;
	jmp     L0017
;
; oam_meta_spr(actors.x[i], actors.y[i], VerticalPaddleSpr);
;
L0010:	jsr     decsp2
	ldy     _i
	lda     _actors,y
	ldy     #$01
	sta     (sp),y
	ldy     _i
	lda     _actors+14,y
	ldy     #$00
	sta     (sp),y
	lda     #<(_VerticalPaddleSpr)
	ldx     #>(_VerticalPaddleSpr)
L0017:	jsr     _oam_meta_spr
;
; for (i = 0; i < paddle_count; ++i) {
;
	inc     _i
	jmp     L0018

.endproc

; ---------------------------------------------------------------
; void __near__ move_skull_map (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_skull_map: near

.segment	"CODE"

;
; if (param1 > param3) {
;
	lda     _param1
	cmp     _param3
	bcc     L0008
	beq     L0008
;
; temp_x = param1 - param3;
;
	sec
	sbc     _param3
;
; } else {
;
	jmp     L000C
;
; temp_x = param3 - param1;
;
L0008:	lda     _param3
	sec
	sbc     _param1
L000C:	sta     _temp_x
;
; if (param2 > param4) {
;
	lda     _param2
	cmp     _param4
	bcc     L0009
	beq     L0009
;
; temp_y = param2 - param4;
;
	sec
	sbc     _param4
;
; } else {
;
	jmp     L000D
;
; temp_y = param4 - param2;
;
L0009:	lda     _param4
	sec
	sbc     _param2
L000D:	sta     _temp_y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fadeout (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fadeout: near

.segment	"CODE"

;
; if (story_counter % FADE_SPEED == 0) {
;
	lda     _story_counter
	jsr     pusha0
	lda     #$18
	jsr     tosumoda0
	cpx     #$00
	bne     L0002
	cmp     #$00
	bne     L0002
;
; --brightness;
;
	dec     _brightness
;
; pal_bright(brightness);
;
	lda     _brightness
	jsr     _pal_bright
;
; if (brightness == 0) {
;
L0002:	lda     _brightness
	bne     L0004
;
; ++story_step;
;
	inc     _story_step
;
; story_counter = 0;
;
	sta     _story_counter
;
; }
;
L0004:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fadein (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fadein: near

.segment	"CODE"

;
; if (story_counter % FADE_SPEED == 0) {
;
	lda     _story_counter
	jsr     pusha0
	lda     #$18
	jsr     tosumoda0
	cpx     #$00
	bne     L0002
	cmp     #$00
	bne     L0002
;
; ++brightness;
;
	inc     _brightness
;
; pal_bright(brightness);
;
	lda     _brightness
	jsr     _pal_bright
;
; if (brightness == 4) {
;
L0002:	lda     _brightness
	cmp     #$04
	bne     L0004
;
; ++story_step;
;
	inc     _story_step
;
; story_counter = 0;
;
	lda     #$00
	sta     _story_counter
;
; }
;
L0004:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ brightout (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_brightout: near

.segment	"CODE"

;
; if (story_counter % FADE_SPEED == 0) {
;
	lda     _story_counter
	jsr     pusha0
	lda     #$18
	jsr     tosumoda0
	cpx     #$00
	bne     L0002
	cmp     #$00
	bne     L0002
;
; ++brightness;
;
	inc     _brightness
;
; pal_bright(brightness);
;
	lda     _brightness
	jsr     _pal_bright
;
; if (brightness == 8) {
;
L0002:	lda     _brightness
	cmp     #$08
	bne     L0004
;
; ++story_step;
;
	inc     _story_step
;
; story_counter = 0;
;
	lda     #$00
	sta     _story_counter
;
; brightness = 4;
;
	lda     #$04
	sta     _brightness
;
; }
;
L0004:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ wait_input (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_wait_input: near

.segment	"CODE"

;
; if (wait_timer > 64) {
;
	lda     _wait_timer
	cmp     #$41
	bcc     L0006
;
; one_vram_buffer(0x00, NTADR_A(30, 3));
;
	lda     #$00
;
; } else {
;
	jmp     L000A
;
; one_vram_buffer(0x29, NTADR_A(30, 3));
;
L0006:	lda     #$29
L000A:	jsr     pusha
	ldx     #$20
	lda     #$7E
	jsr     _one_vram_buffer
;
; if (pad1_new & PAD_A) {
;
	lda     _pad1_new
	and     #$80
	beq     L0007
;
; ++story_step;
;
	inc     _story_step
;
; story_counter = 0;
;
	lda     #$00
	sta     _story_counter
;
; wait_timer = 0;
;
	sta     _wait_timer
;
; multi_vram_buffer_horz(empty_line, sizeof(empty_line), NTADR_A(7, 1));
;
	jsr     decsp3
	lda     #<(_empty_line)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_line)
	sta     (sp),y
	lda     #$18
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$27
	jsr     _multi_vram_buffer_horz
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; multi_vram_buffer_horz(empty_line, sizeof(empty_line), NTADR_A(7, 2));
;
	jsr     decsp3
	lda     #<(_empty_line)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_line)
	sta     (sp),y
	lda     #$18
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$47
	jsr     _multi_vram_buffer_horz
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; multi_vram_buffer_horz(empty_line, sizeof(empty_line), NTADR_A(7, 3));
;
	jsr     decsp3
	lda     #<(_empty_line)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_empty_line)
	sta     (sp),y
	lda     #$18
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$67
	jsr     _multi_vram_buffer_horz
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; ++wait_timer;
;
L0007:	inc     _wait_timer
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ wait (unsigned char delay)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_wait: near

.segment	"CODE"

;
; void wait(unsigned char delay) {
;
	jsr     pusha
;
; if (story_counter > delay) {
;
	lda     _story_counter
	ldy     #$00
	cmp     (sp),y
	bcc     L0002
	beq     L0002
;
; ++story_step;
;
	inc     _story_step
;
; story_counter = 0;
;
	sty     _story_counter
;
; }
;
L0002:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ play_normal_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_play_normal_level: near

.segment	"CODE"

;
; switch (story_step) {
;
	lda     _story_step
;
; }
;
	beq     L0004
	cmp     #$01
	beq     L0009
	cmp     #$96
	beq     L000A
	cmp     #$97
	beq     L0007
	cmp     #$98
	beq     L000B
	rts
;
; fadein();
;
L0004:	jmp     _fadein
;
; game_state = MAIN;
;
L0009:	lda     #$00
	sta     _game_state
;
; show_HUD();
;
	jmp     _show_HUD
;
; wait(64);
;
L000A:	lda     #$40
	jmp     _wait
;
; fadeout();
;
L0007:	jmp     _fadeout
;
; ++current_level;
;
L000B:	inc     _current_level
;
; load_level();
;
	jsr     _load_level
;
; story_step = STORY_LEVEL_START;
;
	lda     #$00
	sta     _story_step
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ play_story (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_play_story: near

.segment	"CODE"

;
; switch (current_level) {
;
	lda     _current_level
;
; }
;
	beq     L0004
	cmp     #$01
	jeq     L0089
	cmp     #$02
	jeq     L0052
	cmp     #$03
	jeq     L0053
	cmp     #$04
	jeq     L0054
	cmp     #$05
	jeq     L0055
	cmp     #$06
	jeq     L0056
	cmp     #$07
	jeq     L0057
	cmp     #$F0
	jeq     L0070
	cmp     #$FA
	jeq     L0093
	jmp     L0098
;
; animate_actors();
;
L0004:	jsr     _animate_actors
;
; switch (story_step) {
;
	lda     _story_step
;
; }
;
	beq     L007F
	cmp     #$01
	jeq     L0080
	cmp     #$02
	jeq     L0082
	cmp     #$03
	jeq     L0016
	cmp     #$04
	jeq     L0019
	cmp     #$05
	jeq     L0083
	cmp     #$06
	jeq     L001B
	cmp     #$07
	jeq     L0084
	cmp     #$08
	jeq     L0085
	cmp     #$09
	jeq     L0086
	cmp     #$0A
	jeq     L0087
	cmp     #$0B
	jeq     L0022
	cmp     #$0C
	jeq     L0088
	jmp     L0098
;
; if (story_counter == 128) {
;
L007F:	lda     _story_counter
	cmp     #$80
	jne     L0098
;
; ++actors.state[NECROMANCER];
;
	lda     #<(_actors+266)
	ldx     #>(_actors+266)
	clc
	adc     _NECROMANCER
	bcc     L0009
	inx
L0009:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; actors.current_frame[NECROMANCER] = 0;
;
	ldy     _NECROMANCER
	lda     #$00
	sta     _actors+252,y
;
; story_counter = 0;
;
	sta     _story_counter
;
; brightness = 4;
;
	lda     #$04
	sta     _brightness
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; if (story_counter == 64) {
;
L0080:	lda     _story_counter
	cmp     #$40
	bne     L0081
;
; ++actors.state[NECROMANCER];
;
	lda     #<(_actors+266)
	ldx     #>(_actors+266)
	clc
	adc     _NECROMANCER
	bcc     L000D
	inx
L000D:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (story_counter > 68) {
;
L0081:	lda     _story_counter
	cmp     #$45
	jcc     L0098
;
; pal_bright(6);
;
	lda     #$06
	jsr     _pal_bright
;
; pal_spr(pal_altar_lightning);
;
	lda     #<(_pal_altar_lightning)
	ldx     #>(_pal_altar_lightning)
	jsr     _pal_spr
;
; ++actors.state[LIGHTNING];
;
	lda     #<(_actors+266)
	ldx     #>(_actors+266)
	clc
	adc     _LIGHTNING
	bcc     L000F
	inx
L000F:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; story_counter = 0;
;
	sty     _story_counter
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; if (story_counter > 2) {
;
L0082:	lda     _story_counter
	cmp     #$03
	bcc     L0011
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; if (actors.state[LIGHTNING] == WALKING) {
;
L0011:	ldy     _LIGHTNING
	lda     _actors+266,y
	cmp     #$02
	bne     L0012
;
; pal_spr(pal_altar_spr);
;
	lda     #<(_pal_altar_spr)
	ldx     #>(_pal_altar_spr)
	jsr     _pal_spr
;
; ++story_step;
;
	inc     _story_step
;
; story_counter = 0;
;
	lda     #$00
	sta     _story_counter
;
; if (actors.current_frame[LIGHTNING] == 8) {
;
L0012:	ldy     _LIGHTNING
	lda     _actors+252,y
	cmp     #$08
	jne     L0098
;
; pal_bright(6);
;
	lda     #$06
	jsr     _pal_bright
;
; actors.state[SKULL] = ROTATE_H;
;
	lda     #$02
	sta     _actors+271
;
; break;
;
	jmp     L0098
;
; actors.state[HERO] = 1;
;
L0016:	ldy     _HERO
	lda     #$01
	sta     _actors+266,y
;
; if (story_counter > 180) {
;
	lda     _story_counter
	cmp     #$B5
	jcc     L0098
;
; ++story_step;
;
	inc     _story_step
;
; story_counter = 0;
;
	lda     #$00
	sta     _story_counter
;
; break;
;
	jmp     L0098
;
; fadeout();
;
L0019:	jsr     _fadeout
;
; break;
;
	jmp     L0098
;
; banked_call(1, reset_actors);
;
L0083:	lda     #$01
	jsr     pusha
	lda     #<(_reset_actors)
	ldx     #>(_reset_actors)
	jsr     _banked_call
;
; banked_call(0, init_skull);
;
	lda     #$00
	jsr     pusha
	lda     #<(_init_skull)
	ldx     #>(_init_skull)
	jsr     _banked_call
;
; banked_call(1, load_map);
;
	lda     #$01
	jsr     pusha
	lda     #<(_load_map)
	ldx     #>(_load_map)
	jsr     _banked_call
;
; actors.x[SKULL] = 128;
;
	lda     #$80
	sta     _actors+5
;
; actors.y[SKULL] = 56;
;
	lda     #$38
	sta     _actors+19
;
; actors.state[SKULL] = ROTATE_H;
;
	lda     #$02
	sta     _actors+271
;
; ++story_step;
;
	inc     _story_step
;
; fadein();
;
L001B:	jsr     _fadein
;
; break;
;
	jmp     L0098
;
; story_counter = 56;  // Skull y position
;
L0084:	lda     #$38
	sta     _story_counter
;
; ++story_step;
;
	inc     _story_step
;
; actors.y[SKULL] = story_counter;
;
L0085:	lda     _story_counter
	sta     _actors+19
;
; if (story_counter > 156) {
;
	lda     _story_counter
	cmp     #$9D
	jcc     L0098
;
; ++story_step;
;
	inc     _story_step
;
; story_counter = 128;
;
	lda     #$80
	sta     _story_counter
;
; break;
;
	jmp     L0098
;
; actors.x[SKULL] = story_counter;
;
L0086:	lda     _story_counter
	sta     _actors+5
;
; if (story_counter > 156) {
;
	lda     _story_counter
	cmp     #$9D
	jcc     L0098
;
; ++story_step;
;
	inc     _story_step
;
; story_counter = 0;
;
	lda     #$00
	sta     _story_counter
;
; brightness = 4;
;
	lda     #$04
	sta     _brightness
;
; break;
;
	jmp     L0098
;
; wait(24);
;
L0087:	lda     #$18
	jsr     _wait
;
; break;
;
	jmp     L0098
;
; fadeout();
;
L0022:	jsr     _fadeout
;
; break;
;
	jmp     L0098
;
; banked_call(1, hide_map);
;
L0088:	lda     #$01
	jsr     pusha
	lda     #<(_hide_map)
	ldx     #>(_hide_map)
	jsr     _banked_call
;
; actors.state[SKULL] = INACTIVE;
;
	lda     #$80
	sta     _actors+271
;
; banked_call(1, reset_actors);
;
	lda     #$01
	jsr     pusha
	lda     #<(_reset_actors)
	ldx     #>(_reset_actors)
	jsr     _banked_call
;
; set_chr_mode_1(0x06);  // Angelic sprite
;
	lda     #$06
	jsr     _set_chr_mode_1
;
; current_level = LVL_CEMETERY;
;
	lda     #$01
	sta     _current_level
;
; story_step = NULL;
;
	lda     #$00
	sta     _story_step
;
; show_face = FALSE;
;
	sta     _show_face
;
; show_item = FALSE;
;
	sta     _show_item
;
; break;
;
	jmp     L0098
;
; if (story_step > 6) {
;
L0089:	lda     _story_step
	cmp     #$07
	bcc     L0025
;
; draw_paddles();
;
	jsr     _draw_paddles
;
; animate_actors();
;
	jsr     _animate_actors
;
; if (show_face) {
;
L0025:	lda     _show_face
	beq     L0026
;
; oam_meta_spr(FACE_X, FACE_Y, angelic_face);
;
	jsr     decsp2
	lda     #$20
	ldy     #$01
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #<(_angelic_face)
	ldx     #>(_angelic_face)
	jsr     _oam_meta_spr
;
; if (show_item) {
;
L0026:	lda     _show_item
	beq     L0027
;
; oam_spr(123, 130, ITEM_INDEX_MAGNET, 0);
;
	jsr     decsp3
	lda     #$7B
	ldy     #$02
	sta     (sp),y
	lda     #$82
	dey
	sta     (sp),y
	lda     #$09
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; switch (story_step) {
;
L0027:	lda     _story_step
;
; }
;
	jeq     L002A
	cmp     #$01
	jeq     L008A
	cmp     #$02
	jeq     L002C
	cmp     #$03
	jeq     L008B
	cmp     #$04
	jeq     L002E
	cmp     #$05
	jeq     L008C
	cmp     #$06
	jeq     L008D
	cmp     #$07
	jeq     L0031
	cmp     #$08
	jeq     L008E
	cmp     #$09
	jeq     L0033
	cmp     #$0A
	jeq     L0034
	cmp     #$0B
	jeq     L0035
	cmp     #$0C
	jeq     L0036
	cmp     #$0D
	jeq     L0037
	cmp     #$0E
	jeq     L0038
	cmp     #$0F
	jeq     L0039
	cmp     #$10
	jeq     L003D
	cmp     #$11
	jeq     L003E
	cmp     #$12
	jeq     L003F
	cmp     #$13
	jeq     L0040
	cmp     #$14
	jeq     L0041
	cmp     #$15
	jeq     L0042
	cmp     #$16
	jeq     L0043
	cmp     #$17
	jeq     L008F
	cmp     #$18
	jeq     L004B
	cmp     #$19
	jeq     L0090
	cmp     #$1A
	jeq     L0050
	cmp     #$1B
	jeq     L0091
	jmp     L0098
;
; load_black_level();
;
L002A:	jsr     _load_black_level
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; wait(128);
;
L008A:	lda     #$80
	jsr     _wait
;
; break;
;
	jmp     L0098
;
; multi_vram_buffer_horz(dial0001, sizeof(dial0001), NTADR_A(6, 15));
;
L002C:	jsr     decsp3
	lda     #<(_dial0001)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0001)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$E6
	jsr     _multi_vram_buffer_horz
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; wait(72);
;
L008B:	lda     #$48
	jsr     _wait
;
; break;
;
	jmp     L0098
;
; multi_vram_buffer_horz(dial0002, sizeof(dial0002), NTADR_A(15, 15));
;
L002E:	jsr     decsp3
	lda     #<(_dial0002)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0002)
	sta     (sp),y
	lda     #$0C
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$EF
	jsr     _multi_vram_buffer_horz
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; wait(128);
;
L008C:	lda     #$80
	jsr     _wait
;
; break;
;
	jmp     L0098
;
; pal_bright(0);
;
L008D:	lda     #$00
	jsr     _pal_bright
;
; brightness = 0;
;
	lda     #$00
	sta     _brightness
;
; show_face = TRUE;
;
	lda     #$01
	sta     _show_face
;
; load_level();
;
	jsr     _load_level
;
; actors.state[SKULL] = ROTATE_H;
;
	lda     #$02
	sta     _actors+271
;
; actors.x[SKULL] = 0x7C;
;
	lda     #$7C
	sta     _actors+5
;
; actors.y[SKULL] = 0xCA;
;
	lda     #$CA
	sta     _actors+19
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; fadein();
;
L0031:	jsr     _fadein
;
; break;
;
	jmp     L0098
;
; wait(128);
;
L008E:	lda     #$80
	jsr     _wait
;
; break;
;
	jmp     L0098
;
; multi_vram_buffer_horz(dial0003, sizeof(dial0003), NTADR_A(7, 1));
;
L0033:	jsr     decsp3
	lda     #<(_dial0003)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0003)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$27
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(dial0004, sizeof(dial0004), NTADR_A(7, 2));
;
	jsr     decsp3
	lda     #<(_dial0004)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0004)
	sta     (sp),y
	lda     #$17
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$47
	jsr     _multi_vram_buffer_horz
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; wait_input();
;
L0034:	jsr     _wait_input
;
; break;
;
	jmp     L0098
;
; multi_vram_buffer_horz(dial0005, sizeof(dial0005), NTADR_A(7, 1));
;
L0035:	jsr     decsp3
	lda     #<(_dial0005)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0005)
	sta     (sp),y
	lda     #$17
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$27
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(dial0006, sizeof(dial0006), NTADR_A(7, 2));
;
	jsr     decsp3
	lda     #<(_dial0006)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0006)
	sta     (sp),y
	lda     #$17
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$47
	jsr     _multi_vram_buffer_horz
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; wait_input();
;
L0036:	jsr     _wait_input
;
; break;
;
	jmp     L0098
;
; multi_vram_buffer_horz(dial0007, sizeof(dial0007), NTADR_A(7, 1));
;
L0037:	jsr     decsp3
	lda     #<(_dial0007)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0007)
	sta     (sp),y
	lda     #$14
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$27
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(dial0008, sizeof(dial0008), NTADR_A(7, 2));
;
	jsr     decsp3
	lda     #<(_dial0008)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0008)
	sta     (sp),y
	lda     #$17
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$47
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(dial0009, sizeof(dial0009), NTADR_A(7, 3));
;
	jsr     decsp3
	lda     #<(_dial0009)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0009)
	sta     (sp),y
	lda     #$14
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$67
	jsr     _multi_vram_buffer_horz
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; wait_input();
;
L0038:	jsr     _wait_input
;
; break;
;
	jmp     L0098
;
; multi_vram_buffer_horz(dial0010, sizeof(dial0010), NTADR_A(7, 1));
;
L0039:	jsr     decsp3
	lda     #<(_dial0010)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0010)
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$27
	jsr     _multi_vram_buffer_horz
;
; show_item = TRUE;
;
	lda     #$01
	sta     _show_item
;
; current_item = 0;
;
	lda     #$00
	sta     _current_item
;
; items.type[current_item] = TYPE_ITEM_MAGNET;
;
	ldy     _current_item
	lda     #$16
	sta     _items,y
;
; items.is_active[current_item] = TRUE;
;
	ldy     _current_item
	lda     #$01
	sta     _items+6,y
;
; items.sprite[current_item] = ITEM_INDEX_MAGNET;
;
	ldy     _current_item
	lda     #$09
	sta     _items+12,y
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; wait_input();
;
L003D:	jsr     _wait_input
;
; break;
;
	jmp     L0098
;
; multi_vram_buffer_horz(dial0011, sizeof(dial0011), NTADR_A(7, 1));
;
L003E:	jsr     decsp3
	lda     #<(_dial0011)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0011)
	sta     (sp),y
	lda     #$14
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$27
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(dial0012, sizeof(dial0012), NTADR_A(7, 2));
;
	jsr     decsp3
	lda     #<(_dial0012)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0012)
	sta     (sp),y
	lda     #$15
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$47
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(dial0013, sizeof(dial0013), NTADR_A(7, 3));
;
	jsr     decsp3
	lda     #<(_dial0013)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0013)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$67
	jsr     _multi_vram_buffer_horz
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; wait_input();
;
L003F:	jsr     _wait_input
;
; break;
;
	jmp     L0098
;
; multi_vram_buffer_horz(dial0014, sizeof(dial0014), NTADR_A(7, 1));
;
L0040:	jsr     decsp3
	lda     #<(_dial0014)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0014)
	sta     (sp),y
	lda     #$17
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$27
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(dial0015, sizeof(dial0015), NTADR_A(7, 2));
;
	jsr     decsp3
	lda     #<(_dial0015)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0015)
	sta     (sp),y
	lda     #$13
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$47
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(dial0016, sizeof(dial0016), NTADR_A(7, 3));
;
	jsr     decsp3
	lda     #<(_dial0016)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0016)
	sta     (sp),y
	lda     #$17
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$67
	jsr     _multi_vram_buffer_horz
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; wait_input();
;
L0041:	jsr     _wait_input
;
; break;
;
	jmp     L0098
;
; brightout();
;
L0042:	jsr     _brightout
;
; break;
;
	jmp     L0098
;
; actors.state[GHOST] = INACTIVE;
;
L0043:	ldy     _GHOST
	lda     #$80
	sta     _actors+266,y
;
; actors.counter[SKELETON1] = 250;
;
	ldy     _SKELETON1
	lda     #$FA
	sta     _actors+224,y
;
; actors.counter[SKELETON2] = 250;
;
	ldy     _SKELETON2
	sta     _actors+224,y
;
; actors.state[SKELETON1] = RISING;
;
	ldy     _SKELETON1
	lda     #$05
	sta     _actors+266,y
;
; actors.state[SKELETON2] = RISING;
;
	ldy     _SKELETON2
	sta     _actors+266,y
;
; ++story_step;
;
	inc     _story_step
;
; game_state = MAIN;
;
	lda     #$00
	sta     _game_state
;
; show_face = FALSE;
;
	sta     _show_face
;
; show_item = FALSE;
;
	sta     _show_item
;
; ++actors.state[STARS];
;
	lda     #<(_actors+266)
	ldx     #>(_actors+266)
	clc
	adc     _STARS
	bcc     L0049
	inx
L0049:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; show_HUD();
;
	jsr     _show_HUD
;
; break;
;
	jmp     L0098
;
; wait(64);
;
L008F:	lda     #$40
	jsr     _wait
;
; break;
;
	jmp     L0098
;
; if (actors.state[CROW] != FLYING) {
;
L004B:	ldy     _CROW
	lda     _actors+266,y
	jeq     L0098
;
; one_vram_buffer(0x11, NTADR_A(15, 9));
;
	lda     #$11
	jsr     pusha
	ldx     #$21
	lda     #$2F
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x11, NTADR_A(16, 9));
;
	lda     #$11
	jsr     pusha
	ldx     #$21
	lda     #$30
	jsr     _one_vram_buffer
;
; actors.state[GATE] = TURNING;
;
	ldy     _GATE
	lda     #$01
	sta     _actors+266,y
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; wait(64);
;
L0090:	lda     #$40
	jsr     _wait
;
; break;
;
	jmp     L0098
;
; fadeout();
;
L0050:	jsr     _fadeout
;
; break;
;
	jmp     L0098
;
; ++current_level;
;
L0091:	inc     _current_level
;
; load_level();
;
	jsr     _load_level
;
; story_step = 0;
;
	lda     #$00
	sta     _story_step
;
; break;
;
	jmp     L0098
;
; play_normal_level();
;
L0052:	jsr     _play_normal_level
;
; break;
;
	jmp     L0098
;
; play_normal_level();
;
L0053:	jsr     _play_normal_level
;
; break;
;
	jmp     L0098
;
; play_normal_level();
;
L0054:	jsr     _play_normal_level
;
; break;
;
	jmp     L0098
;
; play_normal_level();
;
L0055:	jsr     _play_normal_level
;
; break;
;
	jmp     L0098
;
; play_normal_level();
;
L0056:	jsr     _play_normal_level
;
; break;
;
	jmp     L0098
;
; if (show_face) {
;
L0057:	lda     _show_face
	beq     L0059
;
; oam_meta_spr(FACE_X, FACE_Y, grakk_face);
;
	jsr     decsp2
	lda     #$20
	ldy     #$01
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #<(_grakk_face)
	ldx     #>(_grakk_face)
	jsr     _oam_meta_spr
;
; draw_paddles();
;
	jsr     _draw_paddles
;
; if (actors.state[DOOR1] == OPENED) {
;
	ldy     _DOOR1
	lda     _actors+266,y
	cmp     #$02
	bne     L0059
;
; oam_meta_spr(58, 144, grakk);
;
	jsr     decsp2
	lda     #$3A
	ldy     #$01
	sta     (sp),y
	lda     #$90
	dey
	sta     (sp),y
	lda     #<(_grakk)
	ldx     #>(_grakk)
	jsr     _oam_meta_spr
;
; animate_actors();
;
L0059:	jsr     _animate_actors
;
; switch (story_step) {
;
	lda     _story_step
;
; }
;
	cmp     #$14
	beq     L005D
	cmp     #$15
	beq     L005E
	cmp     #$16
	jeq     L0062
	cmp     #$17
	jeq     L0063
	cmp     #$18
	jeq     L0064
	cmp     #$19
	jeq     L0068
	cmp     #$1A
	jeq     L0069
	cmp     #$1B
	jeq     L006A
	cmp     #$1C
	jeq     L006B
	cmp     #$1D
	jeq     L0092
	jmp     L006F
;
; hide_HUD();
;
L005D:	jsr     _hide_HUD
;
; show_face = TRUE;
;
	lda     #$01
	sta     _show_face
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; if (level_condition1) {
;
L005E:	lda     _level_condition1
	beq     L005F
;
; ++story_step;
;
	inc     _story_step
;
; ++actors.state[DOOR1];
;
	lda     #<(_actors+266)
	ldx     #>(_actors+266)
	clc
	adc     _DOOR1
	bcc     L0060
	inx
L0060:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; } else {
;
	jmp     L0098
;
; multi_vram_buffer_horz(dial0017, sizeof(dial0017), NTADR_A(7, 1));
;
L005F:	jsr     decsp3
	lda     #<(_dial0017)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0017)
	sta     (sp),y
	lda     #$17
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$27
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(dial0018, sizeof(dial0018), NTADR_A(7, 2));
;
	jsr     decsp3
	lda     #<(_dial0018)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0018)
	sta     (sp),y
	lda     #$15
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$47
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(dial0019, sizeof(dial0019), NTADR_A(7, 3));
;
	jsr     decsp3
	lda     #<(_dial0019)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0019)
	sta     (sp),y
	lda     #$09
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$67
	jsr     _multi_vram_buffer_horz
;
; story_step = STORY_LEVEL_EVENT + 7;
;
	lda     #$1B
	sta     _story_step
;
; break;
;
	jmp     L0098
;
; multi_vram_buffer_horz(dial0020, sizeof(dial0020), NTADR_A(7, 1));
;
L0062:	jsr     decsp3
	lda     #<(_dial0020)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0020)
	sta     (sp),y
	lda     #$14
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$27
	jsr     _multi_vram_buffer_horz
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; wait_input();
;
L0063:	jsr     _wait_input
;
; break;
;
	jmp     L0098
;
; multi_vram_buffer_horz(dial0021, sizeof(dial0021), NTADR_A(7, 1));
;
L0064:	jsr     decsp3
	lda     #<(_dial0021)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0021)
	sta     (sp),y
	lda     #$09
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$27
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(dial0022, sizeof(dial0022), NTADR_A(7, 2));
;
	jsr     decsp3
	lda     #<(_dial0022)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0022)
	sta     (sp),y
	lda     #$0B
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$47
	jsr     _multi_vram_buffer_horz
;
; current_item = 5;
;
	lda     #$05
	sta     _current_item
;
; items.sprite[current_item] = ITEM_INDEX_SEED;
;
	ldy     _current_item
	lda     #$07
	sta     _items+12,y
;
; items.type[current_item] = TYPE_ITEM_SEED;
;
	ldy     _current_item
	lda     #$1C
	sta     _items,y
;
; items.is_active[current_item] = TRUE;
;
	ldy     _current_item
	lda     #$01
	sta     _items+6,y
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; oam_spr(136, 16, ITEM_INDEX_SEED, 0);
;
L0068:	jsr     decsp3
	lda     #$88
	ldy     #$02
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #$07
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; wait_input();
;
	jsr     _wait_input
;
; break;
;
	jmp     L0098
;
; multi_vram_buffer_horz(dial0023, sizeof(dial0023), NTADR_A(7, 1));
;
L0069:	jsr     decsp3
	lda     #<(_dial0023)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0023)
	sta     (sp),y
	lda     #$0D
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$27
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(dial0024, sizeof(dial0024), NTADR_A(7, 2));
;
	jsr     decsp3
	lda     #<(_dial0024)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0024)
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$47
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(dial0025, sizeof(dial0025), NTADR_A(7, 3));
;
	jsr     decsp3
	lda     #<(_dial0025)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_dial0025)
	sta     (sp),y
	lda     #$18
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$67
	jsr     _multi_vram_buffer_horz
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; wait_input();
;
L006A:	jsr     _wait_input
;
; break;
;
	jmp     L0098
;
; show_HUD();
;
L006B:	jsr     _show_HUD
;
; game_state = MAIN;
;
L0092:	lda     #$00
	sta     _game_state
;
; show_face = FALSE;
;
	sta     _show_face
;
; if (current_item == 5) {
;
	lda     _current_item
	cmp     #$05
	jne     L0098
;
; actors.state[STARS] = TURNING;
;
	ldy     _STARS
	lda     #$01
	sta     _actors+266,y
;
; break;
;
	jmp     L0098
;
; play_normal_level();
;
L006F:	jsr     _play_normal_level
;
; }
;
	jmp     L0098
;
; play_normal_level();
;
L0070:	jsr     _play_normal_level
;
; break;
;
	jmp     L0098
;
; switch (story_step) {
;
L0093:	lda     _story_step
;
; }
;
	beq     L0074
	cmp     #$01
	beq     L0094
	cmp     #$02
	beq     L0076
	cmp     #$03
	beq     L0095
	cmp     #$04
	beq     L0078
	cmp     #$05
	jeq     L007B
	cmp     #$06
	jeq     L0096
	cmp     #$07
	jeq     L0097
	jmp     L0098
;
; oam_meta_spr(182, 122, staff);
;
L0074:	jsr     decsp2
	lda     #$B6
	ldy     #$01
	sta     (sp),y
	lda     #$7A
	dey
	sta     (sp),y
	lda     #<(_staff)
	ldx     #>(_staff)
	jsr     _oam_meta_spr
;
; fadeout();
;
	jsr     _fadeout
;
; break;
;
	jmp     L0098
;
; wait(64);
;
L0094:	lda     #$40
	jsr     _wait
;
; break;
;
	jmp     L0098
;
; load_black_level();
;
L0076:	jsr     _load_black_level
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; set_chr_mode_2(0x00);
;
L0095:	lda     #$00
	jsr     _set_chr_mode_2
;
; set_chr_mode_3(0x01);
;
	lda     #$01
	jsr     _set_chr_mode_3
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; story_counter = NULL;
;
	lda     #$00
	sta     _story_counter
;
; scroll_index_y = NULL;
;
	sta     _scroll_index_y
	sta     _scroll_index_y+1
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; set_scroll_y(scroll_index_y);
;
L0078:	lda     _scroll_index_y
	ldx     _scroll_index_y+1
	jsr     _set_scroll_y
;
; scroll_index_y = add_scroll_y(1, scroll_index_y);
;
	lda     #$01
	jsr     pusha
	lda     _scroll_index_y
	ldx     _scroll_index_y+1
	jsr     _add_scroll_y
	sta     _scroll_index_y
	stx     _scroll_index_y+1
;
; if (scroll_index_y > 488) {
;
	cmp     #$E9
	txa
	sbc     #$01
	bvs     L007A
	eor     #$80
L007A:	bpl     L0098
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0098
;
; fadeout();
;
L007B:	jsr     _fadeout
;
; break;
;
	jmp     L0098
;
; wait(32);
;
L0096:	lda     #$20
	jsr     _wait
;
; break;
;
	jmp     L0098
;
; story_step = 0;
;
L0097:	lda     #$00
	sta     _story_step
;
; current_level = 0;
;
	sta     _current_level
;
; set_scroll_y(0);
;
	tax
	jsr     _set_scroll_y
;
; load_level();
;
	jsr     _load_level
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; ++story_counter;
;
L0098:	inc     _story_counter
;
; if (wait_timer == 127) {
;
	lda     _wait_timer
	cmp     #$7F
	bne     L0099
;
; wait_timer = 0;
;
	lda     #$00
	sta     _wait_timer
;
; ++wait_timer;
;
L0099:	inc     _wait_timer
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ debug_start (char debuglevel)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_debug_start: near

.segment	"CODE"

;
; void debug_start(char debuglevel) {
;
	jsr     pusha
;
; set_chr_mode_1(0x06);
;
	lda     #$06
	jsr     _set_chr_mode_1
;
; set_chr_mode_2(0x00);
;
	lda     #$00
	jsr     _set_chr_mode_2
;
; set_chr_mode_3(0x01);
;
	lda     #$01
	jsr     _set_chr_mode_3
;
; current_level = debuglevel;
;
	ldy     #$00
	lda     (sp),y
	sta     _current_level
;
; load_level();
;
	jsr     _load_level
;
; actors.state[SKULL] = IDLE;
;
	lda     #$00
	sta     _actors+271
;
; brightness = NULL;
;
	sta     _brightness
;
; pal_bright(brightness);
;
	jsr     _pal_bright
;
; current_item = 5;
;
	lda     #$05
	sta     _current_item
;
; items.sprite[current_item] = ITEM_INDEX_SEED;
;
	ldy     _current_item
	lda     #$07
	sta     _items+12,y
;
; items.type[current_item] = TYPE_ITEM_SEED;
;
	ldy     _current_item
	lda     #$1C
	sta     _items,y
;
; items.is_active[current_item] = TRUE;
;
	ldy     _current_item
	lda     #$01
	sta     _items+6,y
;
; current_item = 4;
;
	lda     #$04
	sta     _current_item
;
; items.sprite[current_item] = ITEM_INDEX_HEAL;
;
	ldy     _current_item
	lda     #$19
	sta     _items+12,y
;
; items.type[current_item] = TYPE_ITEM_HEAL;
;
	ldy     _current_item
	lda     #$1B
	sta     _items,y
;
; items.is_active[current_item] = TRUE;
;
	ldy     _current_item
	lda     #$01
	sta     _items+6,y
;
; current_item = 3;
;
	lda     #$03
	sta     _current_item
;
; items.sprite[current_item] = ITEM_INDEX_BIG;
;
	ldy     _current_item
	lda     #$17
	sta     _items+12,y
;
; items.type[current_item] = TYPE_ITEM_BIG;
;
	ldy     _current_item
	lda     #$19
	sta     _items,y
;
; items.is_active[current_item] = TRUE;
;
	ldy     _current_item
	lda     #$01
	sta     _items+6,y
;
; current_item = 2;
;
	lda     #$02
	sta     _current_item
;
; items.sprite[current_item] = ITEM_INDEX_HOOK;
;
	ldy     _current_item
	lda     #$0B
	sta     _items+12,y
;
; items.type[current_item] = TYPE_ITEM_HOOK;
;
	ldy     _current_item
	lda     #$18
	sta     _items,y
;
; items.is_active[current_item] = TRUE;
;
	ldy     _current_item
	lda     #$01
	sta     _items+6,y
;
; current_item = 1;
;
	sta     _current_item
;
; items.sprite[current_item] = ITEM_INDEX_BOMB;
;
	ldy     _current_item
	lda     #$0A
	sta     _items+12,y
;
; items.type[current_item] = TYPE_ITEM_BOMB;
;
	ldy     _current_item
	lda     #$17
	sta     _items,y
;
; items.is_active[current_item] = TRUE;
;
	ldy     _current_item
	lda     #$01
	sta     _items+6,y
;
; current_item = 0;
;
	lda     #$00
	sta     _current_item
;
; items.sprite[current_item] = ITEM_INDEX_MAGNET;
;
	ldy     _current_item
	lda     #$09
	sta     _items+12,y
;
; items.type[current_item] = TYPE_ITEM_MAGNET;
;
	ldy     _current_item
	lda     #$16
	sta     _items,y
;
; items.is_active[current_item] = TRUE;
;
	ldy     _current_item
	lda     #$01
	sta     _items+6,y
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; disable_irq();
;
	jsr     _disable_irq
;
; memfill(wram_array, 0, 0x2000);
;
	jsr     decsp3
	lda     #<(_wram_array)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_wram_array)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	ldx     #$20
	jsr     _memfill
;
; set_scroll_y(0xff);  // shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; set_mirroring(MIRROR_HORIZONTAL);
;
	lda     #$01
	jsr     _set_mirroring
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; load_title_screen();
;
	jsr     _load_title_screen
;
; banked_call(0, init_skull);
;
	lda     #$00
	jsr     pusha
	lda     #<(_init_skull)
	ldx     #>(_init_skull)
	jsr     _banked_call
;
; p1_health = 3;
;
	lda     #$03
	sta     _p1_health
;
; p1_max_health = 4;
;
	lda     #$04
	sta     _p1_max_health
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; oam_meta_spr(182, 122, staff);
;
	jsr     decsp2
	lda     #$B6
	ldy     #$01
	sta     (sp),y
	lda     #$7A
	dey
	sta     (sp),y
	lda     #<(_staff)
	ldx     #>(_staff)
	jsr     _oam_meta_spr
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi();
;
L0002:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; switch (game_state) {
;
	lda     _game_state
;
; }
;
	beq     L0007
	cmp     #$01
	jeq     L0016
	cmp     #$02
	jeq     L000D
	cmp     #$03
	jeq     L000F
	cmp     #$04
	beq     L0002
	cmp     #$05
	jeq     L0010
	jmp     L0002
;
; check_main_input();
;
L0007:	jsr     _check_main_input
;
; update_skull();
;
	jsr     _update_skull
;
; draw_paddles();
;
	jsr     _draw_paddles
;
; animate_actors();
;
	jsr     _animate_actors
;
; oam_spr(ITEM_X, ITEM_Y, items.sprite[current_item], 0);
;
	jsr     decsp3
	lda     #$BC
	ldy     #$02
	sta     (sp),y
	lda     #$15
	dey
	sta     (sp),y
	ldy     _current_item
	lda     _items+12,y
	ldy     #$00
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; if (brick_counter == 0) {
;
	lda     _brick_counter
	bne     L0013
;
; game_state = STORY;
;
	lda     #$03
	sta     _game_state
;
; if (game_state == MAP) {
;
L0013:	lda     _game_state
	cmp     #$02
	bne     L0014
;
; banked_call(1, load_map);
;
	lda     #$01
	jsr     pusha
	lda     #<(_load_map)
	ldx     #>(_load_map)
	jsr     _banked_call
;
; if (game_state == INVENTORY) {
;
L0014:	lda     _game_state
	cmp     #$01
	jne     L0002
;
; banked_call(1, load_inventory);
;
	jsr     pusha
	lda     #<(_load_inventory)
	ldx     #>(_load_inventory)
	jsr     _banked_call
;
; draw_index = CURSOR;
;
	lda     #$0D
	sta     _draw_index
;
; actors.y[CURSOR] = INVENTORY_ITEM_Y;
;
	lda     #$20
	sta     _actors+27
;
; actors.animation_delay[CURSOR] = 32;
;
	sta     _actors+251
;
; actors.type[CURSOR] = TYPE_CURSOR;
;
	lda     #$1F
	sta     _actors+293
;
; actors.state[CURSOR] = CURSOR_SMALL;
;
	lda     #$00
	sta     _actors+279
;
; current_selection = current_item;
;
	lda     _current_item
	sta     _current_selection
;
; break;
;
	jmp     L0002
;
; banked_call(1, manage_inventory);
;
L0016:	jsr     pusha
	lda     #<(_manage_inventory)
	ldx     #>(_manage_inventory)
	jsr     _banked_call
;
; animate();
;
	jsr     _animate
;
; break;
;
	jmp     L0002
;
; oam_spr(1, 1, 0x00, 0x00);
;
L000D:	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; if (pad1_new & PAD_START) {
;
	lda     _pad1_new
	and     #$10
	jeq     L0002
;
; banked_call(1, hide_map);
;
	lda     #$01
	jsr     pusha
	lda     #<(_hide_map)
	ldx     #>(_hide_map)
	jsr     _banked_call
;
; game_state = MAIN;
;
	lda     #$00
	sta     _game_state
;
; break;
;
	jmp     L0002
;
; play_story();
;
L000F:	jsr     _play_story
;
; break;
;
	jmp     L0002
;
; oam_meta_spr(182, 122, staff);
;
L0010:	jsr     decsp2
	lda     #$B6
	ldy     #$01
	sta     (sp),y
	lda     #$7A
	dey
	sta     (sp),y
	lda     #<(_staff)
	ldx     #>(_staff)
	jsr     _oam_meta_spr
;
; if (pad1_new & PAD_START) {
;
	lda     _pad1_new
	and     #$10
	jeq     L0002
;
; game_state = STORY;
;
	lda     #$03
	sta     _game_state
;
; current_level = LVL_INTRO;
;
	lda     #$FA
	sta     _current_level
;
; story_step = STORY_LEVEL_START;
;
	lda     #$00
	sta     _story_step
;
; scroll_index_y = NULL;
;
	sta     _scroll_index_y
	sta     _scroll_index_y+1
;
; break;
;
	jmp     L0002

.endproc

