;
; File generated by cc65 v 2.19 - Git 4f87c7c
;
	.fopt		compiler,"cc65 v 2.19 - Git 4f87c7c"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_get_pad_new
	.import		_set_scroll_x
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_unrle
	.import		_memcpy
	.import		_memfill
	.export		_bankLevel
	.export		_bankBuffer
	.export		_banked_call
	.export		_bank_push
	.export		_bank_pop
	.import		_set_prg_8000
	.import		_set_chr_mode_4
	.import		_set_chr_mode_5
	.import		_disable_irq
	.export		_forest_col_01
	.export		_forest_col_02
	.export		_cemetery_col
	.export		_altar
	.export		_cemetery
	.export		_map
	.export		_forest_level_01
	.export		_forest_level_02
	.export		_title_screen
	.export		_pal_cemetery_bg
	.export		_pal_forest_bg
	.export		_pal_altar_spr
	.export		_pal_cemetery_spr
	.export		_pal_altar_bg
	.export		_angelic_idle1
	.export		_angelic_idle2
	.export		_angelic_idle3
	.export		_angelic_face
	.export		_angelic_animation_index
	.export		_angelic_animation
	.export		_HorizontalPaddleSpr
	.export		_VerticalPaddleSpr
	.export		_tree
	.export		_crow_left
	.export		_crow_left_skwak
	.export		_crow_right
	.export		_crow_right_skwak
	.export		_door1
	.export		_door2
	.export		_door3
	.export		_door4
	.export		_torch_flicker1
	.export		_torch_flicker2
	.export		_torch_flicker3
	.export		_torch_flicker4
	.export		_torch_animation_index
	.export		_torch_animation
	.export		_skeleton_right_still
	.export		_skeleton_right_walk1
	.export		_skeleton_right_walk2
	.export		_skeleton_right_walk3
	.export		_skeleton_right_walk4
	.export		_skeleton_right_turn
	.export		_skeleton_left_still
	.export		_skeleton_left_walk1
	.export		_skeleton_left_walk2
	.export		_skeleton_left_walk3
	.export		_skeleton_left_walk4
	.export		_skeleton_left_turn
	.export		_skeleton_dying_right1
	.export		_skeleton_dying_right2
	.export		_skeleton_dying_right3
	.export		_skeleton_dying_right4
	.export		_skeleton_dying_right5
	.export		_skeleton_dying_right6
	.export		_skeleton_dying_right7
	.export		_skeleton_dying_left1
	.export		_skeleton_dying_left2
	.export		_skeleton_dying_left3
	.export		_skeleton_dying_left4
	.export		_skeleton_dying_left5
	.export		_skeleton_dying_left6
	.export		_skeleton_dying_left7
	.export		_skeleton_animation_index
	.export		_skeleton_animation
	.export		_skull_rotate_left1
	.export		_skull_rotate_left2
	.export		_skull_rotate_left3
	.export		_skull_rotate_left4
	.export		_skull_rotate_left5
	.export		_skull_rotate_left6
	.export		_skull_rotate_right1
	.export		_skull_rotate_right2
	.export		_skull_rotate_right3
	.export		_skull_rotate_right4
	.export		_skull_rotate_right5
	.export		_skull_rotate_right6
	.export		_skull_animation_index
	.export		_skull_animation
	.export		_wram_array
	.export		_faces
	.export		_level_list
	.export		_actors
	.export		_init_skeletons
	.export		_debug
	.export		_animate_skeleton
	.export		_set_animation_info
	.export		_update_health
	.export		_update_xp
	.export		_add_xp
	.export		_clear_HUD
	.export		_show_HUD
	.export		_show_map
	.export		_show_title_screen
	.export		_show_game_over
	.export		_init_level_specifics
	.export		_init_skull
	.export		_draw_level_specifics
	.export		_load_level
	.export		_load_title_screen
	.export		_load_map
	.export		_remove_brick
	.export		_hit_brick
	.export		_get_x_speed
	.export		_get_y_speed
	.export		_add_x_speed
	.export		_subtract_x_speed
	.export		_add_y_speed
	.export		_subtract_y_speed
	.export		_get_collision_type
	.export		_set_collision_data
	.export		_do_skull_tile_collision
	.export		_skull_was_beside
	.export		_skull_was_above
	.export		_is_skull_collision_paddle
	.export		_is_paddle_collision_skull
	.export		_check_enemy_collision
	.export		_move_horizontal_paddle
	.export		_move_vertical_paddle
	.export		_check_paddle_collision
	.export		_check_main_input
	.export		_update_skull
	.export		_draw_skull
	.export		_draw_paddles
	.export		_draw_sprites
	.export		_play_story
	.export		_main

.segment	"DATA"

_faces:
	.addr	_angelic_face
_level_list:
	.addr	_altar
	.addr	_cemetery_col
	.addr	_pal_altar_bg
	.addr	_pal_altar_spr
	.addr	_cemetery
	.addr	_cemetery_col
	.addr	_pal_cemetery_bg
	.addr	_pal_cemetery_spr
_exp:
	.byte	$30,$30,$30,$30,$30,$30,$30,$30,$00

.segment	"RODATA"

.segment	"STARTUP"
_forest_col_01:
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$60
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$60
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$66
	.byte	$66
	.byte	$60
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$11
	.byte	$11
_forest_col_02:
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$50
	.byte	$00
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$05
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$55
	.byte	$55
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$55
	.byte	$55
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$05
	.byte	$50
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$66
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$11
	.byte	$11
_cemetery_col:
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$00
	.byte	$77
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
	.byte	$11
_altar:
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$2A
	.byte	$8F
	.byte	$01
	.byte	$02
	.byte	$09
	.byte	$8D
	.byte	$01
	.byte	$01
	.byte	$8E
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$8F
	.byte	$01
	.byte	$02
	.byte	$09
	.byte	$8D
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$9D
	.byte	$9E
	.byte	$01
	.byte	$01
	.byte	$8D
	.byte	$01
	.byte	$02
	.byte	$0E
	.byte	$9F
	.byte	$01
	.byte	$02
	.byte	$09
	.byte	$9F
	.byte	$01
	.byte	$02
	.byte	$0C
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AF
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$AD
	.byte	$AF
	.byte	$AE
	.byte	$AD
	.byte	$AE
	.byte	$01
	.byte	$02
	.byte	$25
	.byte	$96
	.byte	$97
	.byte	$01
	.byte	$02
	.byte	$19
	.byte	$96
	.byte	$97
	.byte	$01
	.byte	$01
	.byte	$88
	.byte	$89
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$A6
	.byte	$A7
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$88
	.byte	$89
	.byte	$01
	.byte	$01
	.byte	$98
	.byte	$99
	.byte	$01
	.byte	$02
	.byte	$0A
	.byte	$B4
	.byte	$B6
	.byte	$B7
	.byte	$B5
	.byte	$01
	.byte	$02
	.byte	$0A
	.byte	$98
	.byte	$99
	.byte	$01
	.byte	$01
	.byte	$A8
	.byte	$A9
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$B2
	.byte	$01
	.byte	$01
	.byte	$B2
	.byte	$01
	.byte	$01
	.byte	$B2
	.byte	$9A
	.byte	$9B
	.byte	$B2
	.byte	$01
	.byte	$01
	.byte	$B2
	.byte	$01
	.byte	$01
	.byte	$B2
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$A8
	.byte	$A9
	.byte	$01
	.byte	$01
	.byte	$B8
	.byte	$B9
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$B3
	.byte	$01
	.byte	$01
	.byte	$B3
	.byte	$01
	.byte	$01
	.byte	$B3
	.byte	$01
	.byte	$01
	.byte	$B3
	.byte	$01
	.byte	$01
	.byte	$B3
	.byte	$01
	.byte	$01
	.byte	$B3
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$B8
	.byte	$B9
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$B2
	.byte	$00
	.byte	$00
	.byte	$B2
	.byte	$00
	.byte	$00
	.byte	$B2
	.byte	$AA
	.byte	$AB
	.byte	$B2
	.byte	$00
	.byte	$00
	.byte	$B2
	.byte	$00
	.byte	$00
	.byte	$B2
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$A1
	.byte	$82
	.byte	$A3
	.byte	$82
	.byte	$A3
	.byte	$82
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$80
	.byte	$93
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$94
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$80
	.byte	$A0
	.byte	$81
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$84
	.byte	$90
	.byte	$80
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$90
	.byte	$A0
	.byte	$91
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$92
	.byte	$A0
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$A0
	.byte	$B0
	.byte	$83
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$82
	.byte	$B0
	.byte	$A0
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$B0
	.byte	$00
	.byte	$91
	.byte	$94
	.byte	$91
	.byte	$94
	.byte	$91
	.byte	$94
	.byte	$00
	.byte	$B0
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$BA
	.byte	$BB
	.byte	$BB
	.byte	$BD
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$BE
	.byte	$BE
	.byte	$01
	.byte	$02
	.byte	$13
	.byte	$BE
	.byte	$BE
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$BF
	.byte	$BF
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$BF
	.byte	$BF
	.byte	$01
	.byte	$02
	.byte	$09
	.byte	$BE
	.byte	$BE
	.byte	$01
	.byte	$02
	.byte	$0F
	.byte	$BE
	.byte	$BE
	.byte	$01
	.byte	$02
	.byte	$0B
	.byte	$BF
	.byte	$BF
	.byte	$00
	.byte	$02
	.byte	$0F
	.byte	$BF
	.byte	$BF
	.byte	$01
	.byte	$02
	.byte	$0D
	.byte	$BE
	.byte	$02
	.byte	$0F
	.byte	$01
	.byte	$02
	.byte	$0F
	.byte	$BF
	.byte	$02
	.byte	$0F
	.byte	$01
	.byte	$02
	.byte	$47
	.byte	$00
	.byte	$8A
	.byte	$88
	.byte	$30
	.byte	$20
	.byte	$C8
	.byte	$22
	.byte	$20
	.byte	$F0
	.byte	$0F
	.byte	$02
	.byte	$04
	.byte	$0B
	.byte	$F0
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$57
	.byte	$55
	.byte	$02
	.byte	$03
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$02
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$75
	.byte	$55
	.byte	$02
	.byte	$03
	.byte	$D5
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$F5
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$00
	.byte	$02
	.byte	$00
_cemetery:
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$A0
	.byte	$11
	.byte	$02
	.byte	$0C
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$11
	.byte	$02
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$02
	.byte	$0C
	.byte	$C7
	.byte	$11
	.byte	$11
	.byte	$C7
	.byte	$11
	.byte	$02
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$11
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$FF
	.byte	$11
	.byte	$FF
	.byte	$C9
	.byte	$11
	.byte	$11
	.byte	$C9
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$11
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$FF
	.byte	$FE
	.byte	$FF
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CA
	.byte	$02
	.byte	$02
	.byte	$CC
	.byte	$CA
	.byte	$02
	.byte	$05
	.byte	$CC
	.byte	$CA
	.byte	$C9
	.byte	$11
	.byte	$11
	.byte	$C9
	.byte	$CA
	.byte	$02
	.byte	$04
	.byte	$CC
	.byte	$CA
	.byte	$02
	.byte	$05
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CB
	.byte	$02
	.byte	$0B
	.byte	$C7
	.byte	$C1
	.byte	$C2
	.byte	$CD
	.byte	$CB
	.byte	$02
	.byte	$0B
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$0A
	.byte	$D1
	.byte	$D2
	.byte	$01
	.byte	$02
	.byte	$0A
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$0A
	.byte	$D1
	.byte	$D2
	.byte	$11
	.byte	$02
	.byte	$0A
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$D4
	.byte	$D5
	.byte	$11
	.byte	$11
	.byte	$D4
	.byte	$D5
	.byte	$11
	.byte	$11
	.byte	$E3
	.byte	$E4
	.byte	$11
	.byte	$D1
	.byte	$D2
	.byte	$11
	.byte	$D4
	.byte	$D5
	.byte	$11
	.byte	$11
	.byte	$E3
	.byte	$E4
	.byte	$11
	.byte	$11
	.byte	$D8
	.byte	$D9
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$D3
	.byte	$10
	.byte	$D6
	.byte	$DB
	.byte	$11
	.byte	$11
	.byte	$D6
	.byte	$DB
	.byte	$11
	.byte	$11
	.byte	$E5
	.byte	$D7
	.byte	$11
	.byte	$D1
	.byte	$D2
	.byte	$11
	.byte	$D6
	.byte	$DB
	.byte	$11
	.byte	$11
	.byte	$E5
	.byte	$D7
	.byte	$11
	.byte	$11
	.byte	$D6
	.byte	$DB
	.byte	$10
	.byte	$D3
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$05
	.byte	$DA
	.byte	$D1
	.byte	$D2
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$05
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$05
	.byte	$DA
	.byte	$D1
	.byte	$D2
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$05
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$D4
	.byte	$D5
	.byte	$11
	.byte	$11
	.byte	$E3
	.byte	$E4
	.byte	$11
	.byte	$11
	.byte	$D4
	.byte	$D5
	.byte	$11
	.byte	$D1
	.byte	$D2
	.byte	$11
	.byte	$E3
	.byte	$E4
	.byte	$11
	.byte	$11
	.byte	$D4
	.byte	$D5
	.byte	$11
	.byte	$11
	.byte	$D4
	.byte	$D5
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$D6
	.byte	$DB
	.byte	$11
	.byte	$11
	.byte	$E5
	.byte	$D7
	.byte	$11
	.byte	$DA
	.byte	$D6
	.byte	$DB
	.byte	$11
	.byte	$D1
	.byte	$D2
	.byte	$11
	.byte	$D6
	.byte	$D7
	.byte	$11
	.byte	$11
	.byte	$D6
	.byte	$DB
	.byte	$11
	.byte	$11
	.byte	$D6
	.byte	$DB
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$D3
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$DC
	.byte	$DD
	.byte	$E0
	.byte	$11
	.byte	$02
	.byte	$08
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$D3
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$DE
	.byte	$DF
	.byte	$E1
	.byte	$01
	.byte	$CF
	.byte	$E2
	.byte	$11
	.byte	$02
	.byte	$05
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$E3
	.byte	$E4
	.byte	$11
	.byte	$11
	.byte	$D4
	.byte	$D5
	.byte	$11
	.byte	$11
	.byte	$E6
	.byte	$C8
	.byte	$E8
	.byte	$E9
	.byte	$EC
	.byte	$ED
	.byte	$FD
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$E3
	.byte	$E4
	.byte	$11
	.byte	$11
	.byte	$D4
	.byte	$D5
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$E5
	.byte	$D7
	.byte	$11
	.byte	$11
	.byte	$E5
	.byte	$DB
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$E7
	.byte	$EA
	.byte	$EB
	.byte	$EE
	.byte	$EF
	.byte	$CF
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$E5
	.byte	$D7
	.byte	$11
	.byte	$11
	.byte	$D6
	.byte	$DB
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$04
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$F1
	.byte	$F3
	.byte	$F4
	.byte	$F7
	.byte	$F8
	.byte	$FB
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$DA
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$D3
	.byte	$10
	.byte	$DA
	.byte	$11
	.byte	$02
	.byte	$07
	.byte	$F2
	.byte	$F5
	.byte	$F6
	.byte	$F9
	.byte	$FA
	.byte	$CF
	.byte	$11
	.byte	$02
	.byte	$06
	.byte	$DA
	.byte	$11
	.byte	$10
	.byte	$D3
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$08
	.byte	$F1
	.byte	$FD
	.byte	$F1
	.byte	$F0
	.byte	$F1
	.byte	$FD
	.byte	$11
	.byte	$02
	.byte	$08
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$17
	.byte	$10
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$CE
	.byte	$10
	.byte	$02
	.byte	$19
	.byte	$CE
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$D3
	.byte	$02
	.byte	$02
	.byte	$CE
	.byte	$D3
	.byte	$02
	.byte	$02
	.byte	$CE
	.byte	$D3
	.byte	$02
	.byte	$02
	.byte	$CE
	.byte	$D3
	.byte	$02
	.byte	$03
	.byte	$CE
	.byte	$D3
	.byte	$02
	.byte	$02
	.byte	$CE
	.byte	$D3
	.byte	$02
	.byte	$02
	.byte	$CE
	.byte	$D3
	.byte	$02
	.byte	$02
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$02
	.byte	$1D
	.byte	$00
	.byte	$02
	.byte	$20
	.byte	$FF
	.byte	$02
	.byte	$07
	.byte	$6A
	.byte	$5A
	.byte	$5A
	.byte	$9A
	.byte	$6A
	.byte	$5A
	.byte	$5A
	.byte	$9A
	.byte	$2A
	.byte	$5A
	.byte	$02
	.byte	$05
	.byte	$8A
	.byte	$22
	.byte	$56
	.byte	$02
	.byte	$02
	.byte	$59
	.byte	$02
	.byte	$02
	.byte	$88
	.byte	$22
	.byte	$56
	.byte	$56
	.byte	$A6
	.byte	$69
	.byte	$59
	.byte	$59
	.byte	$88
	.byte	$22
	.byte	$56
	.byte	$56
	.byte	$22
	.byte	$88
	.byte	$59
	.byte	$59
	.byte	$88
	.byte	$22
	.byte	$05
	.byte	$05
	.byte	$0A
	.byte	$0A
	.byte	$05
	.byte	$05
	.byte	$88
	.byte	$0A
	.byte	$02
	.byte	$06
	.byte	$0A
	.byte	$02
	.byte	$00
_map:
	.byte	$01
	.byte	$F1
	.byte	$01
	.byte	$A1
	.byte	$81
	.byte	$01
	.byte	$1B
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$96
	.byte	$98
	.byte	$01
	.byte	$17
	.byte	$9C
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$01
	.byte	$0A
	.byte	$99
	.byte	$81
	.byte	$9A
	.byte	$81
	.byte	$01
	.byte	$05
	.byte	$9B
	.byte	$81
	.byte	$01
	.byte	$02
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$9D
	.byte	$A0
	.byte	$81
	.byte	$A3
	.byte	$81
	.byte	$01
	.byte	$02
	.byte	$A7
	.byte	$A8
	.byte	$AB
	.byte	$AC
	.byte	$AF
	.byte	$B0
	.byte	$B3
	.byte	$B4
	.byte	$81
	.byte	$01
	.byte	$02
	.byte	$B8
	.byte	$BB
	.byte	$BC
	.byte	$BE
	.byte	$BF
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$9E
	.byte	$9F
	.byte	$A1
	.byte	$A2
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$81
	.byte	$A9
	.byte	$AA
	.byte	$AD
	.byte	$AE
	.byte	$B1
	.byte	$B2
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$81
	.byte	$B9
	.byte	$BA
	.byte	$BD
	.byte	$81
	.byte	$01
	.byte	$02
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$01
	.byte	$08
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$81
	.byte	$01
	.byte	$06
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$01
	.byte	$14
	.byte	$C8
	.byte	$81
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$C9
	.byte	$CA
	.byte	$81
	.byte	$81
	.byte	$C8
	.byte	$81
	.byte	$01
	.byte	$02
	.byte	$CD
	.byte	$CE
	.byte	$01
	.byte	$06
	.byte	$D0
	.byte	$81
	.byte	$01
	.byte	$05
	.byte	$C8
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$CB
	.byte	$CC
	.byte	$81
	.byte	$81
	.byte	$C8
	.byte	$81
	.byte	$81
	.byte	$CF
	.byte	$81
	.byte	$81
	.byte	$CE
	.byte	$01
	.byte	$02
	.byte	$81
	.byte	$81
	.byte	$D1
	.byte	$81
	.byte	$01
	.byte	$06
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$81
	.byte	$D2
	.byte	$D3
	.byte	$81
	.byte	$01
	.byte	$03
	.byte	$D9
	.byte	$DA
	.byte	$81
	.byte	$01
	.byte	$04
	.byte	$DA
	.byte	$DC
	.byte	$81
	.byte	$01
	.byte	$02
	.byte	$BE
	.byte	$BF
	.byte	$81
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$01
	.byte	$02
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$81
	.byte	$81
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DA
	.byte	$DC
	.byte	$81
	.byte	$01
	.byte	$08
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$C8
	.byte	$81
	.byte	$01
	.byte	$03
	.byte	$DD
	.byte	$DE
	.byte	$E0
	.byte	$E0
	.byte	$E3
	.byte	$81
	.byte	$E6
	.byte	$81
	.byte	$01
	.byte	$04
	.byte	$E3
	.byte	$E0
	.byte	$EC
	.byte	$92
	.byte	$92
	.byte	$EC
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$01
	.byte	$02
	.byte	$C8
	.byte	$81
	.byte	$CD
	.byte	$D0
	.byte	$DF
	.byte	$E1
	.byte	$E2
	.byte	$E4
	.byte	$E5
	.byte	$E7
	.byte	$E8
	.byte	$E9
	.byte	$E9
	.byte	$EA
	.byte	$E5
	.byte	$EB
	.byte	$01
	.byte	$03
	.byte	$E5
	.byte	$90
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$CE
	.byte	$CE
	.byte	$D0
	.byte	$81
	.byte	$81
	.byte	$D9
	.byte	$DC
	.byte	$81
	.byte	$01
	.byte	$04
	.byte	$94
	.byte	$81
	.byte	$95
	.byte	$95
	.byte	$81
	.byte	$01
	.byte	$03
	.byte	$C8
	.byte	$81
	.byte	$01
	.byte	$02
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$81
	.byte	$D1
	.byte	$B4
	.byte	$81
	.byte	$01
	.byte	$05
	.byte	$93
	.byte	$8A
	.byte	$81
	.byte	$8E
	.byte	$B4
	.byte	$81
	.byte	$8F
	.byte	$81
	.byte	$01
	.byte	$02
	.byte	$CD
	.byte	$CE
	.byte	$01
	.byte	$02
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$01
	.byte	$02
	.byte	$D0
	.byte	$81
	.byte	$01
	.byte	$05
	.byte	$8A
	.byte	$8A
	.byte	$89
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$88
	.byte	$81
	.byte	$81
	.byte	$CD
	.byte	$81
	.byte	$87
	.byte	$85
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$01
	.byte	$03
	.byte	$CE
	.byte	$01
	.byte	$03
	.byte	$D0
	.byte	$81
	.byte	$01
	.byte	$06
	.byte	$CD
	.byte	$CE
	.byte	$CE
	.byte	$81
	.byte	$81
	.byte	$86
	.byte	$84
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$97
	.byte	$81
	.byte	$01
	.byte	$08
	.byte	$D0
	.byte	$CD
	.byte	$CE
	.byte	$01
	.byte	$02
	.byte	$D0
	.byte	$CD
	.byte	$81
	.byte	$01
	.byte	$07
	.byte	$97
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$82
	.byte	$98
	.byte	$01
	.byte	$17
	.byte	$83
	.byte	$81
	.byte	$F1
	.byte	$01
	.byte	$03
	.byte	$81
	.byte	$01
	.byte	$1B
	.byte	$F1
	.byte	$01
	.byte	$A1
	.byte	$00
	.byte	$01
	.byte	$3E
	.byte	$00
	.byte	$01
	.byte	$00
_forest_level_01:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$A0
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$08
	.byte	$08
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$08
	.byte	$09
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$18
	.byte	$18
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$10
	.byte	$01
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$10
	.byte	$01
	.byte	$07
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$16
	.byte	$17
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$10
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$10
	.byte	$01
	.byte	$09
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$10
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$01
	.byte	$11
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$09
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$10
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$19
	.byte	$09
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$19
	.byte	$09
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$18
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$19
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$18
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$19
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$19
	.byte	$09
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$15
	.byte	$08
	.byte	$18
	.byte	$08
	.byte	$09
	.byte	$19
	.byte	$09
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$10
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$18
	.byte	$19
	.byte	$09
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$07
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$0F
	.byte	$10
	.byte	$10
	.byte	$06
	.byte	$07
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$16
	.byte	$17
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$10
	.byte	$16
	.byte	$17
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$11
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$0F
	.byte	$11
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$15
	.byte	$10
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$15
	.byte	$10
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$15
	.byte	$10
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$15
	.byte	$10
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$09
	.byte	$10
	.byte	$01
	.byte	$17
	.byte	$08
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$18
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$20
	.byte	$55
	.byte	$01
	.byte	$06
	.byte	$51
	.byte	$55
	.byte	$A5
	.byte	$A5
	.byte	$55
	.byte	$55
	.byte	$A5
	.byte	$A5
	.byte	$55
	.byte	$01
	.byte	$03
	.byte	$5A
	.byte	$5A
	.byte	$55
	.byte	$01
	.byte	$04
	.byte	$F5
	.byte	$01
	.byte	$03
	.byte	$55
	.byte	$01
	.byte	$02
	.byte	$65
	.byte	$5F
	.byte	$01
	.byte	$03
	.byte	$95
	.byte	$55
	.byte	$01
	.byte	$09
	.byte	$F5
	.byte	$01
	.byte	$05
	.byte	$55
	.byte	$05
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$01
	.byte	$00
_forest_level_02:
	.byte	$06
	.byte	$00
	.byte	$06
	.byte	$A0
	.byte	$05
	.byte	$06
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$18
	.byte	$19
	.byte	$10
	.byte	$06
	.byte	$17
	.byte	$18
	.byte	$19
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$0C
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$11
	.byte	$06
	.byte	$13
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$0D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$1C
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$06
	.byte	$0B
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$1D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$0C
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$10
	.byte	$06
	.byte	$0B
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$0D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$1C
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$0B
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$1D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$0C
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$04
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$04
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$0D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$1C
	.byte	$10
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$06
	.byte	$05
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$1D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$0C
	.byte	$10
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$04
	.byte	$10
	.byte	$04
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$0D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$1C
	.byte	$10
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$04
	.byte	$01
	.byte	$10
	.byte	$04
	.byte	$04
	.byte	$10
	.byte	$01
	.byte	$04
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$1D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$0C
	.byte	$10
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$07
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$0D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$1C
	.byte	$10
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$06
	.byte	$04
	.byte	$04
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$04
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$1D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$0C
	.byte	$10
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$06
	.byte	$04
	.byte	$04
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$04
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$0D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$1C
	.byte	$10
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$04
	.byte	$10
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$1D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$0C
	.byte	$10
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$10
	.byte	$04
	.byte	$06
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$04
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$06
	.byte	$04
	.byte	$10
	.byte	$0D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$1C
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$10
	.byte	$06
	.byte	$09
	.byte	$04
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$1D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$0C
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$10
	.byte	$06
	.byte	$0B
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$0D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$1C
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$06
	.byte	$0B
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$11
	.byte	$10
	.byte	$1D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$0C
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$11
	.byte	$06
	.byte	$0B
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$0D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$1C
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$11
	.byte	$06
	.byte	$13
	.byte	$10
	.byte	$06
	.byte	$02
	.byte	$1D
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$08
	.byte	$09
	.byte	$10
	.byte	$06
	.byte	$17
	.byte	$08
	.byte	$09
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$1A
	.byte	$1B
	.byte	$18
	.byte	$19
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$06
	.byte	$1D
	.byte	$00
	.byte	$06
	.byte	$28
	.byte	$55
	.byte	$F5
	.byte	$06
	.byte	$05
	.byte	$55
	.byte	$DD
	.byte	$55
	.byte	$15
	.byte	$05
	.byte	$05
	.byte	$45
	.byte	$55
	.byte	$77
	.byte	$DD
	.byte	$55
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$55
	.byte	$77
	.byte	$DD
	.byte	$55
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$55
	.byte	$77
	.byte	$DD
	.byte	$55
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$55
	.byte	$77
	.byte	$5D
	.byte	$F5
	.byte	$06
	.byte	$05
	.byte	$57
	.byte	$05
	.byte	$06
	.byte	$06
	.byte	$05
	.byte	$06
	.byte	$00
_title_screen:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$29
	.byte	$53
	.byte	$6B
	.byte	$75
	.byte	$6C
	.byte	$6C
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$51
	.byte	$75
	.byte	$65
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$B3
	.byte	$50
	.byte	$72
	.byte	$65
	.byte	$73
	.byte	$73
	.byte	$00
	.byte	$53
	.byte	$74
	.byte	$61
	.byte	$72
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$32
	.byte	$54
	.byte	$68
	.byte	$65
	.byte	$00
	.byte	$6F
	.byte	$6C
	.byte	$64
	.byte	$00
	.byte	$67
	.byte	$61
	.byte	$6D
	.byte	$65
	.byte	$00
	.byte	$6D
	.byte	$61
	.byte	$6B
	.byte	$65
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$33
	.byte	$40
	.byte	$32
	.byte	$30
	.byte	$32
	.byte	$32
	.byte	$00
	.byte	$01
	.byte	$8B
	.byte	$00
	.byte	$01
	.byte	$00
_pal_cemetery_bg:
	.byte	$0F
	.byte	$00
	.byte	$3D
	.byte	$08
	.byte	$0F
	.byte	$08
	.byte	$18
	.byte	$22
	.byte	$0F
	.byte	$00
	.byte	$18
	.byte	$10
	.byte	$0F
	.byte	$15
	.byte	$20
	.byte	$09
_pal_forest_bg:
	.byte	$0F
	.byte	$15
	.byte	$20
	.byte	$09
	.byte	$0F
	.byte	$29
	.byte	$1A
	.byte	$09
	.byte	$0F
	.byte	$08
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$37
	.byte	$17
	.byte	$09
_pal_altar_spr:
	.byte	$10
	.byte	$20
	.byte	$15
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$0F
	.byte	$38
	.byte	$10
	.byte	$17
	.byte	$06
	.byte	$07
	.byte	$10
	.byte	$09
	.byte	$19
	.byte	$29
_pal_cemetery_spr:
	.byte	$0F
	.byte	$20
	.byte	$15
	.byte	$12
	.byte	$0F
	.byte	$00
	.byte	$0F
	.byte	$38
	.byte	$0F
	.byte	$17
	.byte	$06
	.byte	$07
	.byte	$0F
	.byte	$04
	.byte	$23
	.byte	$0C
_pal_altar_bg:
	.byte	$01
	.byte	$0F
	.byte	$00
	.byte	$22
	.byte	$01
	.byte	$11
	.byte	$3D
	.byte	$22
	.byte	$01
	.byte	$0F
	.byte	$37
	.byte	$28
	.byte	$01
	.byte	$0F
	.byte	$07
	.byte	$11
_angelic_idle1:
	.byte	$00
	.byte	$00
	.byte	$D3
	.byte	$03
	.byte	$07
	.byte	$00
	.byte	$D3
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$C2
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$C3
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$C0
	.byte	$03
	.byte	$08
	.byte	$10
	.byte	$C1
	.byte	$03
	.byte	$80
_angelic_idle2:
	.byte	$00
	.byte	$01
	.byte	$D3
	.byte	$03
	.byte	$07
	.byte	$01
	.byte	$D3
	.byte	$43
	.byte	$00
	.byte	$09
	.byte	$C2
	.byte	$03
	.byte	$08
	.byte	$09
	.byte	$C3
	.byte	$03
	.byte	$00
	.byte	$11
	.byte	$C0
	.byte	$03
	.byte	$08
	.byte	$11
	.byte	$C1
	.byte	$03
	.byte	$80
_angelic_idle3:
	.byte	$00
	.byte	$02
	.byte	$D3
	.byte	$03
	.byte	$07
	.byte	$02
	.byte	$D3
	.byte	$43
	.byte	$00
	.byte	$0A
	.byte	$C2
	.byte	$03
	.byte	$08
	.byte	$0A
	.byte	$C3
	.byte	$03
	.byte	$00
	.byte	$12
	.byte	$C0
	.byte	$03
	.byte	$08
	.byte	$12
	.byte	$C1
	.byte	$03
	.byte	$80
_angelic_face:
	.byte	$FE
	.byte	$0C
	.byte	$D2
	.byte	$03
	.byte	$06
	.byte	$00
	.byte	$D0
	.byte	$03
	.byte	$0E
	.byte	$00
	.byte	$D1
	.byte	$03
	.byte	$06
	.byte	$08
	.byte	$E0
	.byte	$03
	.byte	$0E
	.byte	$08
	.byte	$E1
	.byte	$03
	.byte	$16
	.byte	$00
	.byte	$E3
	.byte	$03
	.byte	$06
	.byte	$10
	.byte	$F0
	.byte	$03
	.byte	$0E
	.byte	$12
	.byte	$F1
	.byte	$03
	.byte	$0E
	.byte	$10
	.byte	$F2
	.byte	$03
	.byte	$16
	.byte	$0F
	.byte	$F3
	.byte	$03
	.byte	$16
	.byte	$08
	.byte	$E2
	.byte	$03
	.byte	$80
_angelic_animation_index:
	.byte	$00
	.byte	$05
_angelic_animation:
	.addr	_angelic_idle1
	.addr	_angelic_idle2
	.addr	_angelic_idle3
	.addr	_angelic_idle3
	.addr	_angelic_idle2
_HorizontalPaddleSpr:
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$80
_VerticalPaddleSpr:
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$06
	.byte	$00
	.byte	$80
_tree:
	.byte	$F6
	.byte	$DF
	.byte	$0C
	.byte	$02
	.byte	$F6
	.byte	$E7
	.byte	$1C
	.byte	$02
	.byte	$EE
	.byte	$E7
	.byte	$1B
	.byte	$02
	.byte	$E6
	.byte	$E7
	.byte	$1A
	.byte	$02
	.byte	$0E
	.byte	$E7
	.byte	$1F
	.byte	$02
	.byte	$F6
	.byte	$EF
	.byte	$2C
	.byte	$02
	.byte	$FE
	.byte	$EF
	.byte	$2D
	.byte	$02
	.byte	$06
	.byte	$EF
	.byte	$2E
	.byte	$02
	.byte	$0E
	.byte	$EF
	.byte	$2F
	.byte	$02
	.byte	$F6
	.byte	$F7
	.byte	$3C
	.byte	$02
	.byte	$FE
	.byte	$F7
	.byte	$3D
	.byte	$02
	.byte	$06
	.byte	$F7
	.byte	$3E
	.byte	$02
	.byte	$F6
	.byte	$FF
	.byte	$4C
	.byte	$02
	.byte	$FE
	.byte	$FF
	.byte	$4D
	.byte	$02
	.byte	$06
	.byte	$FF
	.byte	$4E
	.byte	$02
	.byte	$0E
	.byte	$FF
	.byte	$4F
	.byte	$02
	.byte	$F6
	.byte	$07
	.byte	$5C
	.byte	$02
	.byte	$FE
	.byte	$07
	.byte	$5D
	.byte	$02
	.byte	$06
	.byte	$07
	.byte	$3C
	.byte	$42
	.byte	$FE
	.byte	$E7
	.byte	$1D
	.byte	$02
	.byte	$EE
	.byte	$0F
	.byte	$6B
	.byte	$02
	.byte	$F6
	.byte	$0F
	.byte	$6C
	.byte	$02
	.byte	$FE
	.byte	$0F
	.byte	$6D
	.byte	$02
	.byte	$06
	.byte	$0F
	.byte	$6E
	.byte	$02
	.byte	$80
_crow_left:
	.byte	$F8
	.byte	$F9
	.byte	$22
	.byte	$41
	.byte	$F8
	.byte	$FE
	.byte	$25
	.byte	$01
	.byte	$00
	.byte	$FE
	.byte	$26
	.byte	$01
	.byte	$80
_crow_left_skwak:
	.byte	$F6
	.byte	$FA
	.byte	$21
	.byte	$01
	.byte	$F8
	.byte	$FE
	.byte	$23
	.byte	$01
	.byte	$00
	.byte	$FE
	.byte	$24
	.byte	$01
	.byte	$80
_crow_right:
	.byte	$00
	.byte	$F9
	.byte	$22
	.byte	$01
	.byte	$00
	.byte	$FE
	.byte	$25
	.byte	$41
	.byte	$F8
	.byte	$FE
	.byte	$26
	.byte	$41
	.byte	$80
_crow_right_skwak:
	.byte	$02
	.byte	$FA
	.byte	$21
	.byte	$41
	.byte	$00
	.byte	$FE
	.byte	$23
	.byte	$41
	.byte	$F8
	.byte	$FE
	.byte	$24
	.byte	$41
	.byte	$80
_door1:
	.byte	$F8
	.byte	$F0
	.byte	$30
	.byte	$41
	.byte	$F8
	.byte	$F8
	.byte	$40
	.byte	$41
	.byte	$F8
	.byte	$00
	.byte	$50
	.byte	$41
	.byte	$00
	.byte	$F0
	.byte	$30
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$40
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$01
	.byte	$80
_door2:
	.byte	$F8
	.byte	$F0
	.byte	$31
	.byte	$41
	.byte	$F8
	.byte	$F8
	.byte	$41
	.byte	$41
	.byte	$F8
	.byte	$00
	.byte	$51
	.byte	$41
	.byte	$F8
	.byte	$08
	.byte	$61
	.byte	$41
	.byte	$00
	.byte	$F0
	.byte	$31
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$41
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$61
	.byte	$01
	.byte	$80
_door3:
	.byte	$F8
	.byte	$F0
	.byte	$32
	.byte	$41
	.byte	$F8
	.byte	$F8
	.byte	$42
	.byte	$41
	.byte	$F8
	.byte	$00
	.byte	$52
	.byte	$41
	.byte	$F8
	.byte	$08
	.byte	$62
	.byte	$41
	.byte	$00
	.byte	$F0
	.byte	$32
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$42
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$52
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$62
	.byte	$01
	.byte	$80
_door4:
	.byte	$F8
	.byte	$F0
	.byte	$33
	.byte	$41
	.byte	$F8
	.byte	$F8
	.byte	$43
	.byte	$41
	.byte	$F8
	.byte	$00
	.byte	$43
	.byte	$41
	.byte	$F8
	.byte	$08
	.byte	$53
	.byte	$41
	.byte	$00
	.byte	$F0
	.byte	$33
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$43
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$43
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$53
	.byte	$01
	.byte	$80
_torch_flicker1:
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$02
	.byte	$80
_torch_flicker2:
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$02
	.byte	$80
_torch_flicker3:
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$02
	.byte	$80
_torch_flicker4:
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$02
	.byte	$80
_torch_animation_index:
	.byte	$00
	.byte	$04
_torch_animation:
	.addr	_torch_flicker1
	.addr	_torch_flicker2
	.addr	_torch_flicker3
	.addr	_torch_flicker4
_skeleton_right_still:
	.byte	$01
	.byte	$00
	.byte	$DD
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$D8
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$D9
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$DC
	.byte	$00
	.byte	$80
_skeleton_right_walk1:
	.byte	$01
	.byte	$FF
	.byte	$DD
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$DA
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$D9
	.byte	$00
	.byte	$08
	.byte	$03
	.byte	$DC
	.byte	$00
	.byte	$80
_skeleton_right_walk2:
	.byte	$02
	.byte	$00
	.byte	$DD
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$DB
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$D9
	.byte	$00
	.byte	$09
	.byte	$04
	.byte	$DC
	.byte	$00
	.byte	$80
_skeleton_right_walk3:
	.byte	$01
	.byte	$0C
	.byte	$DE
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$D9
	.byte	$00
	.byte	$09
	.byte	$02
	.byte	$DC
	.byte	$00
	.byte	$02
	.byte	$FF
	.byte	$DD
	.byte	$00
	.byte	$80
_skeleton_right_walk4:
	.byte	$01
	.byte	$0C
	.byte	$DF
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$D9
	.byte	$00
	.byte	$09
	.byte	$03
	.byte	$DC
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$DD
	.byte	$00
	.byte	$80
_skeleton_right_turn:
	.byte	$FF
	.byte	$00
	.byte	$DD
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$D8
	.byte	$40
	.byte	$00
	.byte	$05
	.byte	$D9
	.byte	$40
	.byte	$F8
	.byte	$04
	.byte	$DC
	.byte	$40
	.byte	$80
_skeleton_left_still:
	.byte	$FF
	.byte	$00
	.byte	$DD
	.byte	$40
	.byte	$00
	.byte	$0C
	.byte	$D8
	.byte	$40
	.byte	$00
	.byte	$05
	.byte	$D9
	.byte	$40
	.byte	$F8
	.byte	$04
	.byte	$DC
	.byte	$40
	.byte	$80
_skeleton_left_walk1:
	.byte	$FF
	.byte	$FF
	.byte	$DD
	.byte	$40
	.byte	$00
	.byte	$0C
	.byte	$DA
	.byte	$40
	.byte	$00
	.byte	$04
	.byte	$D9
	.byte	$40
	.byte	$F8
	.byte	$03
	.byte	$DC
	.byte	$40
	.byte	$80
_skeleton_left_walk2:
	.byte	$FE
	.byte	$00
	.byte	$DD
	.byte	$40
	.byte	$00
	.byte	$0C
	.byte	$DB
	.byte	$40
	.byte	$FF
	.byte	$05
	.byte	$D9
	.byte	$40
	.byte	$F7
	.byte	$04
	.byte	$DC
	.byte	$40
	.byte	$80
_skeleton_left_walk3:
	.byte	$FF
	.byte	$0C
	.byte	$DE
	.byte	$40
	.byte	$FF
	.byte	$04
	.byte	$D9
	.byte	$40
	.byte	$F7
	.byte	$02
	.byte	$DC
	.byte	$40
	.byte	$FE
	.byte	$FF
	.byte	$DD
	.byte	$40
	.byte	$80
_skeleton_left_walk4:
	.byte	$00
	.byte	$0C
	.byte	$DF
	.byte	$40
	.byte	$00
	.byte	$05
	.byte	$D9
	.byte	$40
	.byte	$F8
	.byte	$03
	.byte	$DC
	.byte	$40
	.byte	$FF
	.byte	$00
	.byte	$DD
	.byte	$40
	.byte	$80
_skeleton_left_turn:
	.byte	$01
	.byte	$00
	.byte	$DD
	.byte	$40
	.byte	$00
	.byte	$0C
	.byte	$D8
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$D9
	.byte	$00
	.byte	$08
	.byte	$04
	.byte	$DC
	.byte	$00
	.byte	$80
_skeleton_dying_right1:
	.byte	$01
	.byte	$0C
	.byte	$DF
	.byte	$00
	.byte	$01
	.byte	$07
	.byte	$D9
	.byte	$00
	.byte	$09
	.byte	$04
	.byte	$DC
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$DD
	.byte	$00
	.byte	$80
_skeleton_dying_right2:
	.byte	$01
	.byte	$09
	.byte	$D9
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$DF
	.byte	$00
	.byte	$09
	.byte	$06
	.byte	$DC
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$DD
	.byte	$00
	.byte	$80
_skeleton_dying_right3:
	.byte	$01
	.byte	$0B
	.byte	$D9
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$DF
	.byte	$00
	.byte	$09
	.byte	$08
	.byte	$DC
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$DD
	.byte	$00
	.byte	$80
_skeleton_dying_right4:
	.byte	$00
	.byte	$0C
	.byte	$D9
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$DF
	.byte	$00
	.byte	$09
	.byte	$0C
	.byte	$DC
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$DD
	.byte	$00
	.byte	$80
_skeleton_dying_right5:
	.byte	$FF
	.byte	$0C
	.byte	$D9
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$DF
	.byte	$00
	.byte	$09
	.byte	$0C
	.byte	$DC
	.byte	$00
	.byte	$06
	.byte	$09
	.byte	$DD
	.byte	$C0
	.byte	$80
_skeleton_dying_right6:
	.byte	$FE
	.byte	$0C
	.byte	$D9
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$DF
	.byte	$00
	.byte	$09
	.byte	$0C
	.byte	$DC
	.byte	$00
	.byte	$07
	.byte	$0C
	.byte	$DD
	.byte	$00
	.byte	$80
_skeleton_dying_right7:
	.byte	$FE
	.byte	$0C
	.byte	$D9
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$DF
	.byte	$00
	.byte	$09
	.byte	$0C
	.byte	$DC
	.byte	$00
	.byte	$09
	.byte	$0C
	.byte	$DD
	.byte	$80
	.byte	$80
_skeleton_dying_left1:
	.byte	$01
	.byte	$0C
	.byte	$DF
	.byte	$40
	.byte	$01
	.byte	$07
	.byte	$D9
	.byte	$40
	.byte	$F9
	.byte	$04
	.byte	$DC
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$DD
	.byte	$40
	.byte	$80
_skeleton_dying_left2:
	.byte	$01
	.byte	$09
	.byte	$D9
	.byte	$40
	.byte	$01
	.byte	$0C
	.byte	$DF
	.byte	$40
	.byte	$F9
	.byte	$06
	.byte	$DC
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$DD
	.byte	$40
	.byte	$80
_skeleton_dying_left3:
	.byte	$01
	.byte	$0B
	.byte	$D9
	.byte	$40
	.byte	$01
	.byte	$0C
	.byte	$DF
	.byte	$40
	.byte	$F9
	.byte	$08
	.byte	$DC
	.byte	$40
	.byte	$00
	.byte	$03
	.byte	$DD
	.byte	$40
	.byte	$80
_skeleton_dying_left4:
	.byte	$02
	.byte	$0C
	.byte	$D9
	.byte	$40
	.byte	$01
	.byte	$0C
	.byte	$DF
	.byte	$40
	.byte	$F9
	.byte	$0C
	.byte	$DC
	.byte	$40
	.byte	$00
	.byte	$07
	.byte	$DD
	.byte	$40
	.byte	$80
_skeleton_dying_left5:
	.byte	$03
	.byte	$0C
	.byte	$D9
	.byte	$40
	.byte	$01
	.byte	$0C
	.byte	$DF
	.byte	$40
	.byte	$F9
	.byte	$0C
	.byte	$DC
	.byte	$40
	.byte	$FC
	.byte	$09
	.byte	$DD
	.byte	$80
	.byte	$80
_skeleton_dying_left6:
	.byte	$04
	.byte	$0C
	.byte	$D9
	.byte	$40
	.byte	$01
	.byte	$0C
	.byte	$DF
	.byte	$40
	.byte	$F9
	.byte	$0C
	.byte	$DC
	.byte	$40
	.byte	$FB
	.byte	$0C
	.byte	$DD
	.byte	$40
	.byte	$80
_skeleton_dying_left7:
	.byte	$04
	.byte	$0C
	.byte	$D9
	.byte	$40
	.byte	$01
	.byte	$0C
	.byte	$DF
	.byte	$40
	.byte	$F9
	.byte	$0C
	.byte	$DC
	.byte	$40
	.byte	$F9
	.byte	$0C
	.byte	$DD
	.byte	$C0
	.byte	$80
_skeleton_animation_index:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$04
	.byte	$04
	.byte	$0C
	.byte	$07
	.byte	$1A
	.byte	$01
_skeleton_animation:
	.addr	_skeleton_left_still
	.addr	_skeleton_right_still
	.addr	_skeleton_left_turn
	.addr	_skeleton_right_turn
	.addr	_skeleton_left_walk1
	.addr	_skeleton_left_walk2
	.addr	_skeleton_left_walk3
	.addr	_skeleton_left_walk4
	.addr	_skeleton_right_walk1
	.addr	_skeleton_right_walk2
	.addr	_skeleton_right_walk3
	.addr	_skeleton_right_walk4
	.addr	_skeleton_dying_left1
	.addr	_skeleton_dying_left2
	.addr	_skeleton_dying_left3
	.addr	_skeleton_dying_left4
	.addr	_skeleton_dying_left5
	.addr	_skeleton_dying_left6
	.addr	_skeleton_dying_left7
	.addr	_skeleton_dying_right1
	.addr	_skeleton_dying_right2
	.addr	_skeleton_dying_right3
	.addr	_skeleton_dying_right4
	.addr	_skeleton_dying_right5
	.addr	_skeleton_dying_right6
	.addr	_skeleton_dying_right7
	.addr	_skeleton_dying_left7
	.addr	_skeleton_dying_right7
_skull_rotate_left1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
_skull_rotate_left2:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$40
	.byte	$80
_skull_rotate_left3:
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$80
	.byte	$80
_skull_rotate_left4:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$80
_skull_rotate_left5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$80
_skull_rotate_left6:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$80
_skull_rotate_right1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$80
_skull_rotate_right2:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$80
_skull_rotate_right3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$80
_skull_rotate_right4:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$80
_skull_rotate_right5:
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$80
	.byte	$80
_skull_rotate_right6:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$40
	.byte	$80
_skull_animation_index:
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$06
_skull_animation:
	.addr	_skull_rotate_left1
	.addr	_skull_rotate_right1
	.addr	_skull_rotate_left1
	.addr	_skull_rotate_left2
	.addr	_skull_rotate_left3
	.addr	_skull_rotate_left4
	.addr	_skull_rotate_left5
	.addr	_skull_rotate_left6
	.addr	_skull_rotate_right1
	.addr	_skull_rotate_right2
	.addr	_skull_rotate_right3
	.addr	_skull_rotate_right4
	.addr	_skull_rotate_right5
	.addr	_skull_rotate_right6
.segment	"BANK0"
.segment	"CODE"

.segment	"BSS"

_bankLevel:
	.res	1,$00
_bankBuffer:
	.res	10,$00
.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_pad_index:
	.res	1,$00
_temp_y_col:
	.res	1,$00
_temp_x_col:
	.res	1,$00
_chr_4_index:
	.res	1,$00
_chr_5_index:
	.res	1,$00
_i:
	.res	1,$00
_param1:
	.res	1,$00
_param2:
	.res	1,$00
_param3:
	.res	1,$00
_temp:
	.res	1,$00
_temp2:
	.res	1,$00
_temp_speed:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_backup_col_type:
	.res	1,$00
_skull_launched:
	.res	1,$00
_p1_health:
	.res	1,$00
_p1_max_health:
	.res	1,$00
_brick_counter:
	.res	1,$00
_tombstone_count:
	.res	1,$00
_game_state:
	.res	1,$00
_current_level:
	.res	1,$00
_paddle_count:
	.res	1,$00
_enemy_count:
	.res	1,$00
_story_step:
	.res	1,$00
_collision_index:
	.res	2,$00
_backup_col_index:
	.res	2,$00
_backup_nt_index:
	.res	2,$00
.segment	"XRAM"
_wram_array:
	.res	8192,$00
.segment	"BSS"
_c_map:
	.res	368,$00
_actors:
	.res	200,$00

; ---------------------------------------------------------------
; void __near__ banked_call (unsigned char bankId, void (*method)(void))
; ---------------------------------------------------------------

.segment	"STARTUP"

.proc	_banked_call: near

.segment	"STARTUP"

;
; void banked_call(unsigned char bankId, void (*method)(void)) {
;
	jsr     pushax
;
; bank_push(bankId);
;
	ldy     #$02
	lda     (sp),y
	jsr     _bank_push
;
; (*method)();
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     callax
;
; bank_pop();
;
	jsr     _bank_pop
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ bank_push (unsigned char bankId)
; ---------------------------------------------------------------

.segment	"STARTUP"

.proc	_bank_push: near

.segment	"STARTUP"

;
; void bank_push(unsigned char bankId) {
;
	jsr     pusha
;
; bankBuffer[bankLevel] = bankId;
;
	ldy     #$00
	lda     (sp),y
	ldy     _bankLevel
	sta     _bankBuffer,y
;
; ++bankLevel;
;
	inc     _bankLevel
;
; set_prg_8000(bankId);
;
	ldy     #$00
	lda     (sp),y
	jsr     _set_prg_8000
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ bank_pop (void)
; ---------------------------------------------------------------

.segment	"STARTUP"

.proc	_bank_pop: near

.segment	"STARTUP"

;
; --bankLevel;
;
	dec     _bankLevel
;
; if (bankLevel > 0) {
;
	beq     L0002
;
; set_prg_8000(bankBuffer[bankLevel-1]);
;
	ldx     #$00
	lda     _bankLevel
	sec
	sbc     #$01
	bcs     L0003
	dex
L0003:	sta     ptr1
	txa
	clc
	adc     #>(_bankBuffer)
	sta     ptr1+1
	ldy     #<(_bankBuffer)
	lda     (ptr1),y
	jmp     _set_prg_8000
;
; }
;
L0002:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_skeletons (void)
; ---------------------------------------------------------------

.segment	"BANK0"

.proc	_init_skeletons: near

.segment	"BANK0"

;
; enemy_count = 2;
;
	lda     #$02
	sta     _enemy_count
;
; for (i = 6; i < 8; ++i) {
;
	lda     #$06
	sta     _i
L001E:	lda     _i
	cmp     #$08
	bcc     L001F
;
; }
;
	rts
;
; if (i == 6) {
;
L001F:	cmp     #$06
	bne     L0006
;
; actors.x[i] = 40;
;
	ldy     _i
	lda     #$28
	sta     _actors,y
;
; actors.y[i] = 72;
;
	ldy     _i
	lda     #$48
	sta     _actors+10,y
;
; actors.xDir[i] = LEFT;
;
	ldy     _i
	lda     #$FF
;
; } else {
;
	jmp     L001D
;
; actors.x[i] = 160;
;
L0006:	ldy     _i
	lda     #$A0
	sta     _actors,y
;
; actors.y[i] = 104;
;
	ldy     _i
	lda     #$68
	sta     _actors+10,y
;
; actors.xDir[i] = RIGHT;
;
	ldy     _i
	lda     #$01
L001D:	sta     _actors+60,y
;
; actors.width[i] = 0x04;
;
	ldy     _i
	lda     #$04
	sta     _actors+20,y
;
; actors.height[i] = 0x14;
;
	ldy     _i
	lda     #$14
	sta     _actors+30,y
;
; actors.bbox_x[i] = 0x01;
;
	ldy     _i
	lda     #$01
	sta     _actors+40,y
;
; actors.bbox_y[i] = 0x02;
;
	ldy     _i
	lda     #$02
	sta     _actors+50,y
;
; actors.yDir[i] = NULL;
;
	ldy     _i
	lda     #$00
	sta     _actors+70,y
;
; actors.xSpeed[i] = 10;
;
	ldy     _i
	lda     #$0A
	sta     _actors+80,y
;
; actors.ySpeed[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _actors+90,y
;
; actors.xVelocity[i] = 0;
;
	ldy     _i
	sta     _actors+120,y
;
; actors.yVelocity[i] = 0;
;
	ldy     _i
	sta     _actors+130,y
;
; actors.minSpeed[i] = 0;
;
	ldy     _i
	sta     _actors+140,y
;
; actors.maxSpeed[i] = 20;
;
	ldy     _i
	lda     #$14
	sta     _actors+150,y
;
; actors.counter[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _actors+160,y
;
; actors.animation_speed[i] = 16;
;
	ldy     _i
	lda     #$10
	sta     _actors+170,y
;
; actors.current_frame[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _actors+180,y
;
; actors.state[i] = WALKING;
;
	ldy     _i
	lda     #$02
	sta     _actors+190,y
;
; for (i = 6; i < 8; ++i) {
;
	inc     _i
	jmp     L001E

.endproc

; ---------------------------------------------------------------
; void __near__ debug (unsigned char value)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_debug: near

.segment	"CODE"

;
; void debug(unsigned char value) {
;
	jsr     pusha
;
; one_vram_buffer(value, NTADR_A(1, 1));
;
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	ldx     #$20
	lda     #$21
	jsr     _one_vram_buffer
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ animate_skeleton (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_animate_skeleton: near

.segment	"CODE"

;
; for (i = 6; i < 8; ++i) {
;
	lda     #$06
	sta     _i
L0026:	lda     _i
	cmp     #$08
	bcc     L002A
;
; }
;
	rts
;
; param1 = i;  // actor index
;
L002A:	sta     _param1
;
; if (actors.state[i] != DEAD && actors.state[i] != DYING) {
;
	ldy     _i
	lda     _actors+190,y
	cmp     #$04
	jeq     L0006
	ldy     _i
	lda     _actors+190,y
	cmp     #$03
	jeq     L0006
;
; temp_x = actors.x[i] + get_x_speed();
;
	ldy     _i
	lda     _actors,y
	jsr     pusha0
	jsr     _get_x_speed
	jsr     tosaddax
	sta     _temp_x
;
; temp_y_col = actors.y[i] + actors.height[i];
;
	ldy     _i
	lda     _actors+30,y
	clc
	ldy     _i
	adc     _actors+10,y
	sta     _temp_y_col
;
; temp_x_col = temp_x;
;
	lda     _temp_x
	sta     _temp_x_col
;
; if (actors.xDir[i] == RIGHT) {
;
	lda     #<(_actors+60)
	ldx     #>(_actors+60)
	clc
	adc     _i
	bcc     L0010
	inx
L0010:	ldy     #$00
	jsr     ldaidx
	cmp     #$01
	bne     L000F
;
; temp_x_col += actors.width[i];
;
	ldy     _i
	lda     _actors+20,y
	clc
	adc     _temp_x_col
	sta     _temp_x_col
;
; if (get_collision_type()) {
;
L000F:	jsr     _get_collision_type
	tax
	beq     L0012
;
; actors.current_frame[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _actors+180,y
;
; actors.counter[i] = 0;
;
	ldy     _i
	sta     _actors+160,y
;
; actors.state[i] = TURNING;
;
	ldy     _i
	lda     #$01
	sta     _actors+190,y
;
; actors.xDir[param1] = -actors.xDir[param1];
;
	lda     #<(_actors+60)
	ldx     #>(_actors+60)
	clc
	adc     _param1
	bcc     L0016
	inx
L0016:	sta     sreg
	stx     sreg+1
	lda     #<(_actors+60)
	ldx     #>(_actors+60)
	clc
	adc     _param1
	bcc     L0017
	inx
L0017:	ldy     #$00
	jsr     ldaidx
	eor     #$FF
	clc
	adc     #$01
	cmp     #$80
	sta     (sreg),y
;
; } else {
;
	jmp     L0006
;
; actors.x[i] = temp_x;
;
L0012:	ldy     _i
	lda     _temp_x
	sta     _actors,y
;
; param2 = skeleton_animation_index[actors.state[i]][0];  // animation index
;
L0006:	ldy     _i
	ldx     #$00
	lda     _actors+190,y
	asl     a
	bcc     L0022
	inx
L0022:	sta     ptr1
	txa
	clc
	adc     #>(_skeleton_animation_index)
	sta     ptr1+1
	ldy     #<(_skeleton_animation_index)
	lda     (ptr1),y
	sta     _param2
;
; param3 = skeleton_animation_index[actors.state[i]][1];  // number of frames
;
	ldy     _i
	ldx     #$00
	lda     _actors+190,y
	asl     a
	bcc     L0025
	inx
	clc
L0025:	adc     #<(_skeleton_animation_index)
	sta     ptr1
	txa
	adc     #>(_skeleton_animation_index)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _param3
;
; set_animation_info(skeleton_animation_index);
;
	lda     #<(_skeleton_animation_index)
	ldx     #>(_skeleton_animation_index)
	jsr     _set_animation_info
;
; oam_meta_spr(actors.x[param1], actors.y[param1], skeleton_animation[actors.current_frame[param1] + param2]);
;
	jsr     decsp2
	ldy     _param1
	lda     _actors,y
	ldy     #$01
	sta     (sp),y
	ldy     _param1
	lda     _actors+10,y
	ldy     #$00
	sta     (sp),y
	ldy     _param1
	ldx     #$00
	lda     _actors+180,y
	clc
	adc     _param2
	bcc     L0021
	inx
L0021:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_skeleton_animation)
	sta     ptr1
	lda     tmp1
	adc     #>(_skeleton_animation)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; for (i = 6; i < 8; ++i) {
;
	inc     _i
	jmp     L0026

.endproc

; ---------------------------------------------------------------
; void __near__ set_animation_info (const unsigned char (*array)[2])
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_animation_info: near

.segment	"CODE"

;
; void set_animation_info(const unsigned char array[][2]) {
;
	jsr     pushax
;
; if (actors.counter[param1] == actors.animation_speed[param1]) {
;
	ldy     _param1
	lda     _actors+160,y
	ldy     _param1
	cmp     _actors+170,y
	jne     L0002
;
; if ((actors.state[param1] == TURNING || actors.state[param1] == DYING) && actors.current_frame[param1] == param3 - 1) {
;
	lda     _actors+190,y
	cmp     #$01
	beq     L0020
	ldy     _param1
	lda     _actors+190,y
	cmp     #$03
	bne     L0005
L0020:	ldy     _param1
	lda     _actors+180,y
	jsr     pusha0
	lda     _param3
	sec
	sbc     #$01
	bcs     L000C
	ldx     #$FF
L000C:	jsr     tosicmp
	bne     L0005
;
; ++actors.state[param1];              // NEXT STATE
;
	lda     #<(_actors+190)
	ldx     #>(_actors+190)
	clc
	adc     _param1
	bcc     L000F
	inx
L000F:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; param2 = array[actors.state[i]][0];  // animation index
;
	ldy     _i
	ldx     #$00
	lda     _actors+190,y
	asl     a
	bcc     L001D
	inx
	clc
L001D:	ldy     #$00
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     _param2
;
; param3 = array[actors.state[i]][1];  // number of frames
;
	ldy     _i
	ldx     #$00
	lda     _actors+190,y
	asl     a
	bcc     L001E
	inx
	clc
L001E:	ldy     #$00
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1),y
	sta     _param3
;
; actors.current_frame[param1] = 0;
;
	ldy     _param1
	lda     #$00
	sta     _actors+180,y
;
; } else {
;
	jmp     L0014
;
; actors.current_frame[param1] = ++actors.current_frame[param1] % param3;
;
L0005:	lda     #<(_actors+180)
	ldx     #>(_actors+180)
	clc
	adc     _param1
	bcc     L0015
	inx
L0015:	jsr     pushax
	lda     #<(_actors+180)
	ldx     #>(_actors+180)
	clc
	adc     _param1
	bcc     L0016
	inx
L0016:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
	jsr     pusha0
	lda     _param3
	jsr     tosumoda0
	ldy     #$00
	jsr     staspidx
;
; actors.counter[param1] = 0;
;
L0014:	ldy     _param1
	lda     #$00
	sta     _actors+160,y
;
; ++actors.counter[param1];
;
L0002:	lda     #<(_actors+160)
	ldx     #>(_actors+160)
	clc
	adc     _param1
	bcc     L0018
	inx
L0018:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (actors.xDir[param1] == RIGHT) {
;
	lda     #<(_actors+60)
	ldx     #>(_actors+60)
	clc
	adc     _param1
	bcc     L0023
	inx
L0023:	jsr     ldaidx
	cmp     #$01
	bne     L0019
;
; param2 += param3;
;
	lda     _param3
	clc
	adc     _param2
	sta     _param2
;
; }
;
L0019:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ update_health (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_health: near

.segment	"CODE"

;
; if (p1_health > 0) {
;
	lda     _p1_health
	beq     L000E
;
; for (i = 0; i < p1_max_health; ++i) {
;
	lda     #$00
	sta     _i
L000B:	lda     _i
	cmp     _p1_max_health
	bcs     L000A
;
; one_vram_buffer((i < p1_health) ? TILE_HEART_FULL : TILE_HEART_EMPTY, NTADR_A(i + 2, 2));
;
	cmp     _p1_health
	bcs     L000C
	lda     #$5B
	jmp     L000D
L000C:	lda     #$5C
L000D:	jsr     pusha
	ldx     #$00
	lda     _i
	clc
	adc     #$02
	bcc     L0009
	inx
L0009:	ora     #$40
	pha
	txa
	ora     #$20
	tax
	pla
	jsr     _one_vram_buffer
;
; for (i = 0; i < p1_max_health; ++i) {
;
	inc     _i
	jmp     L000B
;
; one_vram_buffer(TILE_HEART_EMPTY, NTADR_A(2, 2));
;
L000E:	lda     #$5C
	jsr     pusha
	ldx     #$20
	lda     #$42
	jmp     _one_vram_buffer
;
; }
;
L000A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_xp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_xp: near

.segment	"CODE"

;
; multi_vram_buffer_horz(exp, sizeof(exp), NTADR_A(12, 2));
;
	jsr     decsp3
	lda     #<(_exp)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_exp)
	sta     (sp),y
	lda     #$09
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$4C
	jmp     _multi_vram_buffer_horz

.endproc

; ---------------------------------------------------------------
; void __near__ add_xp (unsigned char value, unsigned char pos)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_xp: near

.segment	"CODE"

;
; void add_xp(unsigned char value, unsigned char pos) {
;
	jsr     pusha
;
; unsigned char result = exp[pos] + value - 0x30;
;
	ldy     #$00
	lda     (sp),y
	tay
	lda     _exp,y
	sta     ptr1
	ldy     #$01
	lda     (sp),y
	clc
	adc     ptr1
	sec
	sbc     #$30
	jsr     pusha
;
; if (result > 9) {
;
	ldy     #$00
	lda     (sp),y
	cmp     #$0A
	bcc     L0004
;
; if (pos == TEN_MILLIONS) {
;
	iny
	lda     (sp),y
	bne     L000C
;
; result = 9;
;
	lda     #$09
	dey
;
; } else {
;
	jmp     L000B
;
; add_xp(1, pos - 1);
;
L000C:	tya
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$01
	jsr     _add_xp
;
; result -= 10;
;
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$0A
L000B:	sta     (sp),y
;
; exp[pos] = 0x30 + result;
;
L0004:	lda     #<(_exp)
	ldx     #>(_exp)
	iny
	clc
	adc     (sp),y
	bcc     L0008
	inx
L0008:	sta     ptr1
	stx     ptr1+1
	dey
	lda     (sp),y
	clc
	adc     #$30
	sta     (ptr1),y
;
; update_xp();
;
	jsr     _update_xp
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ clear_HUD (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_HUD: near

.segment	"CODE"

;
; multi_vram_buffer_horz(0x00, 16, NAMETABLE_A);
;
	jsr     decsp3
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	tya
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(0x00, 16, NAMETABLE_A);
;
	jsr     decsp3
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	tya
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(0x00, 16, NAMETABLE_A);
;
	jsr     decsp3
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	tya
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(0x00, 16, NAMETABLE_A);
;
	jsr     decsp3
	lda     #$00
	ldy     #$01
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$10
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	tya
	jmp     _multi_vram_buffer_horz

.endproc

; ---------------------------------------------------------------
; void __near__ show_HUD (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_HUD: near

.segment	"CODE"

;
; update_health();
;
	jsr     _update_health
;
; update_xp();
;
	jsr     _update_xp
;
; one_vram_buffer(0x5d, NTADR_A(22, 2));
;
	lda     #$5D
	jsr     pusha
	ldx     #$20
	lda     #$56
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x5e, NTADR_A(23, 2));
;
	lda     #$5E
	jsr     pusha
	ldx     #$20
	lda     #$57
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x5f, NTADR_A(24, 2));
;
	lda     #$5F
	jsr     pusha
	ldx     #$20
	lda     #$58
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x7e, NTADR_A(23, 3));
;
	lda     #$7E
	jsr     pusha
	ldx     #$20
	lda     #$77
	jsr     _one_vram_buffer
;
; one_vram_buffer(0x7f, NTADR_A(24, 3));
;
	lda     #$7F
	jsr     pusha
	ldx     #$20
	lda     #$78
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ show_map (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_map: near

.segment	"CODE"

;
; set_chr_mode_4(8);
;
	lda     #$08
	jsr     _set_chr_mode_4
;
; set_chr_mode_5(9);
;
	lda     #$09
	jsr     _set_chr_mode_5
;
; set_scroll_x(0x0100);
;
	ldx     #$01
	lda     #$00
	jsr     _set_scroll_x
;
; pal_col(0x01, 0x28);
;
	lda     #$01
	jsr     pusha
	lda     #$28
	jsr     _pal_col
;
; pal_col(0x02, 0x18);
;
	lda     #$02
	jsr     pusha
	lda     #$18
	jmp     _pal_col

.endproc

; ---------------------------------------------------------------
; void __near__ show_title_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_title_screen: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ show_game_over (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_game_over: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_level_specifics (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_level_specifics: near

.segment	"CODE"

;
; switch (current_level) {
;
	lda     _current_level
;
; }
;
	jeq     L0046
	cmp     #$01
	jeq     L0049
	cmp     #$02
	jeq     L004A
	cmp     #$03
	jeq     L004B
	cmp     #$04
	jeq     L004B
	cmp     #$05
	jeq     L004B
	cmp     #$06
	jeq     L004B
	cmp     #$07
	jeq     L004B
	cmp     #$08
	jeq     L004B
	cmp     #$09
	jeq     L004B
	cmp     #$0A
	jeq     L004B
	cmp     #$0B
	jeq     L004B
	cmp     #$0C
	jeq     L004B
	cmp     #$0D
	jeq     L004B
	cmp     #$0E
	jeq     L004B
	cmp     #$0F
	jeq     L004B
	cmp     #$10
	jeq     L004B
	cmp     #$11
	jeq     L004B
	cmp     #$12
	jeq     L004B
	cmp     #$13
	jeq     L004B
	cmp     #$14
	jeq     L004B
	cmp     #$15
	jeq     L004B
	cmp     #$16
	jeq     L004B
	cmp     #$17
	jeq     L004B
	cmp     #$18
	jeq     L004B
	cmp     #$19
	jeq     L004B
	cmp     #$1A
	jeq     L004B
	cmp     #$1B
	jeq     L004B
	cmp     #$1C
	jeq     L004B
	cmp     #$1D
	jeq     L004B
	cmp     #$1E
	jeq     L004B
	cmp     #$1F
	jeq     L004B
	cmp     #$20
	jeq     L004B
	cmp     #$21
	jeq     L004B
	jmp     L004B
;
; actors.x[0] = 64;
;
L0046:	lda     #$40
	sta     _actors
;
; actors.x[1] = 88;
;
	lda     #$58
	sta     _actors+1
;
; actors.x[2] = 160;
;
	lda     #$A0
	sta     _actors+2
;
; actors.x[3] = 184;
;
	lda     #$B8
	sta     _actors+3
;
; for (i = 0; i < 4; ++i) {
;
	lda     #$00
	sta     _i
L0047:	lda     _i
	cmp     #$04
	bcs     L004B
;
; actors.y[i] = 72;
;
	ldy     _i
	lda     #$48
	sta     _actors+10,y
;
; actors.animation_speed[i] = 8;
;
	ldy     _i
	lda     #$08
	sta     _actors+170,y
;
; actors.current_frame[i] = i;
;
	ldy     _i
	lda     _i
	sta     _actors+180,y
;
; actors.state[i] = IDLE;
;
	ldy     _i
	lda     #$00
	sta     _actors+190,y
;
; actors.xDir[i] = LEFT;
;
	ldy     _i
	lda     #$FF
	sta     _actors+60,y
;
; for (i = 0; i < 4; ++i) {
;
	inc     _i
	jmp     L0047
;
; paddle_count = 1;
;
L0049:	sta     _paddle_count
;
; actors.x[0] = 0x78;
;
	lda     #$78
	sta     _actors
;
; actors.y[0] = 0xD0;
;
	lda     #$D0
	sta     _actors+10
;
; banked_call(0, init_skeletons);
;
	lda     #$00
	jsr     pusha
	lda     #<(_init_skeletons)
	ldx     #>(_init_skeletons)
	jsr     _banked_call
;
; game_state = STORY;
;
	lda     #$02
	sta     _game_state
;
; break;
;
	jmp     L004B
;
; paddle_count = 4;
;
L004A:	lda     #$04
	sta     _paddle_count
;
; actors.x[0] = 0x70;  // 14
;
	lda     #$70
	sta     _actors
;
; actors.y[0] = 0xD0;  // 26
;
	lda     #$D0
	sta     _actors+10
;
; actors.x[1] = 0x70;  // 14
;
	lda     #$70
	sta     _actors+1
;
; actors.y[1] = 0x38;  // 7
;
	lda     #$38
	sta     _actors+11
;
; actors.x[2] = 0x18;  // 3
;
	lda     #$18
	sta     _actors+2
;
; actors.y[2] = 0x70;  // 14
;
	lda     #$70
	sta     _actors+12
;
; actors.x[3] = 0xE0;  // 28
;
	lda     #$E0
	sta     _actors+3
;
; actors.y[3] = 0x70;  // 14
;
	lda     #$70
	sta     _actors+13
;
; for (i = 0; i < paddle_count; ++i) {
;
L004B:	lda     #$00
	sta     _i
L004C:	lda     _i
	cmp     _paddle_count
	bcc     L004D
;
; }
;
	rts
;
; if (i < 2) {
;
L004D:	cmp     #$02
	bcs     L0033
;
; actors.width[i] = 0x20;   // 32
;
	ldy     _i
	lda     #$20
	sta     _actors+20,y
;
; actors.height[i] = 0x04;  // 4
;
	ldy     _i
	lda     #$04
	sta     _actors+30,y
;
; actors.bbox_x[i] = 0x00;  // 2
;
	ldy     _i
	lda     #$00
	sta     _actors+40,y
;
; actors.bbox_y[i] = 0x02;
;
	ldy     _i
	lda     #$02
;
; } else {
;
	jmp     L0045
;
; actors.width[i] = 0x04;
;
L0033:	ldy     _i
	lda     #$04
	sta     _actors+20,y
;
; actors.height[i] = 0x20;
;
	ldy     _i
	lda     #$20
	sta     _actors+30,y
;
; actors.bbox_x[i] = 0x02;
;
	ldy     _i
	lda     #$02
	sta     _actors+40,y
;
; actors.bbox_y[i] = 0x00;
;
	ldy     _i
	lda     #$00
L0045:	sta     _actors+50,y
;
; actors.xDir[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _actors+60,y
;
; actors.yDir[i] = 0;
;
	ldy     _i
	sta     _actors+70,y
;
; actors.xSpeed[i] = 0;
;
	ldy     _i
	sta     _actors+80,y
;
; actors.ySpeed[i] = 0;
;
	ldy     _i
	sta     _actors+90,y
;
; actors.xVelocity[i] = 0;
;
	ldy     _i
	sta     _actors+120,y
;
; actors.yVelocity[i] = 0;
;
	ldy     _i
	sta     _actors+130,y
;
; actors.minSpeed[i] = 0;
;
	ldy     _i
	sta     _actors+140,y
;
; actors.maxSpeed[i] = 250;
;
	ldy     _i
	lda     #$FA
	sta     _actors+150,y
;
; for (i = 0; i < paddle_count; ++i) {
;
	inc     _i
	jmp     L004C

.endproc

; ---------------------------------------------------------------
; void __near__ init_skull (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_skull: near

.segment	"CODE"

;
; actors.x[SKULL] = 0xFF;
;
	lda     #$FF
	sta     _actors+4
;
; actors.y[SKULL] = 0xFF;
;
	sta     _actors+14
;
; actors.width[SKULL] = 6;
;
	lda     #$06
	sta     _actors+24
;
; actors.height[SKULL] = 6;
;
	sta     _actors+34
;
; actors.bbox_x[SKULL] = 1;
;
	lda     #$01
	sta     _actors+44
;
; actors.bbox_y[SKULL] = 1;
;
	sta     _actors+54
;
; actors.xDir[SKULL] = RIGHT;
;
	sta     _actors+64
;
; actors.yDir[SKULL] = UP;
;
	lda     #$FF
	sta     _actors+74
;
; actors.xSpeed[SKULL] = 100;
;
	lda     #$64
	sta     _actors+84
;
; actors.ySpeed[SKULL] = 100;
;
	sta     _actors+94
;
; actors.xRemain[SKULL] = 0;
;
	lda     #$00
	sta     _actors+104
;
; actors.yRemain[SKULL] = 0;
;
	sta     _actors+114
;
; actors.xVelocity[SKULL] = 0;
;
	sta     _actors+124
;
; actors.yVelocity[SKULL] = 0;
;
	sta     _actors+134
;
; actors.minSpeed[SKULL] = 64;
;
	lda     #$40
	sta     _actors+144
;
; actors.maxSpeed[SKULL] = 250;
;
	lda     #$FA
	sta     _actors+154
;
; actors.counter[SKULL] = 0;
;
	lda     #$00
	sta     _actors+164
;
; actors.animation_speed[SKULL] = 8;
;
	lda     #$08
	sta     _actors+174
;
; actors.current_frame[SKULL] = 0;
;
	lda     #$00
	sta     _actors+184
;
; actors.state[SKULL] = IDLE;
;
	sta     _actors+194
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_level_specifics (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_level_specifics: near

.segment	"CODE"

;
; switch (current_level) {
;
	lda     _current_level
;
; }
;
	beq     L001C
	cmp     #$01
	jeq     L001E
	cmp     #$02
	bne     L0022
;
; }
;
	rts
;
; }
;
L0022:	rts
;
; for (i = 0; i < 4; ++i) {
;
L001C:	sta     _i
L001D:	lda     _i
	cmp     #$04
	bcc     L0023
;
; }
;
	rts
;
; param1 = i;
;
L0023:	sta     _param1
;
; param2 = torch_animation_index[actors.state[i]][0];  // animation index
;
	ldy     _i
	ldx     #$00
	lda     _actors+190,y
	asl     a
	bcc     L0017
	inx
L0017:	sta     ptr1
	txa
	clc
	adc     #>(_torch_animation_index)
	sta     ptr1+1
	ldy     #<(_torch_animation_index)
	lda     (ptr1),y
	sta     _param2
;
; param3 = torch_animation_index[actors.state[i]][1];  // number of frames
;
	ldy     _i
	ldx     #$00
	lda     _actors+190,y
	asl     a
	bcc     L001A
	inx
	clc
L001A:	adc     #<(_torch_animation_index)
	sta     ptr1
	txa
	adc     #>(_torch_animation_index)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _param3
;
; set_animation_info(torch_animation_index);
;
	lda     #<(_torch_animation_index)
	ldx     #>(_torch_animation_index)
	jsr     _set_animation_info
;
; oam_meta_spr(actors.x[param1], actors.y[param1], torch_animation[actors.current_frame[param1] + param2]);
;
	jsr     decsp2
	ldy     _param1
	lda     _actors,y
	ldy     #$01
	sta     (sp),y
	ldy     _param1
	lda     _actors+10,y
	ldy     #$00
	sta     (sp),y
	ldy     _param1
	ldx     #$00
	lda     _actors+180,y
	clc
	adc     _param2
	bcc     L0016
	inx
L0016:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_torch_animation)
	sta     ptr1
	lda     tmp1
	adc     #>(_torch_animation)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; for (i = 0; i < 4; ++i) {
;
	inc     _i
	jmp     L001D
;
; chr_4_index = 2;
;
L001E:	lda     #$02
	sta     _chr_4_index
;
; chr_5_index = 3;
;
	lda     #$03
	sta     _chr_5_index
;
; if (actors.y[SKULL] > 120 && actors.y[SKULL] < 132) {
;
	lda     _actors+14
	cmp     #$79
	bcc     L0010
	cmp     #$84
	bcs     L0010
;
; oam_meta_spr(215, 122, crow_left_skwak);
;
	jsr     decsp2
	lda     #$D7
	ldy     #$01
	sta     (sp),y
	lda     #$7A
	dey
	sta     (sp),y
	lda     #<(_crow_left_skwak)
	ldx     #>(_crow_left_skwak)
;
; } else {
;
	jmp     L0019
;
; oam_meta_spr(215, 122, crow_left);
;
L0010:	jsr     decsp2
	lda     #$D7
	ldy     #$01
	sta     (sp),y
	lda     #$7A
	dey
	sta     (sp),y
	lda     #<(_crow_left)
	ldx     #>(_crow_left)
L0019:	jsr     _oam_meta_spr
;
; animate_skeleton();
;
	jsr     _animate_skeleton
;
; oam_meta_spr(128, 64, door1);
;
	jsr     decsp2
	lda     #$80
	ldy     #$01
	sta     (sp),y
	lda     #$40
	dey
	sta     (sp),y
	lda     #<(_door1)
	ldx     #>(_door1)
	jsr     _oam_meta_spr
;
; oam_meta_spr(219, 61, tree);
;
	jsr     decsp2
	lda     #$DB
	ldy     #$01
	sta     (sp),y
	lda     #$3D
	dey
	sta     (sp),y
	lda     #<(_tree)
	ldx     #>(_tree)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ load_level (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_level: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; temp = current_level * 4;
;
	lda     _current_level
	asl     a
	asl     a
	sta     _temp
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(level_list[temp]);
;
	ldx     #$00
	lda     _temp
	asl     a
	bcc     L0016
	inx
	clc
L0016:	adc     #<(_level_list)
	sta     ptr1
	txa
	adc     #>(_level_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _vram_unrle
;
; memcpy(c_map, level_list[++temp], 368);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	inc     _temp
	lda     _temp
	asl     a
	bcc     L0017
	inx
	clc
L0017:	adc     #<(_level_list)
	sta     ptr1
	txa
	adc     #>(_level_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$01
	lda     #$70
	jsr     _memcpy
;
; pal_bg(level_list[++temp]);
;
	ldx     #$00
	inc     _temp
	lda     _temp
	asl     a
	bcc     L0018
	inx
	clc
L0018:	adc     #<(_level_list)
	sta     ptr1
	txa
	adc     #>(_level_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_bg
;
; pal_spr(level_list[++temp]);
;
	ldx     #$00
	inc     _temp
	lda     _temp
	asl     a
	bcc     L0019
	inx
	clc
L0019:	adc     #<(_level_list)
	sta     ptr1
	txa
	adc     #>(_level_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_spr
;
; brick_counter = 0;
;
	lda     #$00
	sta     _brick_counter
;
; tombstone_count = 0;
;
	sta     _tombstone_count
;
; for (collision_index = 0; collision_index < 368; ++collision_index) {
;
	sta     _collision_index
	sta     _collision_index+1
L0002:	lda     _collision_index
	cmp     #$70
	lda     _collision_index+1
	sbc     #$01
	bvc     L0006
	eor     #$80
L0006:	bpl     L001D
;
; temp = c_map[collision_index] >> 4;
;
	lda     _collision_index
	sta     ptr1
	lda     _collision_index+1
	clc
	adc     #>(_c_map)
	sta     ptr1+1
	ldy     #<(_c_map)
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp
;
; if (temp == 7) {
;
	cmp     #$07
	bne     L001A
;
; ++tombstone_count;
;
	inc     _tombstone_count
;
; } else {
;
	jmp     L0004
;
; if (temp == 3) {
;
L001A:	lda     _temp
	cmp     #$03
;
; } else {
;
	beq     L001C
;
; if (temp == 5) {
;
	cmp     #$05
	bne     L000C
;
; ++brick_counter;
;
	inc     _brick_counter
;
; temp = c_map[collision_index] & 0x0F;
;
L000C:	lda     _collision_index
	sta     ptr1
	lda     _collision_index+1
	clc
	adc     #>(_c_map)
	sta     ptr1+1
	ldy     #<(_c_map)
	lda     (ptr1),y
	and     #$0F
	sta     _temp
;
; if (temp == 4 || temp == 5) {
;
	cmp     #$04
	beq     L001C
	lda     _temp
	cmp     #$05
	bne     L0004
;
; ++brick_counter;
;
L001C:	inc     _brick_counter
;
; for (collision_index = 0; collision_index < 368; ++collision_index) {
;
L0004:	inc     _collision_index
	bne     L0002
	inc     _collision_index+1
	jmp     L0002
;
; tombstone_count = tombstone_count >> 1;  // Divided by 2 because we only count the first 7 in the 0x77
;
L001D:	lda     _tombstone_count
	lsr     a
	sta     _tombstone_count
;
; init_level_specifics();
;
	jsr     _init_level_specifics
;
; init_skull();
;
	jsr     _init_skull
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; if (game_state == MAIN) {
;
	lda     _game_state
	cmp     #$01
	bne     L0010
;
; show_HUD();
;
	jsr     _show_HUD
;
; skull_launched = FALSE;
;
	lda     #$00
	sta     _skull_launched
;
; }
;
L0010:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_title_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_title_screen: near

.segment	"CODE"

;
; pal_bg((const char*)pal_forest_bg);
;
	lda     #<(_pal_forest_bg)
	ldx     #>(_pal_forest_bg)
	jsr     _pal_bg
;
; pal_spr(pal_cemetery_spr);
;
	lda     #<(_pal_cemetery_spr)
	ldx     #>(_pal_cemetery_spr)
	jsr     _pal_spr
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(title_screen);
;
	lda     #<(_title_screen)
	ldx     #>(_title_screen)
	jsr     _vram_unrle
;
; game_state = TITLE;
;
	lda     #$00
	sta     _game_state
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ load_map (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_map: near

.segment	"CODE"

;
; vram_adr(NAMETABLE_B);
;
	ldx     #$24
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(map);
;
	lda     #<(_map)
	ldx     #>(_map)
	jmp     _vram_unrle

.endproc

; ---------------------------------------------------------------
; void __near__ remove_brick (char tile_type)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_remove_brick: near

.segment	"CODE"

;
; void remove_brick(char tile_type) {
;
	jsr     pusha
;
; one_vram_buffer(tile_type, backup_nt_index);
;
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     _one_vram_buffer
;
; c_map[backup_col_index] &= backup_nt_index % 2 ? 0b11110000 : 0b00001111;
;
	lda     _backup_col_index
	clc
	adc     #<(_c_map)
	tay
	lda     _backup_col_index+1
	adc     #>(_c_map)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	stx     tmp1
	ora     tmp1
	beq     L0002
	lda     #$F0
	jmp     L0003
L0002:	lda     #$0F
L0003:	jsr     tosanda0
	ldy     #$00
	jsr     staspidx
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ hit_brick (char tile_type)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hit_brick: near

.segment	"CODE"

;
; void hit_brick(char tile_type) {
;
	jsr     pusha
;
; remove_brick(tile_type);
;
	ldy     #$00
	lda     (sp),y
	jsr     _remove_brick
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; signed char __near__ get_x_speed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_x_speed: near

.segment	"CODE"

;
; temp_speed = actors.xSpeed[param1] >> 7;
;
	ldy     _param1
	lda     _actors+80,y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp_speed
;
; actors.xRemain[param1] += actors.xSpeed[param1] & 0b01111111;  // MODULO 128
;
	lda     #<(_actors+100)
	ldx     #>(_actors+100)
	clc
	adc     _param1
	bcc     L0003
	inx
L0003:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     _param1
	lda     _actors+80,y
	and     #$7F
	clc
	adc     ptr1
	ldy     #$00
	sta     (sreg),y
;
; temp = 0;
;
	tya
	sta     _temp
;
; temp2 = 0;
;
	sta     _temp2
;
; if (actors.xRemain[param1] > 127) {
;
	ldy     _param1
	lda     _actors+100,y
	cmp     #$80
	bcc     L0005
;
; actors.xRemain[param1] &= 0b01111111;
;
	lda     #<(_actors+100)
	ldx     #>(_actors+100)
	clc
	adc     _param1
	bcc     L0007
	inx
L0007:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$7F
	sta     (ptr1),y
;
; temp = 1;
;
	lda     #$01
	sta     _temp
;
; temp2 = ((actors.xVelocity[param1] > 40) || (actors.xVelocity[param1] % 2)) ? 1 : 0;
;
L0005:	ldy     _param1
	lda     _actors+120,y
	cmp     #$29
	bcs     L0017
	ldy     _param1
	lda     _actors+120,y
	and     #$01
	beq     L0019
L0017:	lda     #$01
L0019:	sta     _temp2
;
; if (actors.xVelocity[param1]) {
;
	ldy     _param1
	ldx     #$00
	lda     _actors+120,y
	beq     L001A
;
; --actors.xVelocity[param1];
;
	lda     #<(_actors+120)
	ldx     #>(_actors+120)
	clc
	adc     _param1
	bcc     L0010
	inx
L0010:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; return (temp_speed + temp + temp2) * actors.xDir[param1];
;
	ldx     #$00
L001A:	lda     _temp_speed
	clc
	adc     _temp
	bcc     L0016
	inx
	clc
L0016:	adc     _temp2
	bcc     L0014
	inx
L0014:	jsr     pushax
	lda     #<(_actors+60)
	ldx     #>(_actors+60)
	clc
	adc     _param1
	bcc     L0011
	inx
L0011:	ldy     #$00
	jsr     ldaidx
	jsr     tosmulax
	ldx     #$00
	cmp     #$80
	bcc     L0001
	dex
;
; }
;
L0001:	rts

.endproc

; ---------------------------------------------------------------
; signed char __near__ get_y_speed (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_y_speed: near

.segment	"CODE"

;
; temp_speed = actors.ySpeed[param1] >> 7;
;
	ldy     _param1
	lda     _actors+90,y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _temp_speed
;
; actors.yRemain[param1] += actors.ySpeed[param1] & 0b01111111;  // MODULO 128
;
	lda     #<(_actors+110)
	ldx     #>(_actors+110)
	clc
	adc     _param1
	bcc     L0003
	inx
L0003:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	ldy     _param1
	lda     _actors+90,y
	and     #$7F
	clc
	adc     ptr1
	ldy     #$00
	sta     (sreg),y
;
; temp = 0;
;
	tya
	sta     _temp
;
; temp2 = 0;
;
	sta     _temp2
;
; if (actors.yRemain[param1] > 127) {
;
	ldy     _param1
	lda     _actors+110,y
	cmp     #$80
	bcc     L0005
;
; actors.yRemain[param1] &= 0b01111111;
;
	lda     #<(_actors+110)
	ldx     #>(_actors+110)
	clc
	adc     _param1
	bcc     L0007
	inx
L0007:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$7F
	sta     (ptr1),y
;
; temp = 1;
;
	lda     #$01
	sta     _temp
;
; temp2 = ((actors.yVelocity[param1] > 40) || (actors.yVelocity[param1] % 2)) ? 1 : 0;
;
L0005:	ldy     _param1
	lda     _actors+130,y
	cmp     #$29
	bcs     L0017
	ldy     _param1
	lda     _actors+130,y
	and     #$01
	beq     L0019
L0017:	lda     #$01
L0019:	sta     _temp2
;
; if (actors.yVelocity[param1]) {
;
	ldy     _param1
	ldx     #$00
	lda     _actors+130,y
	beq     L001A
;
; --actors.yVelocity[param1];
;
	lda     #<(_actors+130)
	ldx     #>(_actors+130)
	clc
	adc     _param1
	bcc     L0010
	inx
L0010:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; return (temp_speed + temp + temp2) * actors.yDir[param1];
;
	ldx     #$00
L001A:	lda     _temp_speed
	clc
	adc     _temp
	bcc     L0016
	inx
	clc
L0016:	adc     _temp2
	bcc     L0014
	inx
L0014:	jsr     pushax
	lda     #<(_actors+70)
	ldx     #>(_actors+70)
	clc
	adc     _param1
	bcc     L0011
	inx
L0011:	ldy     #$00
	jsr     ldaidx
	jsr     tosmulax
	ldx     #$00
	cmp     #$80
	bcc     L0001
	dex
;
; }
;
L0001:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ add_x_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_x_speed: near

.segment	"CODE"

;
; void add_x_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = actors.xSpeed[param1];
;
	ldy     _param1
	lda     _actors+80,y
	sta     _temp
;
; actors.xSpeed[param1] += val;
;
	lda     #<(_actors+80)
	ldx     #>(_actors+80)
	clc
	adc     _param1
	bcc     L0003
	inx
L0003:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	lda     (sp),y
	clc
	adc     ptr1
	sta     (sreg),y
;
; if (actors.xSpeed[param1] > actors.maxSpeed[param1] || actors.xSpeed[param1] < temp) {
;
	ldy     _param1
	lda     _actors+80,y
	ldy     _param1
	cmp     _actors+150,y
	beq     L000D
	bcs     L000E
L000D:	ldy     _param1
	lda     _actors+80,y
	cmp     _temp
	bcs     L0004
;
; actors.xSpeed[param1] = actors.maxSpeed[param1];
;
L000E:	lda     #<(_actors+80)
	ldx     #>(_actors+80)
	clc
	adc     _param1
	bcc     L000A
	inx
L000A:	sta     ptr1
	stx     ptr1+1
	ldy     _param1
	lda     _actors+150,y
	ldy     #$00
	sta     (ptr1),y
;
; }
;
L0004:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ subtract_x_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_subtract_x_speed: near

.segment	"CODE"

;
; void subtract_x_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = actors.xSpeed[param1];
;
	ldy     _param1
	lda     _actors+80,y
	sta     _temp
;
; actors.xSpeed[param1] -= val;
;
	lda     #<(_actors+80)
	ldx     #>(_actors+80)
	clc
	adc     _param1
	bcc     L0003
	inx
L0003:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     (sp),y
	sta     (sreg),y
;
; if (actors.xSpeed[param1] < actors.minSpeed[param1] || actors.xSpeed[param1] > temp) {
;
	ldy     _param1
	lda     _actors+80,y
	ldy     _param1
	cmp     _actors+140,y
	bcc     L000E
	lda     _actors+80,y
	cmp     _temp
	beq     L0004
	bcc     L0004
;
; actors.xSpeed[param1] = actors.minSpeed[param1];
;
L000E:	lda     #<(_actors+80)
	ldx     #>(_actors+80)
	clc
	adc     _param1
	bcc     L000A
	inx
L000A:	sta     ptr1
	stx     ptr1+1
	ldy     _param1
	lda     _actors+140,y
	ldy     #$00
	sta     (ptr1),y
;
; }
;
L0004:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ add_y_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_y_speed: near

.segment	"CODE"

;
; void add_y_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = actors.ySpeed[param1];
;
	ldy     _param1
	lda     _actors+90,y
	sta     _temp
;
; actors.ySpeed[param1] += val;
;
	lda     #<(_actors+90)
	ldx     #>(_actors+90)
	clc
	adc     _param1
	bcc     L0003
	inx
L0003:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	lda     (sp),y
	clc
	adc     ptr1
	sta     (sreg),y
;
; if (actors.ySpeed[param1] > actors.maxSpeed[param1] || actors.ySpeed[param1] < temp) {
;
	ldy     _param1
	lda     _actors+90,y
	ldy     _param1
	cmp     _actors+150,y
	beq     L000D
	bcs     L000E
L000D:	ldy     _param1
	lda     _actors+90,y
	cmp     _temp
	bcs     L0004
;
; actors.ySpeed[param1] = actors.maxSpeed[param1];
;
L000E:	lda     #<(_actors+90)
	ldx     #>(_actors+90)
	clc
	adc     _param1
	bcc     L000A
	inx
L000A:	sta     ptr1
	stx     ptr1+1
	ldy     _param1
	lda     _actors+150,y
	ldy     #$00
	sta     (ptr1),y
;
; }
;
L0004:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ subtract_y_speed (unsigned char val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_subtract_y_speed: near

.segment	"CODE"

;
; void subtract_y_speed(unsigned char val) {
;
	jsr     pusha
;
; temp = actors.ySpeed[param1];
;
	ldy     _param1
	lda     _actors+90,y
	sta     _temp
;
; actors.ySpeed[param1] -= val;
;
	lda     #<(_actors+90)
	ldx     #>(_actors+90)
	clc
	adc     _param1
	bcc     L0003
	inx
L0003:	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     (sp),y
	sta     (sreg),y
;
; if (actors.ySpeed[param1] < actors.minSpeed[param1] || actors.ySpeed[param1] > temp) {
;
	ldy     _param1
	lda     _actors+90,y
	ldy     _param1
	cmp     _actors+140,y
	bcc     L000E
	lda     _actors+90,y
	cmp     _temp
	beq     L0004
	bcc     L0004
;
; actors.ySpeed[param1] = actors.minSpeed[param1];
;
L000E:	lda     #<(_actors+90)
	ldx     #>(_actors+90)
	clc
	adc     _param1
	bcc     L000A
	inx
L000A:	sta     ptr1
	stx     ptr1+1
	ldy     _param1
	lda     _actors+140,y
	ldy     #$00
	sta     (ptr1),y
;
; }
;
L0004:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; char __near__ get_collision_type (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_collision_type: near

.segment	"CODE"

;
; collision_index = (temp_x_col >> 4) + (((temp_y_col >> 3) - 5) * 16);
;
	lda     _temp_x_col
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha0
	lda     _temp_y_col
	lsr     a
	lsr     a
	lsr     a
	sec
	sbc     #$05
	bcs     L0002
	ldx     #$FF
L0002:	jsr     aslax4
	jsr     tosaddax
	sta     _collision_index
	stx     _collision_index+1
;
; return (temp_x_col >> 3) % 2 ? c_map[collision_index] & 0x0F : c_map[collision_index] >> 4;
;
	lda     _temp_x_col
	lsr     a
	lsr     a
	lsr     a
	jsr     pusha0
	lda     #$02
	jsr     tosmoda0
	stx     tmp1
	ora     tmp1
	beq     L0003
	lda     _collision_index
	sta     ptr1
	lda     _collision_index+1
	clc
	adc     #>(_c_map)
	sta     ptr1+1
	ldy     #<(_c_map)
	lda     (ptr1),y
	ldx     #$00
	and     #$0F
	rts
L0003:	lda     _collision_index
	sta     ptr1
	lda     _collision_index+1
	clc
	adc     #>(_c_map)
	sta     ptr1+1
	ldy     #<(_c_map)
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; char __near__ set_collision_data (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_collision_data: near

.segment	"CODE"

;
; backup_nt_index = NTADR_A((temp_x_col >> 3), (temp_y_col >> 3));
;
	ldx     #$00
	lda     _temp_y_col
	lsr     a
	lsr     a
	lsr     a
	jsr     aslax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	sta     ptr1
	stx     ptr1+1
	lda     _temp_x_col
	lsr     a
	lsr     a
	lsr     a
	ora     ptr1
	sta     _backup_nt_index
	lda     ptr1+1
	ora     #$20
	sta     _backup_nt_index+1
;
; backup_col_type = get_collision_type();
;
	jsr     _get_collision_type
	sta     _backup_col_type
;
; backup_col_index = collision_index;
;
	lda     _collision_index+1
	sta     _backup_col_index+1
	lda     _collision_index
	sta     _backup_col_index
;
; return backup_col_type;
;
	ldx     #$00
	lda     _backup_col_type
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ do_skull_tile_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_do_skull_tile_collision: near

.segment	"CODE"

;
; switch (backup_col_type) {
;
	lda     _backup_col_type
;
; }
;
	cmp     #$01
	bne     L002F
;
; }
;
	rts
;
; }
;
L002F:	cmp     #$02
	beq     L0005
	cmp     #$03
	beq     L0028
	cmp     #$04
	bne     L0030
;
; }
;
	rts
;
; }
;
L0030:	cmp     #$05
	jeq     L0029
	cmp     #$06
	jeq     L002A
	cmp     #$07
	jeq     L000F
	cmp     #$08
	bne     L0031
;
; }
;
	rts
;
; }
;
L0031:	cmp     #$09
	bne     L0032
;
; }
;
	rts
;
; }
;
L0032:	cmp     #$0A
	bne     L0033
;
; }
;
	rts
;
; }
;
L0033:	cmp     #$0B
	bne     L0034
;
; }
;
	rts
;
; }
;
L0034:	cmp     #$0C
	bne     L0035
;
; }
;
	rts
;
; }
;
L0035:	cmp     #$0D
	bne     L0036
;
; }
;
	rts
;
; }
;
L0036:	cmp     #$0E
	bne     L0037
;
; }
;
	rts
;
; }
;
L0037:	cmp     #$0F
	bne     L0038
;
; }
;
	rts
;
; }
;
L0038:	rts
;
; if (p1_health) {
;
L0005:	lda     _p1_health
	beq     L0006
;
; --p1_health;
;
	dec     _p1_health
;
; update_health();
;
L0006:	jmp     _update_health
;
; remove_brick(TILE_BACK);
;
L0028:	lda     #$10
	jsr     _remove_brick
;
; backup_nt_index % 2 ? --backup_nt_index : ++backup_nt_index;
;
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	stx     tmp1
	ora     tmp1
	beq     L0008
	lda     _backup_nt_index
	sec
	sbc     #$01
	sta     _backup_nt_index
	bcs     L0027
	dec     _backup_nt_index+1
	jmp     L0027
L0008:	inc     _backup_nt_index
	bne     L0027
	inc     _backup_nt_index+1
;
; --brick_counter;
;
L0027:	dec     _brick_counter
;
; hit_brick(TILE_BACK);
;
	lda     #$10
	jsr     _hit_brick
;
; add_xp(1, HUNDREDS);
;
	lda     #$01
	jsr     pusha
	lda     #$05
	jmp     _add_xp
;
; hit_brick(0x11);
;
L0029:	lda     #$11
	jsr     _hit_brick
;
; add_xp(5, TENS);
;
	lda     #$05
	jsr     pusha
	lda     #$06
	jsr     _add_xp
;
; --brick_counter;
;
	dec     _brick_counter
;
; break;
;
	rts
;
; hit_brick(TILE_BACK_GRASS);
;
L002A:	lda     #$23
	jmp     _hit_brick
;
; c_map[backup_col_index] = 0x11;
;
L000F:	lda     _backup_col_index
	clc
	adc     #<(_c_map)
	tay
	lda     _backup_col_index+1
	adc     #>(_c_map)
	tax
	tya
	jsr     pushax
	lda     #$11
	ldy     #$00
	jsr     staspidx
;
; temp = 0b01010101;
;
	lda     #$55
	sta     _temp
;
; if (((temp_y_col >> 3) - 5) % 2) {
;
	ldx     #$00
	lda     _temp_y_col
	lsr     a
	lsr     a
	lsr     a
	sec
	sbc     #$05
	bcs     L0011
	dex
L0011:	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmoda0
	stx     tmp1
	ora     tmp1
	beq     L0010
;
; if (backup_col_index == 182 || backup_col_index == 185) {
;
	lda     _backup_col_index+1
	bne     L002B
	lda     _backup_col_index
	cmp     #$B6
	beq     L0014
L002B:	lda     _backup_col_index+1
	bne     L0012
	lda     _backup_col_index
	cmp     #$B9
	bne     L0012
;
; temp = 0b10100101;
;
L0014:	lda     #$A5
	sta     _temp
;
; backup_col_index += 16;
;
L0012:	lda     #$10
	clc
	adc     _backup_col_index
	sta     _backup_col_index
	bcc     L001E
	inc     _backup_col_index+1
;
; } else {
;
	jmp     L001E
;
; if (backup_col_index == 198 || backup_col_index == 201) {
;
L0010:	lda     _backup_col_index+1
	bne     L002D
	lda     _backup_col_index
	cmp     #$C6
	beq     L001B
L002D:	lda     _backup_col_index+1
	bne     L0019
	lda     _backup_col_index
	cmp     #$C9
	bne     L0019
;
; temp = 0b10100101;
;
L001B:	lda     #$A5
	sta     _temp
;
; backup_col_index -= 16;
;
L0019:	lda     _backup_col_index
	sec
	sbc     #$10
	sta     _backup_col_index
	bcs     L001E
	dec     _backup_col_index+1
;
; c_map[backup_col_index] = 0x11;
;
L001E:	lda     _backup_col_index
	clc
	adc     #<(_c_map)
	sta     ptr1
	lda     _backup_col_index+1
	adc     #>(_c_map)
	sta     ptr1+1
	lda     #$11
	ldy     #$00
	sta     (ptr1),y
;
; one_vram_buffer(temp, (backup_nt_index & 0x2C00) | 0x3C0 | ((backup_nt_index >> 4) & 0x38) | ((backup_nt_index >> 2) & 0x07));
;
	lda     _temp
	jsr     pusha
	lda     _backup_nt_index+1
	and     #$2C
	tax
	lda     #$C0
	sta     ptr1
	txa
	ora     #$03
	sta     ptr1+1
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     asrax4
	and     #$38
	ora     ptr1
	sta     ptr1
	lda     ptr1+1
	sta     ptr1+1
	lda     _backup_nt_index
	ldx     _backup_nt_index+1
	jsr     asrax2
	and     #$07
	ora     ptr1
	ldx     ptr1+1
	jsr     _one_vram_buffer
;
; --tombstone_count;
;
	dec     _tombstone_count
;
; break;
;
	rts

.endproc

; ---------------------------------------------------------------
; char __near__ skull_was_beside (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_skull_was_beside: near

.segment	"CODE"

;
; return actors.x[SKULL] + 1 > actors.x[pad_index] + actors.width[pad_index] + actors.bbox_x[pad_index] ||
;
	ldx     #$00
	lda     _actors+4
	clc
	adc     #$01
	bcc     L0002
	inx
L0002:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+20,y
	clc
	ldy     _pad_index
	adc     _actors,y
	bcc     L000B
	inx
L000B:	sta     ptr1
	stx     ptr1+1
	ldy     _pad_index
	lda     _actors+40,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L000C
	inx
L000C:	jsr     tosicmp
	beq     L000E
	bpl     L0006
;
; actors.x[SKULL] + 7 < actors.x[pad_index] + actors.bbox_x[pad_index];
;
L000E:	ldx     #$00
	lda     _actors+4
	clc
	adc     #$07
	bcc     L0007
	inx
L0007:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+40,y
	clc
	ldy     _pad_index
	adc     _actors,y
	bcc     L000D
	inx
L000D:	jsr     tosicmp
	bmi     L0006
	ldx     #$00
	txa
	rts
L0006:	lda     #$01
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; char __near__ skull_was_above (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_skull_was_above: near

.segment	"CODE"

;
; return actors.y[SKULL] + 1 > actors.y[pad_index] + actors.height[pad_index] + actors.bbox_y[pad_index] ||
;
	ldx     #$00
	lda     _actors+14
	clc
	adc     #$01
	bcc     L0002
	inx
L0002:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+30,y
	clc
	ldy     _pad_index
	adc     _actors+10,y
	bcc     L000B
	inx
L000B:	sta     ptr1
	stx     ptr1+1
	ldy     _pad_index
	lda     _actors+50,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L000C
	inx
L000C:	jsr     tosicmp
	beq     L000E
	bpl     L0006
;
; actors.y[SKULL] + 7 < actors.y[pad_index] + actors.bbox_y[pad_index];
;
L000E:	ldx     #$00
	lda     _actors+14
	clc
	adc     #$07
	bcc     L0007
	inx
L0007:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+50,y
	clc
	ldy     _pad_index
	adc     _actors+10,y
	bcc     L000D
	inx
L000D:	jsr     tosicmp
	bmi     L0006
	ldx     #$00
	txa
	rts
L0006:	lda     #$01
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; char __near__ is_skull_collision_paddle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_skull_collision_paddle: near

.segment	"CODE"

;
; return (temp_x < actors.x[pad_index] + actors.width[pad_index] + actors.bbox_x[pad_index] &&
;
	lda     _temp_x
	jsr     pusha0
	ldy     _pad_index
	lda     _actors+20,y
	clc
	ldy     _pad_index
	adc     _actors,y
	bcc     L0011
	inx
L0011:	sta     ptr1
	stx     ptr1+1
	ldy     _pad_index
	lda     _actors+40,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0012
	inx
L0012:	jsr     tosicmp
	bpl     L0005
;
; temp_x + actors.width[SKULL] > actors.x[pad_index] + actors.bbox_x[pad_index] &&
;
	ldx     #$00
	lda     _temp_x
	clc
	adc     _actors+24
	bcc     L000F
	inx
L000F:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+40,y
	clc
	ldy     _pad_index
	adc     _actors,y
	bcc     L0013
	inx
L0013:	jsr     tosicmp
	bmi     L0005
	beq     L0005
;
; temp_y < actors.y[pad_index] + actors.height[pad_index] + actors.bbox_y[pad_index] &&
;
	lda     _temp_y
	jsr     pusha0
	ldy     _pad_index
	lda     _actors+30,y
	clc
	ldy     _pad_index
	adc     _actors+10,y
	bcc     L0014
	inx
L0014:	sta     ptr1
	stx     ptr1+1
	ldy     _pad_index
	lda     _actors+50,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0015
	inx
L0015:	jsr     tosicmp
	bpl     L0005
;
; temp_y + actors.height[SKULL] > actors.y[pad_index] + actors.bbox_y[pad_index]);
;
	ldx     #$00
	lda     _temp_y
	clc
	adc     _actors+34
	bcc     L0010
	inx
L0010:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+50,y
	clc
	ldy     _pad_index
	adc     _actors+10,y
	bcc     L0016
	inx
L0016:	jsr     tosicmp
	beq     L0005
	bpl     L000D
L0005:	ldx     #$00
	txa
	rts
L000D:	lda     #$01
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; char __near__ is_paddle_collision_skull (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_is_paddle_collision_skull: near

.segment	"CODE"

;
; return (actors.x[SKULL] + 7 > temp_x_col + actors.bbox_x[pad_index] &&
;
	ldx     #$00
	lda     _actors+4
	clc
	adc     #$07
	bcc     L0002
	inx
L0002:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+40,y
	clc
	adc     _temp_x_col
	bcc     L000F
	inx
L000F:	jsr     tosicmp
	jmi     L0004
	jeq     L0004
;
; actors.y[SKULL] + 7 > temp_y_col + actors.bbox_y[pad_index] &&
;
	ldx     #$00
	lda     _actors+14
	clc
	adc     #$07
	bcc     L0005
	inx
L0005:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+50,y
	clc
	adc     _temp_y_col
	bcc     L0010
	inx
L0010:	jsr     tosicmp
	bmi     L0004
	beq     L0004
;
; actors.x[SKULL] + 1 < temp_x_col + actors.width[pad_index] + actors.bbox_x[pad_index] &&
;
	ldx     #$00
	lda     _actors+4
	clc
	adc     #$01
	bcc     L0007
	inx
L0007:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+20,y
	clc
	adc     _temp_x_col
	bcc     L0011
	inx
L0011:	sta     ptr1
	stx     ptr1+1
	ldy     _pad_index
	lda     _actors+40,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0012
	inx
L0012:	jsr     tosicmp
	bpl     L0004
;
; actors.y[SKULL] + 1 < temp_y_col + actors.height[pad_index] + actors.bbox_y[pad_index]);
;
	ldx     #$00
	lda     _actors+14
	clc
	adc     #$01
	bcc     L000A
	inx
L000A:	jsr     pushax
	ldy     _pad_index
	ldx     #$00
	lda     _actors+30,y
	clc
	adc     _temp_y_col
	bcc     L0013
	inx
L0013:	sta     ptr1
	stx     ptr1+1
	ldy     _pad_index
	lda     _actors+50,y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0014
	inx
L0014:	jsr     tosicmp
	bmi     L000D
L0004:	ldx     #$00
	txa
	rts
L000D:	lda     #$01
	ldx     #$00
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_enemy_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_enemy_collision: near

.segment	"CODE"

;
; for (i = 6; i < 6 + enemy_count; ++i) {
;
	lda     #$06
	sta     _i
L0015:	lda     _i
	jsr     pusha0
	lda     _enemy_count
	clc
	adc     #$06
	bcc     L0006
	ldx     #$01
L0006:	jsr     tosicmp
	bpl     L0003
;
; if (actors.state[i] != DEAD) {
;
	ldy     _i
	lda     _actors+190,y
	cmp     #$04
	beq     L0017
;
; pad_index = i;
;
	lda     _i
	sta     _pad_index
;
; if (actors.state[i] != DYING && is_skull_collision_paddle()) {
;
	ldy     _i
	lda     _actors+190,y
	cmp     #$03
	beq     L0017
	jsr     _is_skull_collision_paddle
	tax
	beq     L0017
;
; actors.counter[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _actors+160,y
;
; actors.current_frame[i] = 0;
;
	ldy     _i
	sta     _actors+180,y
;
; actors.state[i] = DYING;
;
	ldy     _i
	lda     #$03
	sta     _actors+190,y
;
; actors.xDir[SKULL] = -actors.xDir[SKULL];
;
	lda     _actors+64
	eor     #$FF
	clc
	adc     #$01
	cmp     #$80
	sta     _actors+64
;
; actors.yDir[SKULL] = -actors.yDir[SKULL];
;
	lda     _actors+74
	eor     #$FF
	clc
	adc     #$01
	cmp     #$80
	sta     _actors+74
;
; for (i = 6; i < 6 + enemy_count; ++i) {
;
L0017:	inc     _i
	jmp     L0015
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_horizontal_paddle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_horizontal_paddle: near

.segment	"CODE"

;
; temp_x_col = actors.x[pad_index];
;
	ldy     _pad_index
	lda     _actors,y
	sta     _temp_x_col
;
; temp_y_col = actors.y[pad_index];
;
	ldy     _pad_index
	lda     _actors+10,y
	sta     _temp_y_col
;
; if (actors.xDir[pad_index] == LEFT) {
;
	lda     #<(_actors+60)
	ldx     #>(_actors+60)
	clc
	adc     _pad_index
	bcc     L0005
	inx
L0005:	ldy     #$00
	jsr     ldaidx
	cmp     #$FF
	bne     L0004
;
; --temp_x_col;
;
	dec     _temp_x_col
;
; if (get_collision_type()) {
;
	jsr     _get_collision_type
	tax
	beq     L000B
;
; ++temp_x_col;
;
	inc     _temp_x_col
;
; } else {
;
	jmp     L000D
;
; temp_x_col += actors.width[pad_index];
;
L0004:	ldy     _pad_index
	lda     _actors+20,y
	clc
	adc     _temp_x_col
	sta     _temp_x_col
;
; if (get_collision_type()) {
;
	jsr     _get_collision_type
	tax
	beq     L000B
;
; temp_x_col = actors.x[pad_index];
;
	ldy     _pad_index
	lda     _actors,y
;
; } else {
;
	jmp     L0018
;
; temp_x_col = actors.x[pad_index] + get_x_speed();
;
L000B:	ldy     _pad_index
	lda     _actors,y
	jsr     pusha0
	jsr     _get_x_speed
	jsr     tosaddax
L0018:	sta     _temp_x_col
;
; if (is_paddle_collision_skull()) {
;
L000D:	jsr     _is_paddle_collision_skull
	tax
	beq     L000F
;
; if (pad1 & 0b00000011 && skull_was_beside()) {
;
	lda     _pad1
	and     #$03
	beq     L0014
	jsr     _skull_was_beside
	tax
	beq     L0014
;
; actors.xVelocity[SKULL] = 70;
;
	lda     #$46
	sta     _actors+124
;
; } else {
;
	jmp     L0014
;
; actors.x[pad_index] = temp_x_col;
;
L000F:	ldy     _pad_index
	lda     _temp_x_col
	sta     _actors,y
;
; if (actors.xSpeed[pad_index]) {
;
L0014:	ldy     _pad_index
	lda     _actors+80,y
	beq     L0016
;
; subtract_x_speed(16);
;
	lda     #$10
	jmp     _subtract_x_speed
;
; }
;
L0016:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_vertical_paddle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_vertical_paddle: near

.segment	"CODE"

;
; temp_x_col = actors.x[pad_index];
;
	ldy     _pad_index
	lda     _actors,y
	sta     _temp_x_col
;
; temp_y_col = actors.y[pad_index];
;
	ldy     _pad_index
	lda     _actors+10,y
	sta     _temp_y_col
;
; if (actors.yDir[pad_index] == UP) {
;
	lda     #<(_actors+70)
	ldx     #>(_actors+70)
	clc
	adc     _pad_index
	bcc     L0005
	inx
L0005:	ldy     #$00
	jsr     ldaidx
	cmp     #$FF
	bne     L0004
;
; --temp_y_col;
;
	dec     _temp_y_col
;
; if (get_collision_type()) {
;
	jsr     _get_collision_type
	tax
	beq     L000B
;
; ++temp_y_col;
;
	inc     _temp_y_col
;
; } else {
;
	jmp     L000D
;
; temp_y_col += actors.height[pad_index];
;
L0004:	ldy     _pad_index
	lda     _actors+30,y
	clc
	adc     _temp_y_col
	sta     _temp_y_col
;
; if (get_collision_type()) {
;
	jsr     _get_collision_type
	tax
	beq     L000B
;
; temp_y_col = actors.y[pad_index];
;
	ldy     _pad_index
	lda     _actors+10,y
;
; } else {
;
	jmp     L0018
;
; temp_y_col = actors.y[pad_index] + get_y_speed();
;
L000B:	ldy     _pad_index
	lda     _actors+10,y
	jsr     pusha0
	jsr     _get_y_speed
	jsr     tosaddax
L0018:	sta     _temp_y_col
;
; if (is_paddle_collision_skull()) {
;
L000D:	jsr     _is_paddle_collision_skull
	tax
	beq     L000F
;
; if ((pad1 & 0b00001100) && skull_was_above()) {
;
	lda     _pad1
	and     #$0C
	beq     L0014
	jsr     _skull_was_above
	tax
	beq     L0014
;
; actors.yVelocity[SKULL] = 70;
;
	lda     #$46
	sta     _actors+134
;
; } else {
;
	jmp     L0014
;
; actors.y[pad_index] = temp_y_col;
;
L000F:	ldy     _pad_index
	lda     _temp_y_col
	sta     _actors+10,y
;
; if (actors.ySpeed[pad_index]) {
;
L0014:	ldy     _pad_index
	lda     _actors+90,y
	beq     L0016
;
; subtract_y_speed(16);
;
	lda     #$10
	jmp     _subtract_y_speed
;
; }
;
L0016:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_paddle_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_paddle_collision: near

.segment	"CODE"

;
; temp = FALSE;
;
	lda     #$00
	sta     _temp
;
; if (actors.y[SKULL] > 127) {
;
	lda     _actors+14
	cmp     #$80
	bcc     L0053
;
; temp = TRUE;
;
	lda     #$01
	sta     _temp
;
; pad_index = 0;
;
	lda     #$00
;
; } else if (paddle_count > 1) {
;
	jmp     L004B
L0053:	lda     _paddle_count
	cmp     #$02
	bcc     L0004
;
; temp = TRUE;
;
	lda     #$01
	sta     _temp
;
; pad_index = 1;
;
L004B:	sta     _pad_index
;
; if (temp && is_skull_collision_paddle()) {
;
L0004:	lda     _temp
	jeq     L0058
	jsr     _is_skull_collision_paddle
	tax
	jeq     L0058
;
; if (temp_x < actors.x[pad_index] + (actors.width[pad_index] >> 1)) {
;
	lda     _temp_x
	jsr     pusha0
	ldy     _pad_index
	lda     _actors+20,y
	lsr     a
	clc
	ldy     _pad_index
	adc     _actors,y
	bcc     L0045
	inx
L0045:	jsr     tosicmp
	bpl     L0009
;
; if (temp_x <= actors.x[pad_index] + 4) {
;
	lda     _temp_x
	jsr     pusha0
	ldy     _pad_index
	lda     _actors,y
	clc
	adc     #$04
	bcc     L000E
	ldx     #$01
L000E:	jsr     tosicmp
	beq     L004F
	bpl     L000C
;
; actors.xDir[SKULL] = LEFT;
;
L004F:	lda     #$FF
	sta     _actors+64
;
; actors.xSpeed[SKULL] = 140;
;
	lda     #$8C
	sta     _actors+84
;
; actors.ySpeed[SKULL] = 60;
;
	lda     #$3C
;
; } else if (temp_x <= actors.x[pad_index] + 10) {
;
	jmp     L004C
L000C:	lda     _temp_x
	jsr     pusha0
	ldy     _pad_index
	lda     _actors,y
	clc
	adc     #$0A
	bcc     L0012
	ldx     #$01
L0012:	jsr     tosicmp
	beq     L0050
	bpl     L001A
;
; actors.xDir[SKULL] = LEFT;
;
L0050:	lda     #$FF
	sta     _actors+64
;
; actors.xSpeed[SKULL] = 100;
;
	lda     #$64
	sta     _actors+84
;
; } else {
;
	jmp     L004C
;
; if (temp_x >= actors.x[pad_index] + actors.width[pad_index] - 4) {
;
L0009:	lda     _temp_x
	jsr     pusha0
	ldy     _pad_index
	lda     _actors+20,y
	clc
	ldy     _pad_index
	adc     _actors,y
	bcc     L0046
	inx
L0046:	sec
	sbc     #$04
	bcs     L0018
	dex
L0018:	jsr     tosicmp
	bmi     L0015
;
; actors.xDir[SKULL] = RIGHT;
;
	lda     #$01
	sta     _actors+64
;
; actors.xSpeed[SKULL] = 140;
;
	lda     #$8C
	sta     _actors+84
;
; actors.ySpeed[SKULL] = 60;
;
	lda     #$3C
;
; } else if (temp_x >= actors.x[pad_index] + actors.width[pad_index] - 10) {
;
	jmp     L004C
L0015:	lda     _temp_x
	jsr     pusha0
	ldy     _pad_index
	lda     _actors+20,y
	clc
	ldy     _pad_index
	adc     _actors,y
	bcc     L0047
	inx
L0047:	sec
	sbc     #$0A
	bcs     L001D
	dex
L001D:	jsr     tosicmp
	bmi     L001A
;
; actors.xDir[SKULL] = RIGHT;
;
	lda     #$01
	sta     _actors+64
;
; actors.xSpeed[SKULL] = 100;
;
	lda     #$64
	sta     _actors+84
;
; } else {
;
	jmp     L004C
;
; actors.xSpeed[SKULL] = 60;
;
L001A:	lda     #$3C
	sta     _actors+84
;
; actors.ySpeed[SKULL] = 140;
;
	lda     #$8C
L004C:	sta     _actors+94
;
; actors.yDir[SKULL] = actors.y[SKULL] < actors.y[pad_index] ? UP : DOWN;
;
	lda     _actors+14
	ldy     _pad_index
	cmp     _actors+10,y
	bcs     L0056
	lda     #$FF
	jmp     L0021
L0056:	lda     #$01
L0021:	cmp     #$80
	sta     _actors+74
;
; temp = FALSE;
;
	lda     #$00
L0058:	sta     _temp
;
; if (paddle_count > 2) {
;
	lda     _paddle_count
	cmp     #$03
	bcc     L0026
;
; if (actors.x[SKULL] < 127) {
;
	lda     _actors+4
	cmp     #$7F
	bcs     L0059
;
; temp = TRUE;
;
	lda     #$01
	sta     _temp
;
; pad_index = 2;
;
	lda     #$02
;
; } else if (paddle_count > 3) {
;
	jmp     L004D
L0059:	lda     _paddle_count
	cmp     #$04
	bcc     L0026
;
; temp = TRUE;
;
	lda     #$01
	sta     _temp
;
; pad_index = 3;
;
	lda     #$03
L004D:	sta     _pad_index
;
; if (temp && is_skull_collision_paddle()) {
;
L0026:	lda     _temp
	beq     L005B
	jsr     _is_skull_collision_paddle
	tax
	bne     L0029
L005B:	rts
;
; if (temp_y < actors.y[pad_index] + (actors.height[pad_index] >> 1)) {
;
L0029:	lda     _temp_y
	jsr     pusha0
	ldy     _pad_index
	lda     _actors+30,y
	lsr     a
	clc
	ldy     _pad_index
	adc     _actors+10,y
	bcc     L0048
	inx
L0048:	jsr     tosicmp
	bpl     L002B
;
; if (temp_y <= actors.y[pad_index] + 4) {
;
	lda     _temp_y
	jsr     pusha0
	ldy     _pad_index
	lda     _actors+10,y
	clc
	adc     #$04
	bcc     L0030
	ldx     #$01
L0030:	jsr     tosicmp
	beq     L0051
	bpl     L002E
;
; actors.yDir[SKULL] = UP;
;
L0051:	lda     #$FF
	sta     _actors+74
;
; actors.xSpeed[SKULL] = 60;
;
	lda     #$3C
	sta     _actors+84
;
; actors.ySpeed[SKULL] = 140;
;
	lda     #$8C
;
; } else if (temp_x <= actors.x[pad_index] + 8) {
;
	jmp     L004E
L002E:	lda     _temp_x
	jsr     pusha0
	ldy     _pad_index
	lda     _actors,y
	clc
	adc     #$08
	bcc     L0034
	ldx     #$01
L0034:	jsr     tosicmp
	beq     L0052
	bpl     L003C
;
; actors.yDir[SKULL] = UP;
;
L0052:	lda     #$FF
	sta     _actors+74
;
; actors.xSpeed[SKULL] = 100;
;
	lda     #$64
	sta     _actors+84
;
; } else {
;
	jmp     L004E
;
; if (temp_y >= actors.y[pad_index] + actors.height[pad_index] - 4) {
;
L002B:	lda     _temp_y
	jsr     pusha0
	ldy     _pad_index
	lda     _actors+30,y
	clc
	ldy     _pad_index
	adc     _actors+10,y
	bcc     L0049
	inx
L0049:	sec
	sbc     #$04
	bcs     L003A
	dex
L003A:	jsr     tosicmp
	bmi     L0037
;
; actors.yDir[SKULL] = DOWN;
;
	lda     #$01
	sta     _actors+74
;
; actors.xSpeed[SKULL] = 60;
;
	lda     #$3C
	sta     _actors+84
;
; actors.ySpeed[SKULL] = 140;
;
	lda     #$8C
;
; } else if (temp_x >= actors.x[pad_index] + actors.width[pad_index] - 8) {
;
	jmp     L004E
L0037:	lda     _temp_x
	jsr     pusha0
	ldy     _pad_index
	lda     _actors+20,y
	clc
	ldy     _pad_index
	adc     _actors,y
	bcc     L004A
	inx
L004A:	sec
	sbc     #$08
	bcs     L003F
	dex
L003F:	jsr     tosicmp
	bmi     L003C
;
; actors.yDir[SKULL] = RIGHT;
;
	lda     #$01
	sta     _actors+74
;
; actors.xSpeed[SKULL] = 100;
;
	lda     #$64
	sta     _actors+84
;
; } else {
;
	jmp     L004E
;
; actors.xSpeed[SKULL] = 140;
;
L003C:	lda     #$8C
	sta     _actors+84
;
; actors.ySpeed[SKULL] = 60;
;
	lda     #$3C
L004E:	sta     _actors+94
;
; actors.xDir[SKULL] = actors.x[SKULL] < actors.x[pad_index] ? LEFT : RIGHT;
;
	lda     _actors+4
	ldy     _pad_index
	cmp     _actors,y
	bcs     L005C
	lda     #$FF
	jmp     L0043
L005C:	lda     #$01
L0043:	cmp     #$80
	sta     _actors+64
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_main_input (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_main_input: near

.segment	"CODE"

;
; for (pad_index = 0; pad_index < paddle_count; ++pad_index) {
;
	lda     #$00
	sta     _pad_index
L0016:	lda     _pad_index
	cmp     _paddle_count
	bcs     L001A
;
; param1 = pad_index;
;
	sta     _param1
;
; if (pad_index < 2) {
;
	lda     _pad_index
	cmp     #$02
	bcs     L0018
;
; if (pad1 & PAD_LEFT) {
;
	lda     _pad1
	and     #$02
	beq     L0017
;
; add_x_speed(80);
;
	lda     #$50
	jsr     _add_x_speed
;
; actors.xDir[pad_index] = LEFT;
;
	ldy     _pad_index
	lda     #$FF
	sta     _actors+60,y
;
; if (pad1 & PAD_RIGHT) {
;
L0017:	lda     _pad1
	and     #$01
	beq     L0009
;
; add_x_speed(80);
;
	lda     #$50
	jsr     _add_x_speed
;
; actors.xDir[pad_index] = RIGHT;
;
	ldy     _pad_index
	lda     #$01
	sta     _actors+60,y
;
; move_horizontal_paddle();
;
L0009:	jsr     _move_horizontal_paddle
;
; } else {
;
	jmp     L0004
;
; if (pad1 & PAD_UP) {
;
L0018:	lda     _pad1
	and     #$08
	beq     L0019
;
; add_y_speed(80);
;
	lda     #$50
	jsr     _add_y_speed
;
; actors.yDir[pad_index] = UP;
;
	ldy     _pad_index
	lda     #$FF
	sta     _actors+70,y
;
; if (pad1 & PAD_DOWN) {
;
L0019:	lda     _pad1
	and     #$04
	beq     L000E
;
; add_y_speed(80);
;
	lda     #$50
	jsr     _add_y_speed
;
; actors.yDir[pad_index] = DOWN;
;
	ldy     _pad_index
	lda     #$01
	sta     _actors+70,y
;
; move_vertical_paddle();
;
L000E:	jsr     _move_vertical_paddle
;
; for (pad_index = 0; pad_index < paddle_count; ++pad_index) {
;
L0004:	inc     _pad_index
	jmp     L0016
;
; if (pad1_new & PAD_A) {
;
L001A:	lda     _pad1_new
	and     #$80
	beq     L001C
;
; if (skull_launched) {
;
	lda     _skull_launched
	beq     L001B
;
; temp = 80;
;
	lda     #$50
	sta     _temp
;
; actors.xVelocity[0] = temp;
;
	sta     _actors+120
;
; actors.xVelocity[1] = temp;
;
	lda     _temp
	sta     _actors+121
;
; actors.yVelocity[2] = temp;
;
	lda     _temp
	sta     _actors+132
;
; actors.yVelocity[3] = temp;
;
	lda     _temp
	sta     _actors+133
;
; } else {
;
	jmp     L001C
;
; skull_launched = TRUE;
;
L001B:	lda     #$01
	sta     _skull_launched
;
; actors.state[SKULL] = ROTATE_H;
;
	lda     #$02
	sta     _actors+194
;
; if (pad1 & PAD_B) {
;
L001C:	lda     _pad1
	and     #$40
	beq     L001D
;
; actors.counter[6] = 0;
;
	lda     #$00
	sta     _actors+166
;
; actors.current_frame[6] = 0;
;
	sta     _actors+186
;
; actors.state[6] = DYING;
;
	lda     #$03
	sta     _actors+196
;
; if (pad1 & PAD_SELECT) {
;
L001D:	lda     _pad1
	ldx     #$00
	and     #$20
	stx     tmp1
	ora     tmp1
;
; if (pad1_new & PAD_START) {
;
	lda     _pad1_new
	and     #$10
	beq     L0015
;
; game_state = MAP;
;
	lda     #$03
	sta     _game_state
;
; }
;
L0015:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ update_skull (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_skull: near

.segment	"CODE"

;
; backup_col_type = NULL;
;
	ldx     #$00
	stx     _backup_col_type
;
; if (skull_launched) {
;
	lda     _skull_launched
	jeq     L0065
;
; param1 = SKULL;
;
	lda     #$04
	sta     _param1
;
; temp_x = actors.x[SKULL] + get_x_speed();
;
	lda     _actors+4
	jsr     pusha0
	jsr     _get_x_speed
	jsr     tosaddax
	sta     _temp_x
;
; temp_y = actors.y[SKULL] + get_y_speed();
;
	lda     _actors+14
	jsr     pusha0
	jsr     _get_y_speed
	jsr     tosaddax
	sta     _temp_y
;
; ++temp_x;
;
	inc     _temp_x
;
; ++temp_y;
;
	inc     _temp_y
;
; if (actors.xDir[SKULL] == RIGHT) {
;
	lda     _actors+64
	cmp     #$01
	jne     L0003
;
; if (actors.yDir[SKULL] == DOWN) {
;
	lda     _actors+74
	cmp     #$01
	jne     L0005
;
; temp_x_col = temp_x;
;
	lda     _temp_x
	sta     _temp_x_col
;
; temp_y_col = temp_y + actors.height[SKULL];
;
	lda     _temp_y
	clc
	adc     _actors+34
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L004D
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0008
;
; actors.yDir[SKULL] = UP;
;
	lda     #$FF
	sta     _actors+74
;
; temp_y -= temp_y % 8;
;
	lda     _temp_y
	and     #$07
	eor     #$FF
	sec
	adc     _temp_y
	sta     _temp_y
;
; do_skull_tile_collision();
;
L0008:	jsr     _do_skull_tile_collision
;
; temp_x_col += actors.width[SKULL];
;
L004D:	lda     _actors+24
	clc
	adc     _temp_x_col
	sta     _temp_x_col
;
; temp_y_col = temp_y;
;
	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L004E
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0043
;
; actors.xDir[SKULL] = LEFT;
;
	lda     #$FF
	sta     _actors+64
;
; temp_x -= temp_x % 8;
;
	lda     _temp_x
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; temp_y_col += actors.height[SKULL];
;
L004E:	lda     _actors+34
	clc
	adc     _temp_y_col
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	jeq     L003B
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0043
;
; if (temp_y % 8 < COL_OFFSET && temp_x % 8 > 3) {
;
	lda     _temp_y
	and     #$07
	cmp     #$05
	lda     #$00
	sbc     #$00
	bvc     L000F
	eor     #$80
L000F:	bpl     L000E
	lda     _temp_x
	and     #$07
	cmp     #$04
	lda     #$00
	sbc     #$00
	bvs     L0011
	eor     #$80
L0011:	bpl     L000E
;
; actors.yDir[SKULL] = UP;
;
	lda     #$FF
	sta     _actors+74
;
; temp_y -= temp_y % 8;
;
	lda     _temp_y
;
; } else {
;
	jmp     L006B
;
; actors.xDir[SKULL] = LEFT;
;
L000E:	lda     #$FF
	sta     _actors+64
;
; temp_x -= temp_x % 8;
;
	lda     _temp_x
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; temp_x_col = temp_x;
;
L0005:	lda     _temp_x
	sta     _temp_x_col
;
; temp_y_col = temp_y;
;
	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L0052
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0017
;
; actors.yDir[SKULL] = DOWN;
;
	lda     #$01
	sta     _actors+74
;
; temp_y += 8;
;
	lda     #$08
	clc
	adc     _temp_y
	sta     _temp_y
;
; temp_y -= temp_y % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_y
	sta     _temp_y
;
; do_skull_tile_collision();
;
L0017:	jsr     _do_skull_tile_collision
;
; temp_x_col = temp_x + actors.width[SKULL];
;
L0052:	lda     _temp_x
	clc
	adc     _actors+24
	sta     _temp_x_col
;
; temp_y_col += actors.height[SKULL];
;
	lda     _actors+34
	clc
	adc     _temp_y_col
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L0053
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0043
;
; actors.xDir[SKULL] = LEFT;
;
	lda     #$FF
	sta     _actors+64
;
; temp_x -= temp_x % 8;
;
	lda     _temp_x
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; temp_y_col = temp_y;
;
L0053:	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	jeq     L003B
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0043
;
; if (temp_y % 8 < COL_OFFSET && temp_x % 8 < 3) {
;
	lda     _temp_y
	and     #$07
	cmp     #$05
	lda     #$00
	sbc     #$00
	bvc     L001E
	eor     #$80
L001E:	jpl     L0063
	lda     _temp_x
	and     #$07
	cmp     #$03
	lda     #$00
	sbc     #$00
	bvc     L0020
	eor     #$80
L0020:	jpl     L0063
;
; actors.xDir[SKULL] = LEFT;
;
	lda     #$FF
	sta     _actors+64
;
; temp_x -= temp_x % 8;
;
	lda     _temp_x
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; if (actors.yDir[SKULL] == DOWN) {
;
L0003:	lda     _actors+74
	cmp     #$01
	jne     L0025
;
; temp_x_col = temp_x + actors.width[SKULL];
;
	lda     _temp_x
	clc
	adc     _actors+24
	sta     _temp_x_col
;
; temp_y_col = temp_y + actors.height[SKULL];
;
	lda     _temp_y
	clc
	adc     _actors+34
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L0058
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0028
;
; actors.yDir[SKULL] = UP;
;
	lda     #$FF
	sta     _actors+74
;
; temp_y -= temp_y % 8;
;
	lda     _temp_y
	and     #$07
	eor     #$FF
	sec
	adc     _temp_y
	sta     _temp_y
;
; do_skull_tile_collision();
;
L0028:	jsr     _do_skull_tile_collision
;
; temp_x_col = temp_x;
;
L0058:	lda     _temp_x
	sta     _temp_x_col
;
; temp_y_col = temp_y;
;
	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L0059
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0043
;
; actors.xDir[SKULL] = RIGHT;
;
	lda     #$01
	sta     _actors+64
;
; temp_x += 8;
;
	lda     #$08
	clc
	adc     _temp_x
	sta     _temp_x
;
; temp_x -= temp_x % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; temp_x_col = temp_x;
;
L0059:	lda     _temp_x
	sta     _temp_x_col
;
; temp_y_col += actors.height[SKULL];
;
	lda     _actors+34
	clc
	adc     _temp_y_col
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	jeq     L003B
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0043
;
; if (temp_y % 8 < COL_OFFSET && temp_x % 8 > 3) {
;
	lda     _temp_y
	and     #$07
	cmp     #$05
	lda     #$00
	sbc     #$00
	bvc     L002F
	eor     #$80
L002F:	bpl     L005D
	lda     _temp_x
	and     #$07
	cmp     #$04
	lda     #$00
	sbc     #$00
	bvs     L0031
	eor     #$80
L0031:	bpl     L005D
;
; actors.yDir[SKULL] = UP;
;
	lda     #$FF
	sta     _actors+74
;
; temp_y -= temp_y % 8;
;
	lda     _temp_y
;
; } else {
;
	jmp     L006B
;
; actors.xDir[SKULL] = RIGHT;
;
L005D:	lda     #$01
	sta     _actors+64
;
; temp_x += 8;
;
	lda     #$08
	clc
	adc     _temp_x
	sta     _temp_x
;
; temp_x -= temp_x % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; temp_x_col = temp_x + actors.width[SKULL];
;
L0025:	lda     _temp_x
	clc
	adc     _actors+24
	sta     _temp_x_col
;
; temp_y_col = temp_y;
;
	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L005E
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0037
;
; actors.yDir[SKULL] = DOWN;
;
	lda     #$01
	sta     _actors+74
;
; temp_y += 8;
;
	lda     #$08
	clc
	adc     _temp_y
	sta     _temp_y
;
; temp_y -= temp_y % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_y
	sta     _temp_y
;
; do_skull_tile_collision();
;
L0037:	jsr     _do_skull_tile_collision
;
; temp_x_col = temp_x;
;
L005E:	lda     _temp_x
	sta     _temp_x_col
;
; temp_y_col = temp_y + actors.height[SKULL];
;
	lda     _temp_y
	clc
	adc     _actors+34
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L005F
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	jeq     L0043
;
; actors.xDir[SKULL] = RIGHT;
;
	lda     #$01
	sta     _actors+64
;
; temp_x += 8;
;
	lda     #$08
	clc
	adc     _temp_x
	sta     _temp_x
;
; temp_x -= temp_x % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; temp_y_col = temp_y;
;
L005F:	lda     _temp_y
	sta     _temp_y_col
;
; if (set_collision_data()) {
;
	jsr     _set_collision_data
	tax
	beq     L003B
;
; if (backup_col_type != COL_TYPE_SOFT) {
;
	lda     _backup_col_type
	cmp     #$06
	beq     L0043
;
; if (temp_y % 8 < COL_OFFSET && temp_x % 8 > 3) {
;
	lda     _temp_y
	and     #$07
	cmp     #$05
	lda     #$00
	sbc     #$00
	bvc     L003E
	eor     #$80
L003E:	bpl     L0063
	lda     _temp_x
	and     #$07
	cmp     #$04
	lda     #$00
	sbc     #$00
	bvs     L0040
	eor     #$80
L0040:	bpl     L0063
;
; actors.xDir[SKULL] = RIGHT;
;
	lda     #$01
	sta     _actors+64
;
; temp_x += 8;
;
	lda     #$08
	clc
	adc     _temp_x
	sta     _temp_x
;
; temp_x -= temp_x % 8;
;
	and     #$07
	eor     #$FF
	sec
	adc     _temp_x
	sta     _temp_x
;
; } else {
;
	jmp     L0043
;
; actors.yDir[SKULL] = DOWN;
;
L0063:	lda     #$01
	sta     _actors+74
;
; temp_y += 8;
;
	lda     #$08
	clc
	adc     _temp_y
	sta     _temp_y
;
; temp_y -= temp_y % 8;
;
L006B:	and     #$07
	eor     #$FF
	sec
	adc     _temp_y
	sta     _temp_y
;
; do_skull_tile_collision();
;
L0043:	jsr     _do_skull_tile_collision
;
; check_paddle_collision();
;
L003B:	jsr     _check_paddle_collision
;
; check_enemy_collision();
;
	jsr     _check_enemy_collision
;
; --temp_x;
;
	dec     _temp_x
;
; --temp_y;
;
	dec     _temp_y
;
; } else {
;
	jmp     L0066
;
; temp_x = actors.x[PADDLE] + (actors.width[PADDLE] >> 1) - (actors.width[SKULL] >> 1);
;
L0065:	lda     _actors+20
	lsr     a
	clc
	adc     _actors
	bcc     L004C
	inx
L004C:	jsr     pushax
	lda     _actors+24
	lsr     a
	jsr     tossuba0
	sta     _temp_x
;
; temp_y = actors.y[PADDLE] + actors.bbox_y[PADDLE] - actors.height[SKULL] - actors.bbox_x[SKULL];
;
	lda     _actors+10
	clc
	adc     _actors+50
	sec
	sbc     _actors+34
	sec
	sbc     _actors+44
	sta     _temp_y
;
; actors.x[SKULL] = temp_x;
;
L0066:	lda     _temp_x
	sta     _actors+4
;
; actors.y[SKULL] = temp_y;
;
	lda     _temp_y
	sta     _actors+14
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_skull (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_skull: near

.segment	"CODE"

;
; param1 = SKULL;
;
	lda     #$04
	sta     _param1
;
; param2 = skull_animation_index[actors.state[SKULL]][0];  // animation index
;
	ldx     #$00
	lda     _actors+194
	asl     a
	bcc     L0004
	inx
L0004:	sta     ptr1
	txa
	clc
	adc     #>(_skull_animation_index)
	sta     ptr1+1
	ldy     #<(_skull_animation_index)
	lda     (ptr1),y
	sta     _param2
;
; param3 = skull_animation_index[actors.state[SKULL]][1];  // number of frames
;
	ldx     #$00
	lda     _actors+194
	asl     a
	bcc     L0006
	inx
	clc
L0006:	adc     #<(_skull_animation_index)
	sta     ptr1
	txa
	adc     #>(_skull_animation_index)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _param3
;
; set_animation_info(skull_animation_index);
;
	lda     #<(_skull_animation_index)
	ldx     #>(_skull_animation_index)
	jsr     _set_animation_info
;
; oam_meta_spr(actors.x[SKULL], actors.y[SKULL], skull_animation[actors.current_frame[SKULL] + param2]);
;
	jsr     decsp2
	lda     _actors+4
	ldy     #$01
	sta     (sp),y
	lda     _actors+14
	dey
	sta     (sp),y
	ldx     #$00
	lda     _actors+184
	clc
	adc     _param2
	bcc     L0003
	inx
L0003:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_skull_animation)
	sta     ptr1
	lda     tmp1
	adc     #>(_skull_animation)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_paddles (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_paddles: near

.segment	"CODE"

;
; for (i = 0; i < paddle_count; ++i) {
;
	lda     #$00
	sta     _i
L000D:	lda     _i
	cmp     _paddle_count
	bcs     L0003
;
; if (i < 2) {
;
	cmp     #$02
	bcs     L0006
;
; oam_meta_spr(actors.x[i], actors.y[i], HorizontalPaddleSpr);
;
	jsr     decsp2
	ldy     _i
	lda     _actors,y
	ldy     #$01
	sta     (sp),y
	ldy     _i
	lda     _actors+10,y
	ldy     #$00
	sta     (sp),y
	lda     #<(_HorizontalPaddleSpr)
	ldx     #>(_HorizontalPaddleSpr)
;
; } else {
;
	jmp     L000C
;
; oam_meta_spr(actors.x[i], actors.y[i], VerticalPaddleSpr);
;
L0006:	jsr     decsp2
	ldy     _i
	lda     _actors,y
	ldy     #$01
	sta     (sp),y
	ldy     _i
	lda     _actors+10,y
	ldy     #$00
	sta     (sp),y
	lda     #<(_VerticalPaddleSpr)
	ldx     #>(_VerticalPaddleSpr)
L000C:	jsr     _oam_meta_spr
;
; for (i = 0; i < paddle_count; ++i) {
;
	inc     _i
	jmp     L000D
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; draw_paddles();
;
	jsr     _draw_paddles
;
; draw_skull();
;
	jsr     _draw_skull
;
; draw_level_specifics();
;
	jmp     _draw_level_specifics

.endproc

; ---------------------------------------------------------------
; void __near__ play_story (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_play_story: near

.segment	"CODE"

;
; switch (current_level) {
;
	lda     _current_level
;
; }
;
	beq     L0004
	cmp     #$01
	beq     L000E
	rts
;
; oam_clear();
;
L0004:	jsr     _oam_clear
;
; draw_level_specifics();
;
	jmp     _draw_level_specifics
;
; switch (story_step) {
;
L000E:	lda     _story_step
;
; }
;
	beq     L0008
	cmp     #$01
	beq     L000F
	cmp     #$02
	beq     L0007
	jmp     L0011
;
; load_level();
;
L0008:	jsr     _load_level
;
; show_map();
;
	jsr     _show_map
;
; actors.x[SKULL] = 125;
;
	lda     #$7D
	sta     _actors+4
;
; actors.y[SKULL] = 0;
;
	lda     #$00
	sta     _actors+14
;
; ++story_step;
;
	inc     _story_step
;
; ++actors.y[SKULL];
;
L000F:	inc     _actors+14
;
; if (actors.x[SKULL] < 162) {
;
	lda     _actors+4
	cmp     #$A2
	bcs     L0010
;
; ++actors.x[SKULL];
;
	inc     _actors+4
;
; if (actors.y[SKULL] > 200) {
;
L0010:	lda     _actors+14
	cmp     #$C9
	bcc     L0007
;
; ++story_step;
;
	inc     _story_step
;
; break;
;
	jmp     L0007
;
; p1_health = 3;
;
L0011:	lda     #$03
	sta     _p1_health
;
; p1_max_health = 3;
;
	sta     _p1_max_health
;
; game_state = MAIN;
;
	lda     #$01
	sta     _game_state
;
; oam_clear();
;
L0007:	jsr     _oam_clear
;
; draw_skull();
;
	jmp     _draw_skull

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; disable_irq();
;
	jsr     _disable_irq
;
; memfill(wram_array, 0, 0x2000);
;
	jsr     decsp3
	lda     #<(_wram_array)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_wram_array)
	sta     (sp),y
	lda     #$00
	tay
	sta     (sp),y
	ldx     #$20
	jsr     _memfill
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; load_title_screen();
;
	jsr     _load_title_screen
;
; load_map();
;
	jsr     _load_map
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi();
;
L0002:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (game_state == TITLE && pad1_new & PAD_START) {
;
	lda     _game_state
	bne     L001B
	lda     _pad1_new
	and     #$10
	beq     L001B
;
; game_state = STORY;
;
	lda     #$02
	sta     _game_state
;
; story_step = 0;
;
	lda     #$00
	sta     _story_step
;
; current_level = 0;
;
	sta     _current_level
;
; load_level();
;
	jsr     _load_level
;
; } else if (game_state == MAP && pad1_new & PAD_START) {
;
	jmp     L0002
L001B:	lda     _game_state
	cmp     #$03
	bne     L001E
	lda     _pad1_new
	and     #$10
	beq     L001E
;
; pal_bg(level_list[current_level * 4 + 2]);
;
	ldx     #$00
	lda     _current_level
	jsr     shlax2
	clc
	adc     #$02
	bcc     L000E
	inx
L000E:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_level_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_level_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_bg
;
; set_chr_mode_4(chr_4_index);
;
	lda     _chr_4_index
	jsr     _set_chr_mode_4
;
; set_chr_mode_5(chr_5_index);
;
	lda     _chr_5_index
	jsr     _set_chr_mode_5
;
; set_scroll_x(0x0000);
;
	ldx     #$00
	txa
	jsr     _set_scroll_x
;
; game_state = MAIN;
;
	lda     #$01
	sta     _game_state
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; } else if (game_state == STORY) {
;
	jmp     L0002
L001E:	lda     _game_state
	cmp     #$02
	bne     L001F
;
; play_story();
;
	jsr     _play_story
;
; if (pad1_new & PAD_A) {
;
	lda     _pad1_new
	and     #$80
	jeq     L0002
;
; game_state = MAIN;
;
	lda     #$01
	sta     _game_state
;
; } else if (game_state == MAIN) {
;
	jmp     L0002
L001F:	lda     _game_state
	cmp     #$01
	jne     L0002
;
; check_main_input();
;
	jsr     _check_main_input
;
; update_skull();
;
	jsr     _update_skull
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; if (brick_counter == 0) {
;
	lda     _brick_counter
;
; } else if (tombstone_count == 0) {
;
	beq     L0020
	lda     _tombstone_count
	jsr     booleq
;
; debug(0x30 + tombstone_count);
;
L0020:	lda     _tombstone_count
	clc
	adc     #$30
	jsr     _debug
;
; if (game_state == MAP) {
;
	lda     _game_state
	cmp     #$03
	jne     L0002
;
; show_map();
;
	jsr     _show_map
;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_spr(1, 1, 0x00, 0x00);  // Show skull TODO Change x,y to actual map position
;
	jsr     decsp3
	lda     #$01
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; while (1) {
;
	jmp     L0002

.endproc

